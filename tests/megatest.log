[1m============================= test session starts =============================[0m
platform win32 -- Python 3.11.3, pytest-7.4.0, pluggy-1.2.0 -- C:\Users\Jared\Documents\GitHub\bsp_tool\.env\Scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Jared\Documents\GitHub\bsp_tool
plugins: cov-4.1.0
[1mcollecting ... [0mcollected 687 items

tests/test_BspLump.py::TestRawBspLump::test_its_raw[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  0%][0m
tests/test_BspLump.py::TestRawBspLump::test_its_raw[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  0%][0m
tests/test_BspLump.py::TestRawBspLump::test_its_raw[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  0%][0m
tests/test_BspLump.py::TestRawBspLump::test_its_raw[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  0%][0m
tests/test_BspLump.py::TestRawBspLump::test_its_raw[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  0%][0m
tests/test_BspLump.py::TestRawBspLump::test_list_conversion[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  0%][0m
tests/test_BspLump.py::TestRawBspLump::test_list_conversion[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  1%][0m
tests/test_BspLump.py::TestRawBspLump::test_list_conversion[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  1%][0m
tests/test_BspLump.py::TestRawBspLump::test_list_conversion[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  1%][0m
tests/test_BspLump.py::TestRawBspLump::test_list_conversion[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  1%][0m
tests/test_BspLump.py::TestRawBspLump::test_indexing[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  1%][0m
tests/test_BspLump.py::TestRawBspLump::test_indexing[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  1%][0m
tests/test_BspLump.py::TestRawBspLump::test_indexing[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  1%][0m
tests/test_BspLump.py::TestRawBspLump::test_indexing[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  2%][0m
tests/test_BspLump.py::TestRawBspLump::test_indexing[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  2%][0m
tests/test_BspLump.py::TestBspLump::test_list_conversion[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  2%][0m
tests/test_BspLump.py::TestBspLump::test_list_conversion[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  2%][0m
tests/test_BspLump.py::TestBspLump::test_list_conversion[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  2%][0m
tests/test_BspLump.py::TestBspLump::test_list_conversion[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  2%][0m
tests/test_BspLump.py::TestBspLump::test_list_conversion[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  2%][0m
tests/test_BspLump.py::TestBspLump::test_indexing[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  3%][0m
tests/test_BspLump.py::TestBspLump::test_indexing[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  3%][0m
tests/test_BspLump.py::TestBspLump::test_indexing[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  3%][0m
tests/test_BspLump.py::TestBspLump::test_indexing[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  3%][0m
tests/test_BspLump.py::TestBspLump::test_indexing[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  3%][0m
tests/test_BspLump.py::TestBspLump::test_del[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  3%][0m
tests/test_BspLump.py::TestBspLump::test_del[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  3%][0m
tests/test_BspLump.py::TestBspLump::test_del[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  4%][0m
tests/test_BspLump.py::TestBspLump::test_del[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  4%][0m
tests/test_BspLump.py::TestBspLump::test_del[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  4%][0m
tests/test_BspLump.py::TestBspLump::test_setitem[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  4%][0m
tests/test_BspLump.py::TestBspLump::test_setitem[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  4%][0m
tests/test_BspLump.py::TestBspLump::test_setitem[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  4%][0m
tests/test_BspLump.py::TestBspLump::test_setitem[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  4%][0m
tests/test_BspLump.py::TestBspLump::test_setitem[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  5%][0m
tests/test_BspLump.py::TestBasicBspLump::test_its_basic[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  5%][0m
tests/test_BspLump.py::TestBasicBspLump::test_its_basic[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  5%][0m
tests/test_BspLump.py::TestBasicBspLump::test_its_basic[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  5%][0m
tests/test_BspLump.py::TestBasicBspLump::test_its_basic[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  5%][0m
tests/test_BspLump.py::TestBasicBspLump::test_its_basic[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  5%][0m
tests/test_BspLump.py::TestBasicBspLump::test_list_conversion[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  5%][0m
tests/test_BspLump.py::TestBasicBspLump::test_list_conversion[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  6%][0m
tests/test_BspLump.py::TestBasicBspLump::test_list_conversion[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  6%][0m
tests/test_BspLump.py::TestBasicBspLump::test_list_conversion[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  6%][0m
tests/test_BspLump.py::TestBasicBspLump::test_list_conversion[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  6%][0m
tests/test_BspLump.py::TestBasicBspLump::test_indexing[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [  6%][0m
tests/test_BspLump.py::TestBasicBspLump::test_indexing[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [  6%][0m
tests/test_BspLump.py::TestBasicBspLump::test_indexing[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [  6%][0m
tests/test_BspLump.py::TestBasicBspLump::test_indexing[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [  7%][0m
tests/test_BspLump.py::TestBasicBspLump::test_indexing[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [  7%][0m
tests/test_D3DBsp.py::test_no_errors[Call of Duty 4/test.d3dbsp] [32mPASSED[0m[32m  [  7%][0m
tests/test_D3DBsp.py::test_no_errors[Call of Duty 4/test_traverses.d3dbsp] [32mPASSED[0m[32m [  7%][0m
tests/test_D3DBsp.py::test_no_errors[Call of Duty 4/mp/mp_lobby.d3dbsp] [32mPASSED[0m[32m [  7%][0m
tests/test_D3DBsp.py::test_no_errors[Call of Duty 4/mp/mp_test.d3dbsp] [32mPASSED[0m[32m [  7%][0m
tests/test_D3DBsp.py::test_entities_loaded[Call of Duty 4/test.d3dbsp] [32mPASSED[0m[32m [  8%][0m
tests/test_D3DBsp.py::test_entities_loaded[Call of Duty 4/test_traverses.d3dbsp] [32mPASSED[0m[32m [  8%][0m
tests/test_D3DBsp.py::test_entities_loaded[Call of Duty 4/mp/mp_lobby.d3dbsp] [32mPASSED[0m[32m [  8%][0m
tests/test_D3DBsp.py::test_entities_loaded[Call of Duty 4/mp/mp_test.d3dbsp] [32mPASSED[0m[32m [  8%][0m
tests/test_Entities.py::test_generic[one_entity] [32mPASSED[0m[32m                  [  8%][0m
tests/test_Entities.py::test_generic[two_entities] [32mPASSED[0m[32m                [  8%][0m
tests/test_Entities.py::test_generic[one_newline_in_value] [32mPASSED[0m[32m        [  8%][0m
tests/test_Entities.py::test_generic[two_newlines_in_value] [32mPASSED[0m[32m       [  9%][0m
tests/test_Entities.py::test_generic[curly_brace_in_value] [32mPASSED[0m[32m        [  9%][0m
tests/test_Entities.py::test_ignore_comment [32mPASSED[0m[32m                       [  9%][0m
tests/test_Entities.py::test_curly_whitespace [32mPASSED[0m[32m                     [  9%][0m
tests/test_Entities.py::test_null_terminated [32mPASSED[0m[32m                      [  9%][0m
tests/test_Entities.py::test_null_terminated_after_newline [32mPASSED[0m[32m        [  9%][0m
tests/test_Entities.py::test_null_terminated_and_trailing_whitespace [32mPASSED[0m[32m [  9%][0m
tests/test_IdTechBsp.py::test_no_errors[Quake 2/mp_lobby.bsp] [32mPASSED[0m[32m     [ 10%][0m
tests/test_IdTechBsp.py::test_no_errors[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [ 10%][0m
tests/test_IdTechBsp.py::test_entities_loaded[Quake 2/mp_lobby.bsp] [32mPASSED[0m[32m [ 10%][0m
tests/test_IdTechBsp.py::test_entities_loaded[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[32m [ 10%][0m
tests/test_IdTechBsp.py::test_get_signature[Quake 2/mp_lobby.bsp] [33mXFAIL[0m[32m  [ 10%][0m
tests/test_IdTechBsp.py::test_get_signature[Quake 3 Arena/mp_lobby.bsp] [33mXFAIL[0m[32m [ 10%][0m
tests/test_QuakeBsp.py::test_no_errors[Quake/mp_lobby.bsp] [32mPASSED[0m[32m        [ 10%][0m
tests/test_QuakeBsp.py::test_entities_loaded[Quake/mp_lobby.bsp] [32mPASSED[0m[32m  [ 11%][0m
tests/test_ReMakeQuakeBsp.py::test_no_errors[ReMakeQuake/mp_lobby.bsp] [32mPASSED[0m[32m [ 11%][0m
tests/test_ReMakeQuakeBsp.py::test_entities_loaded[ReMakeQuake/mp_lobby.bsp] [32mPASSED[0m[32m [ 11%][0m
tests/test_RespawnBsp.py::test_no_errors[Titanfall 2/mp_crossfire.bsp] [32mPASSED[0m[32m [ 11%][0m
tests/test_RespawnBsp.py::test_entities_loaded[Titanfall 2/mp_crossfire.bsp] [32mPASSED[0m[32m [ 11%][0m
tests/test_ValveBsp.py::test_no_errors[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [ 11%][0m
tests/test_ValveBsp.py::test_no_errors[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [ 11%][0m
tests/test_ValveBsp.py::test_no_errors[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [ 12%][0m
tests/test_ValveBsp.py::test_no_errors[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [ 12%][0m
tests/test_ValveBsp.py::test_no_errors[Momentum Mod/mp_lobby.bsp] [32mPASSED[0m[32m [ 12%][0m
tests/test_ValveBsp.py::test_entities_loaded[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[32m [ 12%][0m
tests/test_ValveBsp.py::test_entities_loaded[Team Fortress 2/test2.bsp] [32mPASSED[0m[32m [ 12%][0m
tests/test_ValveBsp.py::test_entities_loaded[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[32m [ 12%][0m
tests/test_ValveBsp.py::test_entities_loaded[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[32m [ 12%][0m
tests/test_ValveBsp.py::test_entities_loaded[Momentum Mod/mp_lobby.bsp] [32mPASSED[0m[32m [ 13%][0m
tests/test_load_bsp.py::test_load_bsp[./-tests/maps-map_dirs0] [32mPASSED[0m[32m    [ 13%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-gesource-map_dirs1] [32mPASSED[0m[32m [ 13%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-half-life 2 riot act-map_dirs2] [32mPASSED[0m[32m [ 13%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-TFTS-map_dirs3] [32mPASSED[0m[32m [ 13%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-episodeone-map_dirs4] [32mPASSED[0m[32m [ 13%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-RunThinkShootLiveVille2-map_dirs5] [32mPASSED[0m[32m [ 13%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-cromulentville2-map_dirs6] [32mPASSED[0m[32m [ 14%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-companionpiece2-map_dirs7] [32mPASSED[0m[32m [ 14%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-eyecandy-map_dirs8] [32mPASSED[0m[32m [ 14%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-backontrack-map_dirs9] [32mPASSED[0m[32m [ 14%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-tworooms-map_dirs10] [32mPASSED[0m[32m [ 14%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-fusionville2-map_dirs11] [32mPASSED[0m[32m [ 14%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-tunetwo-map_dirs12] [32mPASSED[0m[32m [ 14%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-lvl2-map_dirs13] [32mPASSED[0m[32m [ 15%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-thewrapuptwo-map_dirs14] [32mPASSED[0m[32m [ 15%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-halloweenhorror4-map_dirs15] [32mPASSED[0m[32m [ 15%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-halflifeeternal-map_dirs16] [32mPASSED[0m[32m [ 15%][0m
tests/test_load_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-thelayout-map_dirs17] [32mPASSED[0m[32m [ 15%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Cry of Fear-map_dirs18] [32mPASSED[0m[32m [ 15%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/cstrike-map_dirs19] [32mPASSED[0m[32m [ 16%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/czero-map_dirs20] [32mPASSED[0m[32m [ 16%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/czeror-map_dirs21] [32mPASSED[0m[32m [ 16%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/dmc-map_dirs22] [32mPASSED[0m[32m [ 16%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/dod-map_dirs23] [32mPASSED[0m[32m [ 16%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/gearbox-map_dirs24] [32mPASSED[0m[32m [ 16%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/ns-map_dirs25] [32mPASSED[0m[32m [ 16%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/ricochet-map_dirs26] [32mPASSED[0m[32m [ 17%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/tfc-map_dirs27] [32mPASSED[0m[32m [ 17%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/valve-map_dirs28] [32mPASSED[0m[32m [ 17%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Halfquake Trilogy-map_dirs29] [32mPASSED[0m[32m [ 17%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Sven Co-op-map_dirs30] [32mPASSED[0m[32m [ 17%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Alien Swarm-map_dirs31] [32mPASSED[0m[32m [ 17%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Alien Swarm Reactive Drop-map_dirs32] [32mPASSED[0m[32m [ 17%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Blade Symphony-map_dirs33] [32mPASSED[0m[32m [ 18%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Contagion-map_dirs34] [32mPASSED[0m[32m [ 18%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Counter-Strike Global Offensive-map_dirs35] [32mPASSED[0m[32m [ 18%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-counter-strike source-map_dirs36] [32mPASSED[0m[32m [ 18%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-day of defeat source-map_dirs37] [32mPASSED[0m[32m [ 18%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-dayofinfamy-map_dirs38] [32mPASSED[0m[32m [ 18%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Dino D-Day-map_dirs39] [32mPASSED[0m[32m [ 18%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Double Action-map_dirs40] [32mPASSED[0m[32m [ 19%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-EntropyZero2-map_dirs41] [32mPASSED[0m[32m [ 19%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-EYE Divine Cybermancy Demo-map_dirs42] [32mPASSED[0m[32m [ 19%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Fistful of Frags-map_dirs43] [32mPASSED[0m[32m [ 19%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Fortress Forever-map_dirs44] [32mPASSED[0m[32m [ 19%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-G String-map_dirs45] [32mPASSED[0m[32m [ 19%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-GarrysMod-map_dirs46] [32mPASSED[0m[32m [ 19%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life 1 Source Deathmatch-map_dirs47] [32mPASSED[0m[32m [ 20%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/ep2-map_dirs48] [32mPASSED[0m[32m [ 20%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/episodic-map_dirs49] [32mPASSED[0m[32m [ 20%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/hl1-map_dirs50] [32mPASSED[0m[32m [ 20%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/hl2-map_dirs51] [32mPASSED[0m[32m [ 20%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/lostcoast-map_dirs52] [32mPASSED[0m[32m [ 20%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2 deathmatch-map_dirs53] [32mPASSED[0m[32m [ 20%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life 2 Update-map_dirs54] [32mPASSED[0m[32m [ 21%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life 2 VR-map_dirs55] [32mPASSED[0m[32m [ 21%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-insurgency2-map_dirs56] [32mPASSED[0m[32m [ 21%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Jabroni Brawl Episode 3-map_dirs57] [31mFAILED[0m[31m [ 21%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-left 4 dead-map_dirs58] [32mPASSED[0m[31m [ 21%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Left 4 Dead 2-map_dirs59] [32mPASSED[0m[31m [ 21%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-MINERVA-map_dirs60] [32mPASSED[0m[31m [ 21%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Momentum Mod Playtest-map_dirs61] [32mPASSED[0m[31m [ 22%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-NEOTOKYO-map_dirs62] [32mPASSED[0m[31m [ 22%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-nmrih-map_dirs63] [32mPASSED[0m[31m [ 22%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Portal-map_dirs64] [32mPASSED[0m[31m [ 22%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Portal 2-map_dirs65] [32mPASSED[0m[31m [ 22%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Portal Reloaded-map_dirs66] [32mPASSED[0m[31m [ 22%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-SourceFilmmaker-map_dirs67] [32mPASSED[0m[31m [ 22%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Synergy-map_dirs68] [32mPASSED[0m[31m [ 23%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Team Fortress 2-map_dirs69] [32mPASSED[0m[31m [ 23%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Transmissions Element 120-map_dirs70] [32mPASSED[0m[31m [ 23%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Vampire The Masquerade - Bloodlines-map_dirs71] [32mPASSED[0m[31m [ 23%][0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Zeno Clash Demo-map_dirs72] [32mPASSED[0m[31m [ 23%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-DarkPlaces-map_dirs73] [32mPASSED[0m[31m [ 23%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Quake-map_dirs74] [32mPASSED[0m[31m    [ 24%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Quake/rerelease-map_dirs75] [32mPASSED[0m[31m [ 24%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Quake64-map_dirs76] [32mPASSED[0m[31m  [ 24%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Alkaline-map_dirs77] [32mPASSED[0m[31m [ 24%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Quake/2psb-map_dirs78] [32mPASSED[0m[31m [ 24%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Quake/rerelease/dopa-map_dirs79] [32mPASSED[0m[31m [ 24%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Anachronox-map_dirs80] [32mPASSED[0m[31m [ 24%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Daikatana-map_dirs81] [32mPASSED[0m[31m [ 25%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-DDayNormandy-map_dirs82] [31mFAILED[0m[31m [ 25%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-HereticII-map_dirs83] [32mPASSED[0m[31m [ 25%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Hexen2-map_dirs84] [32mPASSED[0m[31m   [ 25%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Nexuiz-map_dirs85] [32mPASSED[0m[31m   [ 25%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-RTCW-map_dirs86] [32mPASSED[0m[31m     [ 25%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-SiN-map_dirs87] [32mPASSED[0m[31m      [ 25%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-SoF-map_dirs88] [32mPASSED[0m[31m      [ 26%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Dreamcast/SoF-map_dirs89] [32mPASSED[0m[31m [ 26%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-SoF2-map_dirs90] [32mPASSED[0m[31m     [ 26%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-StarTrekEliteForce-map_dirs91] [32mPASSED[0m[31m [ 26%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-QuakeII-map_dirs92] [32mPASSED[0m[31m  [ 26%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-QuakeII/rerelease-map_dirs93] [31mFAILED[0m[31m [ 26%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-QuakeIII-map_dirs94] [32mPASSED[0m[31m [ 26%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Dreamcast/QuakeIII-map_dirs95] [32mPASSED[0m[31m [ 27%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-QuakeLive-map_dirs96] [32mPASSED[0m[31m [ 27%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-WolfET-map_dirs97] [32mPASSED[0m[31m   [ 27%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-WRATH-map_dirs98] [32mPASSED[0m[31m    [ 27%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Xonotic-map_dirs99] [32mPASSED[0m[31m  [ 27%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Warfork-map_dirs100] [32mPASSED[0m[31m [ 27%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Warsow-map_dirs101] [32mPASSED[0m[31m  [ 27%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CoD1Demo-map_dirs102] [32mPASSED[0m[31m [ 28%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CoD1-map_dirs103] [32mPASSED[0m[31m    [ 28%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CoD2-map_dirs104] [32mPASSED[0m[31m    [ 28%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CoD4-map_dirs105] [32mPASSED[0m[31m    [ 28%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Nightfire-map_dirs106] [32mPASSED[0m[31m [ 28%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Dreamcast/Paranoia-map_dirs107] [32mPASSED[0m[31m [ 28%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-BlackMesa-map_dirs108] [32mPASSED[0m[31m [ 28%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-BloodyGoodTime-map_dirs109] [32mPASSED[0m[31m [ 29%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Contagion-map_dirs110] [32mPASSED[0m[31m [ 29%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CSMalvinas-map_dirs111] [32mPASSED[0m[31m [ 29%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CSS/Bocuma747_SurfMaps-map_dirs112] [32mPASSED[0m[31m [ 29%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CSS/OiuSURF_SurfMaps-map_dirs113] [32mPASSED[0m[31m [ 29%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CSO2-map_dirs114] [32mPASSED[0m[31m    [ 29%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-DarkMessiah/singleplayer-map_dirs115] [31mFAILED[0m[31m [ 29%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-DarkMessiah/multiplayer-map_dirs116] [31mFAILED[0m[31m [ 30%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-TheHiddenSource-map_dirs117] [32mPASSED[0m[31m [ 30%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-HL2DM/patbytes-map_dirs118] [32mPASSED[0m[31m [ 30%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Infra-map_dirs119] [32mPASSED[0m[31m   [ 30%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-MeruBasu-map_dirs120] [32mPASSED[0m[31m [ 30%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-MomentumMod-map_dirs121] [32mPASSED[0m[31m [ 30%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-SiNEpisodes-map_dirs122] [32mPASSED[0m[31m [ 31%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-TacticalIntervention-map_dirs123] [32mPASSED[0m[31m [ 31%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-TeamFortressQuake-map_dirs124] [32mPASSED[0m[31m [ 31%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-TheShip-map_dirs125] [32mPASSED[0m[31m [ 31%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Vindictus-map_dirs126] [31mFAILED[0m[31m [ 31%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Vindictus/Client v1.69 EU-map_dirs127] [32mPASSED[0m[31m [ 31%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Xbox/Half-Life2-map_dirs128] [32mPASSED[0m[31m [ 31%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Titanfall-map_dirs129] [32mPASSED[0m[31m [ 32%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Titanfall/beta-map_dirs130] [32mPASSED[0m[31m [ 32%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-TitanfallOnline-map_dirs131] [32mPASSED[0m[31m [ 32%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Titanfall2-map_dirs132] [32mPASSED[0m[31m [ 32%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends-map_dirs133] [32mPASSED[0m[31m [ 32%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season0-map_dirs134] [32mPASSED[0m[31m [ 32%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season1-map_dirs135] [32mPASSED[0m[31m [ 32%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season2-map_dirs136] [32mPASSED[0m[31m [ 33%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season3-map_dirs137] [32mPASSED[0m[31m [ 33%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season4-map_dirs138] [32mPASSED[0m[31m [ 33%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season5-map_dirs139] [32mPASSED[0m[31m [ 33%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season7-map_dirs140] [32mPASSED[0m[31m [ 33%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season8-map_dirs141] [32mPASSED[0m[31m [ 33%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season9-map_dirs142] [32mPASSED[0m[31m [ 33%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season10-map_dirs143] [32mPASSED[0m[31m [ 34%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season11-map_dirs144] [32mPASSED[0m[31m [ 34%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season12-map_dirs145] [32mPASSED[0m[31m [ 34%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season13-map_dirs146] [32mPASSED[0m[31m [ 34%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season14-map_dirs147] [32mPASSED[0m[31m [ 34%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season15-map_dirs148] [32mPASSED[0m[31m [ 34%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season16-map_dirs149] [32mPASSED[0m[31m [ 34%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season17-map_dirs150] [32mPASSED[0m[31m [ 35%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/season18-map_dirs151] [32mPASSED[0m[31m [ 35%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-ApexLegends/switch/season9-map_dirs152] [32mPASSED[0m[31m [ 35%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-FAKK2-map_dirs153] [32mPASSED[0m[31m   [ 35%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-Alice-map_dirs154] [32mPASSED[0m[31m   [ 35%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-MoHAA/demo-map_dirs155] [32mPASSED[0m[31m [ 35%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-MoHAA/main-map_dirs156] [32mPASSED[0m[31m [ 35%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-MoHAA/mainta-map_dirs157] [32mPASSED[0m[31m [ 36%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-MoHAA/maintt-map_dirs158] [32mPASSED[0m[31m [ 36%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-StarTrekEliteForceIIDemo-map_dirs159] [32mPASSED[0m[31m [ 36%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-StarTrekEliteForceII-map_dirs160] [32mPASSED[0m[31m [ 36%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-StarWarsJediKnight-map_dirs161] [32mPASSED[0m[31m [ 36%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod-StarWarsJediKnightII-map_dirs162] [32mPASSED[0m[31m [ 36%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod/PS4-Titanfall2-map_dirs163] [32mPASSED[0m[31m [ 36%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod/PS4-Titanfall2_tech_test-map_dirs164] [32mPASSED[0m[31m [ 37%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod/X360-Left4Dead-map_dirs165] [31mFAILED[0m[31m [ 37%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod/X360-Left4Dead2-map_dirs166] [32mPASSED[0m[31m [ 37%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod/X360-OrangeBox-map_dirs167] [32mPASSED[0m[31m [ 37%][0m
tests/test_load_bsp.py::test_load_bsp[E:/Mod/X360-Portal2-map_dirs168] [31mFAILED[0m[31m [ 37%][0m
tests/test_lumps.py::TestRemapIndex::test_guess [32mPASSED[0m[31m                   [ 37%][0m
tests/test_lumps.py::TestRemapIndex::test_range [32mPASSED[0m[31m                   [ 37%][0m
tests/test_lumps.py::TestRemapIndex::test_negative_out_of_range [32mPASSED[0m[31m   [ 38%][0m
tests/test_lumps.py::TestRemapSliceToRange::test_lazy [32mPASSED[0m[31m             [ 38%][0m
tests/test_lumps.py::TestBspLump::test_implicit_change [32mPASSED[0m[31m            [ 38%][0m
tests/test_save.py::test_D3DBsp_modern_warfare[Call of Duty 4/test.d3dbsp] [33mXFAIL[0m[31m [ 38%][0m
tests/test_save.py::test_D3DBsp_modern_warfare[Call of Duty 4/test_traverses.d3dbsp] [33mXFAIL[0m[31m [ 38%][0m
tests/test_save.py::test_D3DBsp_modern_warfare[Call of Duty 4/mp/mp_lobby.d3dbsp] [33mXFAIL[0m[31m [ 38%][0m
tests/test_save.py::test_D3DBsp_modern_warfare[Call of Duty 4/mp/mp_test.d3dbsp] [33mXFAIL[0m[31m [ 39%][0m
tests/test_save.py::test_IdTechBsp_quake2[Quake 2/mp_lobby.bsp] [33mXFAIL[0m[31m    [ 39%][0m
tests/test_save.py::test_IdTechBsp_quake3[Quake 3 Arena/mp_lobby.bsp] [33mXFAIL[0m[31m [ 39%][0m
tests/test_save.py::test_ReMakeQuakeBsp_remake_quake[ReMakeQuake/mp_lobby.bsp] [33mXFAIL[0m[31m [ 39%][0m
tests/test_save.py::test_RespawnBsp_titanfall2[Titanfall 2/mp_crossfire.bsp] [33mXFAIL[0m[31m [ 39%][0m
tests/test_save.py::test_QuakeBsp_quake[Quake/mp_lobby.bsp] [33mXFAIL[0m (not
implemented yet)[31m                                                         [ 39%][0m
tests/test_save.py::test_ValveBsp_orange_box[Team Fortress 2/mp_lobby.bsp] [33mXFAIL[0m[31m [ 39%][0m
tests/test_save.py::test_ValveBsp_orange_box[Team Fortress 2/test2.bsp] [33mXFAIL[0m[31m [ 40%][0m
tests/test_save.py::test_ValveBsp_orange_box[Team Fortress 2/test_displacement_decompile.bsp] [33mXFAIL[0m[31m [ 40%][0m
tests/test_save.py::test_ValveBsp_orange_box[Team Fortress 2/test_physcollide.bsp] [33mXFAIL[0m[31m [ 40%][0m
tests/test_save.py::test_ValveBsp_strata[Momentum Mod/mp_lobby.bsp] [33mXFAIL[0m[31m [ 40%][0m
tests/branches/test_LumpClasses.py::test_Struct[arkane.dark_messiah_sp.Model] [32mPASSED[0m[31m [ 40%][0m
tests/branches/test_LumpClasses.py::test_Struct[arkane.dark_messiah_sp.TextureInfo] [32mPASSED[0m[31m [ 40%][0m
tests/branches/test_LumpClasses.py::test_Struct[gearbox.nightfire.Leaf] [32mPASSED[0m[31m [ 40%][0m
tests/branches/test_LumpClasses.py::test_Struct[gearbox.nightfire.Model] [32mPASSED[0m[31m [ 41%][0m
tests/branches/test_LumpClasses.py::test_Struct[gearbox.nightfire.Node] [32mPASSED[0m[31m [ 41%][0m
tests/branches/test_LumpClasses.py::test_Struct[gearbox.nightfire.TextureInfo] [32mPASSED[0m[31m [ 41%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.qbism.Leaf] [32mPASSED[0m[31m [ 41%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.qfusion.Face] [32mPASSED[0m[31m [ 41%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.qfusion.GridLight] [32mPASSED[0m[31m [ 41%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.qfusion.Vertex] [32mPASSED[0m[31m [ 41%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.ClipNode] [32mPASSED[0m[31m [ 42%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.Face] [32mPASSED[0m[31m [ 42%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.Leaf] [32mPASSED[0m[31m [ 42%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.MipTexture] [32mPASSED[0m[31m [ 42%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.Model] [32mPASSED[0m[31m [ 42%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.Node] [32mPASSED[0m[31m [ 42%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.Plane] [32mPASSED[0m[31m [ 42%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake.TextureInfo] [32mPASSED[0m[31m [ 43%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake2.Leaf] [32mPASSED[0m[31m [ 43%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake2.Model] [32mPASSED[0m[31m [ 43%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake2.Node] [32mPASSED[0m[31m [ 43%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake2.TextureInfo] [32mPASSED[0m[31m [ 43%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Brush] [32mPASSED[0m[31m [ 43%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.BrushSide] [32mPASSED[0m[31m [ 43%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Effect] [32mPASSED[0m[31m [ 44%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Face] [32mPASSED[0m[31m [ 44%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.GridLight] [32mPASSED[0m[31m [ 44%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Leaf] [32mPASSED[0m[31m [ 44%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Model] [32mPASSED[0m[31m [ 44%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Node] [32mPASSED[0m[31m [ 44%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Plane] [32mPASSED[0m[31m [ 44%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Texture] [32mPASSED[0m[31m [ 45%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake3.Vertex] [32mPASSED[0m[31m [ 45%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.quake64.MipTexture] [32mPASSED[0m[31m [ 45%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.remake_quake.Leaf] [32mPASSED[0m[31m [ 45%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.remake_quake.Node] [32mPASSED[0m[31m [ 45%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.remake_quake_old.ClipNode] [32mPASSED[0m[31m [ 45%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.remake_quake_old.Face] [32mPASSED[0m[31m [ 45%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.remake_quake_old.Leaf] [32mPASSED[0m[31m [ 46%][0m
tests/branches/test_LumpClasses.py::test_Struct[id_software.remake_quake_old.Node] [32mPASSED[0m[31m [ 46%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.AxisAlignedBoundingBox] [32mPASSED[0m[31m [ 46%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.BrushSide] [32mPASSED[0m[31m [ 46%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Cell] [32mPASSED[0m[31m [ 46%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.CullGroup] [32mPASSED[0m[31m [ 46%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Leaf] [32mPASSED[0m[31m [ 47%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Light] [32mPASSED[0m[31m [ 47%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Model] [32mPASSED[0m[31m [ 47%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Node] [32mPASSED[0m[31m [ 47%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Occluder] [32mPASSED[0m[31m [ 47%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.PatchCollision] [32mPASSED[0m[31m [ 47%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Plane] [32mPASSED[0m[31m [ 47%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Portal] [32mPASSED[0m[31m [ 48%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty1_demo.Vertex] [32mPASSED[0m[31m [ 48%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty2.CollisionEdge] [32mPASSED[0m[31m [ 48%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty2.CollisionTriangle] [32mPASSED[0m[31m [ 48%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty2.Model] [32mPASSED[0m[31m [ 48%][0m
tests/branches/test_LumpClasses.py::test_Struct[infinity_ward.call_of_duty2.Vertex] [32mPASSED[0m[31m [ 48%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.cso2_2018.DisplacementInfo] [32mPASSED[0m[31m [ 48%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.Area] [32mPASSED[0m[31m [ 49%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.AreaPortal] [32mPASSED[0m[31m [ 49%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.BrushSide] [32mPASSED[0m[31m [ 49%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.DisplacementInfo] [32mPASSED[0m[31m [ 49%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.Face] [32mPASSED[0m[31m [ 49%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.Facev2] [32mPASSED[0m[31m [ 49%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.Leaf] [32mPASSED[0m[31m [ 49%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.Node] [32mPASSED[0m[31m [ 50%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.Overlay] [32mPASSED[0m[31m [ 50%][0m
tests/branches/test_LumpClasses.py::test_Struct[nexon.vindictus69.StaticPropScale] [32mPASSED[0m[31m [ 50%][0m
tests/branches/test_LumpClasses.py::test_Struct[raven.hexen2.Model] [32mPASSED[0m[31m [ 50%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.BVHNode] [32mPASSED[0m[31m [ 50%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.CellAABBNode] [32mPASSED[0m[31m [ 50%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.LevelInfo] [32mPASSED[0m[31m [ 50%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.MaterialSort] [32mPASSED[0m[31m [ 51%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.Mesh] [32mPASSED[0m[31m [ 51%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.Model] [32mPASSED[0m[31m [ 51%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.ShadowMesh] [32mPASSED[0m[31m [ 51%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.TextureData] [32mPASSED[0m[31m [ 51%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.VertexBlinnPhong] [32mPASSED[0m[31m [ 51%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.VertexLitBump] [32mPASSED[0m[31m [ 51%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.VertexLitFlat] [32mPASSED[0m[31m [ 52%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.VertexUnlit] [32mPASSED[0m[31m [ 52%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends.VertexUnlitTS] [32mPASSED[0m[31m [ 52%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.apex_legends13.LightProbe] [32mPASSED[0m[31m [ 52%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Bounds] [32mPASSED[0m[31m [ 52%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Brush] [32mPASSED[0m[31m [ 52%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Cell] [32mPASSED[0m[31m [ 52%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.CellAABBNode] [32mPASSED[0m[31m [ 53%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Cubemap] [32mPASSED[0m[31m [ 53%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.GeoSet] [32mPASSED[0m[31m [ 53%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Grid] [32mPASSED[0m[31m [ 53%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.LevelInfo] [32mPASSED[0m[31m [ 53%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.LightProbe] [32mPASSED[0m[31m [ 53%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.LightProbeRef] [32mPASSED[0m[31m [ 54%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Mesh] [32mPASSED[0m[31m [ 54%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.MeshBounds] [32mPASSED[0m[31m [ 54%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Model] [32mPASSED[0m[31m [ 54%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Node] [32mPASSED[0m[31m [ 54%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.ObjRefBounds] [32mPASSED[0m[31m [ 54%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.Plane] [32mPASSED[0m[31m [ 54%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.PortalIndexSet] [32mPASSED[0m[31m [ 55%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.ShadowMesh] [32mPASSED[0m[31m [ 55%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.ShadowMeshAlphaVertex] [32mPASSED[0m[31m [ 55%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.StaticPropv12] [32mPASSED[0m[31m [ 55%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.TextureData] [32mPASSED[0m[31m [ 55%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.TextureVector] [32mPASSED[0m[31m [ 55%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.TricollHeader] [32mPASSED[0m[31m [ 55%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.TricollNode] [32mPASSED[0m[31m [ 56%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.VertexBlinnPhong] [32mPASSED[0m[31m [ 56%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.VertexLitBump] [32mPASSED[0m[31m [ 56%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.VertexLitFlat] [32mPASSED[0m[31m [ 56%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.VertexUnlit] [32mPASSED[0m[31m [ 56%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.VertexUnlitTS] [32mPASSED[0m[31m [ 56%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall.WorldLight] [32mPASSED[0m[31m [ 56%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall2.GeoSet] [32mPASSED[0m[31m [ 57%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall2.LightProbeRef] [32mPASSED[0m[31m [ 57%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall2.LightmapPage] [32mPASSED[0m[31m [ 57%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall2.ShadowEnvironment] [32mPASSED[0m[31m [ 57%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall2.StaticPropv13] [32mPASSED[0m[31m [ 57%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall2.WorldLightv2] [32mPASSED[0m[31m [ 57%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall2.WorldLightv3] [32mPASSED[0m[31m [ 57%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Bounds_x360] [32mPASSED[0m[31m [ 58%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Brush_x360] [32mPASSED[0m[31m [ 58%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.CellAABBNode_x360] [32mPASSED[0m[31m [ 58%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Cell_x360] [32mPASSED[0m[31m [ 58%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Cubemap_x360] [32mPASSED[0m[31m [ 58%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.GeoSet_x360] [32mPASSED[0m[31m [ 58%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Grid_x360] [32mPASSED[0m[31m [ 58%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.LevelInfo_x360] [32mPASSED[0m[31m [ 59%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.LightProbeRef_x360] [32mPASSED[0m[31m [ 59%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.LightProbe_x360] [32mPASSED[0m[31m [ 59%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.MeshBounds_x360] [32mPASSED[0m[31m [ 59%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Mesh_x360] [32mPASSED[0m[31m [ 59%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Model_x360] [32mPASSED[0m[31m [ 59%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Node_x360] [32mPASSED[0m[31m [ 59%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.ObjRefBounds_x360] [32mPASSED[0m[31m [ 60%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.Plane_x360] [32mPASSED[0m[31m [ 60%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.PortalIndexSet_x360] [32mPASSED[0m[31m [ 60%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.ShadowMeshAlphaVertex_x360] [32mPASSED[0m[31m [ 60%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.ShadowMesh_x360] [32mPASSED[0m[31m [ 60%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.StaticPropv12_x360] [32mPASSED[0m[31m [ 60%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.TextureData_x360] [32mPASSED[0m[31m [ 60%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.TextureVector_x360] [32mPASSED[0m[31m [ 61%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.TricollHeader_x360] [32mPASSED[0m[31m [ 61%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.TricollNode_x360] [32mPASSED[0m[31m [ 61%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.VertexBlinnPhong_x360] [32mPASSED[0m[31m [ 61%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.VertexLitBump_x360] [32mPASSED[0m[31m [ 61%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.VertexLitFlat_x360] [32mPASSED[0m[31m [ 61%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.VertexUnlitTS_x360] [32mPASSED[0m[31m [ 62%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.VertexUnlit_x360] [32mPASSED[0m[31m [ 62%][0m
tests/branches/test_LumpClasses.py::test_Struct[respawn.titanfall_x360.WorldLight_x360] [32mPASSED[0m[31m [ 62%][0m
tests/branches/test_LumpClasses.py::test_Struct[ritual.fakk2.Face] [32mPASSED[0m[31m [ 62%][0m
tests/branches/test_LumpClasses.py::test_Struct[ritual.fakk2.Texture] [32mPASSED[0m[31m [ 62%][0m
tests/branches/test_LumpClasses.py::test_Struct[ritual.mohaa_demo.Leaf] [32mPASSED[0m[31m [ 62%][0m
tests/branches/test_LumpClasses.py::test_Struct[ritual.mohaa_demo.Texture] [32mPASSED[0m[31m [ 62%][0m
tests/branches/test_LumpClasses.py::test_Struct[ritual.mohaa_demo.Unknown14] [32mPASSED[0m[31m [ 63%][0m
tests/branches/test_LumpClasses.py::test_Struct[ritual.star_trek_elite_force2_demo.Face] [32mPASSED[0m[31m [ 63%][0m
tests/branches/test_LumpClasses.py::test_Struct[ritual.star_trek_elite_force2_demo.Vertex] [32mPASSED[0m[31m [ 63%][0m
tests/branches/test_LumpClasses.py::test_Struct[strata.strata.DisplacementInfo] [32mPASSED[0m[31m [ 63%][0m
tests/branches/test_LumpClasses.py::test_Struct[strata.strata.Face] [32mPASSED[0m[31m [ 63%][0m
tests/branches/test_LumpClasses.py::test_Struct[strata.strata.Leaf] [32mPASSED[0m[31m [ 63%][0m
tests/branches/test_LumpClasses.py::test_Struct[strata.strata.Node] [32mPASSED[0m[31m [ 63%][0m
tests/branches/test_LumpClasses.py::test_Struct[strata.strata.Overlay] [32mPASSED[0m[31m [ 64%][0m
tests/branches/test_LumpClasses.py::test_Struct[strata.strata.WaterOverlay] [32mPASSED[0m[31m [ 64%][0m
tests/branches/test_LumpClasses.py::test_Struct[troika.vampire.Face] [32mPASSED[0m[31m [ 64%][0m
tests/branches/test_LumpClasses.py::test_Struct[utoplanet.merubasu.StaticPropv11] [32mPASSED[0m[31m [ 64%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.goldsrc.ClipNode] [32mPASSED[0m[31m [ 64%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.goldsrc.Model] [32mPASSED[0m[31m [ 64%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.left4dead.StaticPropv8] [32mPASSED[0m[31m [ 64%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.left4dead2.StaticPropv9] [32mPASSED[0m[31m [ 65%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box.Leaf] [32mPASSED[0m[31m [ 65%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box.StaticPropv10] [32mPASSED[0m[31m [ 65%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.BrushSide_x360] [32mPASSED[0m[31m [ 65%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Brush_x360] [32mPASSED[0m[31m [ 65%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Cubemap_x360] [32mPASSED[0m[31m [ 65%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.DisplacementVertex_x360] [32mPASSED[0m[31m [ 65%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Face_x360] [32mPASSED[0m[31m [ 66%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Leaf_x360] [32mPASSED[0m[31m [ 66%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Model_x360] [32mPASSED[0m[31m [ 66%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Node_x360] [32mPASSED[0m[31m [ 66%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Overlay_x360] [32mPASSED[0m[31m [ 66%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.Plane_x360] [32mPASSED[0m[31m [ 66%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.StaticPropv10_x360] [32mPASSED[0m[31m [ 66%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.StaticPropv4_x360] [32mPASSED[0m[31m [ 67%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.StaticPropv5_x360] [32mPASSED[0m[31m [ 67%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.StaticPropv6_x360] [32mPASSED[0m[31m [ 67%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.TextureData_x360] [32mPASSED[0m[31m [ 67%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.TextureInfo_x360] [32mPASSED[0m[31m [ 67%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.WaterOverlay_x360] [32mPASSED[0m[31m [ 67%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.orange_box_x360.WorldLight_x360] [32mPASSED[0m[31m [ 67%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.sdk_2013.StaticPropv10] [32mPASSED[0m[31m [ 68%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.sdk_2013.StaticPropv11] [32mPASSED[0m[31m [ 68%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.sdk_2013_x360.StaticPropv10_x360] [32mPASSED[0m[31m [ 68%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.sdk_2013_x360.StaticPropv11_x360] [32mPASSED[0m[31m [ 68%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.sdk_2013_x360.StaticPropv8_x360] [32mPASSED[0m[31m [ 68%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.sdk_2013_x360.StaticPropv9_x360] [32mPASSED[0m[31m [ 68%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.Brush] [32mPASSED[0m[31m [ 68%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.BrushSide] [32mPASSED[0m[31m [ 69%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.Cubemap] [32mPASSED[0m[31m [ 69%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.DisplacementInfo] [32mPASSED[0m[31m [ 69%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.DisplacementVertex] [32mPASSED[0m[31m [ 69%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.Face] [32mPASSED[0m[31m [ 69%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.Leaf] [32mPASSED[0m[31m [ 69%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.LeafAmbientSample] [32mPASSED[0m[31m [ 70%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.Model] [32mPASSED[0m[31m [ 70%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.Node] [32mPASSED[0m[31m [ 70%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.Overlay] [32mPASSED[0m[31m [ 70%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.StaticPropv4] [32mPASSED[0m[31m [ 70%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.StaticPropv5] [32mPASSED[0m[31m [ 70%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.StaticPropv6] [32mPASSED[0m[31m [ 70%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.StaticPropv7] [32mPASSED[0m[31m [ 71%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.TextureData] [32mPASSED[0m[31m [ 71%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.TextureInfo] [32mPASSED[0m[31m [ 71%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.WaterOverlay] [32mPASSED[0m[31m [ 71%][0m
tests/branches/test_LumpClasses.py::test_Struct[valve.source.WorldLight] [32mPASSED[0m[31m [ 71%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ace_team.zeno_clash.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 71%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ace_team.zeno_clash.LumpHeader] [32mPASSED[0m[31m [ 71%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[arkane.dark_messiah_mp.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 72%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[arkane.dark_messiah_mp.LumpHeader] [32mPASSED[0m[31m [ 72%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[arkane.dark_messiah_sp.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 72%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[arkane.dark_messiah_sp.GameLumpHeader] [32mPASSED[0m[31m [ 72%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[arkane.dark_messiah_sp.LumpHeader] [32mPASSED[0m[31m [ 72%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[gearbox.blue_shift.LumpHeader] [32mPASSED[0m[31m [ 72%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[gearbox.nightfire.BrushSide] [32mPASSED[0m[31m [ 72%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[gearbox.nightfire.Face] [32mPASSED[0m[31m [ 73%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[gearbox.nightfire.LumpHeader] [32mPASSED[0m[31m [ 73%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.qbism.BrushSide] [32mPASSED[0m[31m [ 73%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.qbism.LumpHeader] [32mPASSED[0m[31m [ 73%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.qfusion.BrushSide] [32mPASSED[0m[31m [ 73%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.qfusion.LumpHeader] [32mPASSED[0m[31m [ 73%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.quake.LumpHeader] [32mPASSED[0m[31m [ 73%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.quake.Vertex] [32mPASSED[0m[31m [ 74%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.quake2.Brush] [32mPASSED[0m[31m [ 74%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.quake2.BrushSide] [32mPASSED[0m[31m [ 74%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.quake2.LumpHeader] [32mPASSED[0m[31m [ 74%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.quake3.LumpHeader] [32mPASSED[0m[31m [ 74%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.quake64.LumpHeader] [32mPASSED[0m[31m [ 74%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.remake_quake.LumpHeader] [32mPASSED[0m[31m [ 74%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[id_software.remake_quake_old.LumpHeader] [32mPASSED[0m[31m [ 75%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[infinity_ward.call_of_duty1.LumpHeader] [32mPASSED[0m[31m [ 75%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[infinity_ward.call_of_duty1_demo.Brush] [32mPASSED[0m[31m [ 75%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[infinity_ward.call_of_duty1_demo.LumpHeader] [32mPASSED[0m[31m [ 75%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[infinity_ward.call_of_duty1_demo.TriangleSoup] [32mPASSED[0m[31m [ 75%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[infinity_ward.call_of_duty2.LumpHeader] [32mPASSED[0m[31m [ 75%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[infinity_ward.call_of_duty2.TriangleSoup] [32mPASSED[0m[31m [ 75%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[infinity_ward.modern_warfare.LumpHeader] [32mPASSED[0m[31m [ 76%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ion_storm.daikatana.LumpHeader] [32mPASSED[0m[31m [ 76%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[loiste.infra.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 76%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[loiste.infra.LumpHeader] [32mPASSED[0m[31m [ 76%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.cso2.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 76%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.cso2.LumpHeader] [32mPASSED[0m[31m [ 76%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.cso2_2018.LumpHeader] [32mPASSED[0m[31m [ 77%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.vindictus.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 77%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.vindictus.LumpHeader] [32mPASSED[0m[31m [ 77%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.vindictus69.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 77%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.vindictus69.GameLumpHeader] [32mPASSED[0m[31m [ 77%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[nexon.vindictus69.LumpHeader] [32mPASSED[0m[31m [ 77%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[outerlight.outerlight.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 77%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[outerlight.outerlight.LumpHeader] [32mPASSED[0m[31m [ 78%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[raven.hexen2.LumpHeader] [32mPASSED[0m[31m [ 78%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[raven.soldier_of_fortune.LumpHeader] [32mPASSED[0m[31m [ 78%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[raven.soldier_of_fortune2.LumpHeader] [32mPASSED[0m[31m [ 78%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.apex_legends.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 78%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.apex_legends.LumpHeader] [32mPASSED[0m[31m [ 78%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.apex_legends.PackedVertex] [32mPASSED[0m[31m [ 78%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.apex_legends.SurfaceProperty] [32mPASSED[0m[31m [ 79%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.apex_legends13.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 79%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.apex_legends13.LumpHeader] [32mPASSED[0m[31m [ 79%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.CellBSPNode] [32mPASSED[0m[31m [ 79%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 79%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.GridCell] [32mPASSED[0m[31m [ 79%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.LightProbeTree] [32mPASSED[0m[31m [ 79%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.LightmapHeader] [32mPASSED[0m[31m [ 80%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.LumpHeader] [32mPASSED[0m[31m [ 80%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.MaterialSort] [32mPASSED[0m[31m [ 80%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.Portal] [32mPASSED[0m[31m [ 80%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall.PortalEdgeIntersectHeader] [32mPASSED[0m[31m [ 80%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall2.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 80%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall2.LumpHeader] [32mPASSED[0m[31m [ 80%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.CellBSPNode_x360] [32mPASSED[0m[31m [ 81%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 81%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.GridCell_x360] [32mPASSED[0m[31m [ 81%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.LeafWaterData_x360] [32mPASSED[0m[31m [ 81%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.LightProbeTree_x360] [32mPASSED[0m[31m [ 81%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.LightmapHeader_x360] [32mPASSED[0m[31m [ 81%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.LumpHeader] [32mPASSED[0m[31m [ 81%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.MaterialSort_x360] [32mPASSED[0m[31m [ 82%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.PortalEdgeIntersectHeader_x360] [32mPASSED[0m[31m [ 82%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.Portal_x360] [32mPASSED[0m[31m [ 82%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[respawn.titanfall_x360.Vertex_x360] [32mPASSED[0m[31m [ 82%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.fakk2.LumpHeader] [32mPASSED[0m[31m [ 82%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.mohaa.LumpHeader] [32mPASSED[0m[31m [ 82%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.mohaa_bt.LumpHeader] [32mPASSED[0m[31m [ 82%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.mohaa_demo.BrushSide] [32mPASSED[0m[31m [ 83%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.mohaa_demo.LumpHeader] [32mPASSED[0m[31m [ 83%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.sin.LumpHeader] [32mPASSED[0m[31m [ 83%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.star_trek_elite_force2.LumpHeader] [32mPASSED[0m[31m [ 83%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[ritual.star_trek_elite_force2_demo.LumpHeader] [32mPASSED[0m[31m [ 83%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[strata.strata.BrushSide] [32mPASSED[0m[31m [ 83%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[strata.strata.FaceBrushList] [32mPASSED[0m[31m [ 83%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[strata.strata.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 84%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[strata.strata.LeafAmbientIndex] [32mPASSED[0m[31m [ 84%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[strata.strata.LumpHeader] [32mPASSED[0m[31m [ 84%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[strata.strata.Primitive] [32mPASSED[0m[31m [ 84%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[troika.vampire.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 84%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[troika.vampire.LumpHeader] [32mPASSED[0m[31m [ 84%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[utoplanet.merubasu.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 85%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[utoplanet.merubasu.LumpHeader] [32mPASSED[0m[31m [ 85%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.alien_swarm.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 85%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.alien_swarm.LumpHeader] [32mPASSED[0m[31m [ 85%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.goldsrc.LumpHeader] [32mPASSED[0m[31m [ 85%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.left4dead.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 85%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.left4dead.LumpHeader] [32mPASSED[0m[31m [ 85%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.left4dead2.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 86%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.left4dead2.LumpHeader] [32mPASSED[0m[31m [ 86%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 86%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box.LumpHeader] [32mPASSED[0m[31m [ 86%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.AreaPortal_x360] [32mPASSED[0m[31m [ 86%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.Area_x360] [32mPASSED[0m[31m [ 86%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 86%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.LeafAmbientIndex_x360] [32mPASSED[0m[31m [ 87%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.LeafWaterData_x360] [32mPASSED[0m[31m [ 87%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.LumpHeader] [32mPASSED[0m[31m [ 87%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.OverlayFade_x360] [32mPASSED[0m[31m [ 87%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.orange_box_x360.Vertex_x360] [32mPASSED[0m[31m [ 87%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.sdk_2013.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 87%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.sdk_2013.LumpHeader] [32mPASSED[0m[31m [ 87%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.sdk_2013_x360.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 88%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.sdk_2013_x360.LumpHeader] [32mPASSED[0m[31m [ 88%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.Area] [32mPASSED[0m[31m [ 88%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.AreaPortal] [32mPASSED[0m[31m [ 88%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.CornerNeighbour] [32mPASSED[0m[31m [ 88%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 88%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.GameLumpHeader] [32mPASSED[0m[31m [ 88%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.LeafAmbientIndex] [32mPASSED[0m[31m [ 89%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.LeafWaterData] [32mPASSED[0m[31m [ 89%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.LumpHeader] [32mPASSED[0m[31m [ 89%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.OverlayFade] [32mPASSED[0m[31m [ 89%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.Primitive] [32mPASSED[0m[31m [ 89%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source.SubNeighbour] [32mPASSED[0m[31m [ 89%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source_filmmaker.GAME_LUMP_HEADER] [32mPASSED[0m[31m [ 89%][0m
tests/branches/test_LumpClasses.py::test_MappedArray[valve.source_filmmaker.LumpHeader] [32mPASSED[0m[31m [ 90%][0m
tests/branches/test_LumpClasses.py::test_BitField[respawn.apex_legends.BVHLeaf5Header] [32mPASSED[0m[31m [ 90%][0m
tests/branches/test_LumpClasses.py::test_BitField[respawn.apex_legends.BVHLeaf5Triangle] [32mPASSED[0m[31m [ 90%][0m
tests/branches/test_LumpClasses.py::test_BitField[respawn.titanfall.Primitive] [32mPASSED[0m[31m [ 90%][0m
tests/branches/test_LumpClasses.py::test_BitField[respawn.titanfall.TricollTriangle] [32mPASSED[0m[31m [ 90%][0m
tests/branches/test_base.py::TestStruct::test_init [32mPASSED[0m[31m                [ 90%][0m
tests/branches/test_base.py::TestStruct::test_unpack [32mPASSED[0m[31m              [ 90%][0m
tests/branches/test_base.py::TestStruct::test_pack [32mPASSED[0m[31m                [ 91%][0m
tests/branches/test_base.py::TestStruct::test_as_bytes [32mPASSED[0m[31m            [ 91%][0m
tests/branches/test_base.py::TestMappedArray::test_init [32mPASSED[0m[31m           [ 91%][0m
tests/branches/test_base.py::TestMappedArray::test_attr_format_collision [32mPASSED[0m[31m [ 91%][0m
tests/branches/test_base.py::TestMappedArray::test_as_cpp [32mPASSED[0m[31m         [ 91%][0m
tests/branches/test_base.py::TestMappedArray::test_as_bytes [32mPASSED[0m[31m       [ 91%][0m
tests/branches/test_base.py::TestBitField::test_init [32mPASSED[0m[31m              [ 91%][0m
tests/branches/test_base.py::TestBitField::test_overflow [32mPASSED[0m[31m          [ 92%][0m
tests/branches/test_base.py::TestBitField::test_as_bytes [32mPASSED[0m[31m          [ 92%][0m
tests/branches/test_base.py::test_dict_subgroup [32mPASSED[0m[31m                   [ 92%][0m
tests/branches/id_software/test_quake.py::TestMethods::test_vertices_of_face[Quake/mp_lobby.bsp] [32mPASSED[0m[31m [ 92%][0m
tests/branches/id_software/test_quake.py::TestMethods::test_lightmap_of_face[Quake/mp_lobby.bsp] [32mPASSED[0m[31m [ 92%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_parser[Quake 2/mp_lobby.bsp] [32mPASSED[0m[31m [ 92%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_parser[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[31m [ 93%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_parser[Team Fortress 2/test2.bsp] [32mPASSED[0m[31m [ 93%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_parser[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[31m [ 93%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_parser[Momentum Mod/mp_lobby.bsp] [32mPASSED[0m[31m [ 93%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_run_length_encode [32mPASSED[0m[31m [ 93%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_run_length_decode [32mPASSED[0m[31m [ 93%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_as_bytes[Quake 2/mp_lobby.bsp] [32mPASSED[0m[31m [ 93%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_as_bytes[Team Fortress 2/mp_lobby.bsp] [32mPASSED[0m[31m [ 94%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_as_bytes[Team Fortress 2/test2.bsp] [32mPASSED[0m[31m [ 94%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_as_bytes[Team Fortress 2/test_physcollide.bsp] [32mPASSED[0m[31m [ 94%][0m
tests/branches/id_software/test_quake2.py::TestVisibility::test_as_bytes[Momentum Mod/mp_lobby.bsp] [32mPASSED[0m[31m [ 94%][0m
tests/branches/id_software/test_quake3.py::test_face_struct[Quake 3 Arena/mp_lobby.bsp] [32mPASSED[0m[31m [ 94%][0m
tests/branches/id_software/test_remake_quake.py::TestMethods::test_vertices_of_face[ReMakeQuake/mp_lobby.bsp] [32mPASSED[0m[31m [ 94%][0m
tests/branches/id_software/test_remake_quake.py::TestMethods::test_lightmap_of_face[ReMakeQuake/mp_lobby.bsp] [32mPASSED[0m[31m [ 94%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_simple_indices[Call of Duty 4/test.d3dbsp] [32mPASSED[0m[31m [ 95%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_simple_indices[Call of Duty 4/test_traverses.d3dbsp] [32mPASSED[0m[31m [ 95%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_simple_indices[Call of Duty 4/mp/mp_lobby.d3dbsp] [32mPASSED[0m[31m [ 95%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_simple_indices[Call of Duty 4/mp/mp_test.d3dbsp] [32mPASSED[0m[31m [ 95%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_layered_indices[Call of Duty 4/test.d3dbsp] [32mPASSED[0m[31m [ 95%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_layered_indices[Call of Duty 4/test_traverses.d3dbsp] [32mPASSED[0m[31m [ 95%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_layered_indices[Call of Duty 4/mp/mp_lobby.d3dbsp] [32mPASSED[0m[31m [ 95%][0m
tests/branches/infinity_ward/test_modern_warfare.py::TestBounds::test_layered_indices[Call of Duty 4/mp/mp_test.d3dbsp] [32mPASSED[0m[31m [ 96%][0m
tests/branches/respawn/test_titanfall2.py::TestAssumptions::test_grid_cells_count[Titanfall 2/mp_crossfire.bsp] [32mPASSED[0m[31m [ 96%][0m
tests/branches/respawn/test_titanfall2.py::TestMethods::test_get_brush_sides[Titanfall 2/mp_crossfire.bsp] [33mXFAIL[0m[31m [ 96%][0m
tests/branches/strata/test_strata.py::test_spec[Momentum Mod/mp_lobby.bsp] [32mPASSED[0m[31m [ 96%][0m
tests/branches/valve/test_orange_box.py::TestMethods::test_vertices_of_displacement[Team Fortress 2/test2.bsp] [32mPASSED[0m[31m [ 96%][0m
tests/branches/valve/test_orange_box.py::TestMethods::test_vertices_of_displacement[Team Fortress 2/test_displacement_decompile.bsp] [32mPASSED[0m[31m [ 96%][0m
tests/branches/valve/test_source.py::TestPakFile::test_new [32mPASSED[0m[31m        [ 96%][0m
tests/branches/valve/test_source.py::TestPakFile::test_from_file[empty.zip] [32mPASSED[0m[31m [ 97%][0m
tests/branches/valve/test_source.py::TestPakFile::test_from_file[deflate.zip] [32mPASSED[0m[31m [ 97%][0m
tests/branches/valve/test_source.py::TestPakFile::test_bytes[empty.zip] [32mPASSED[0m[31m [ 97%][0m
tests/branches/valve/test_source.py::TestPakFile::test_bytes[deflate.zip] [32mPASSED[0m[31m [ 97%][0m
tests/branches/valve/test_source.py::TestPakFile::test_save_changes [32mPASSED[0m[31m [ 97%][0m
tests/extensions/test_compiler_signature.py::test_MRVNRadiant[Titanfall 2/mp_crossfire.bsp] [32mPASSED[0m[31m [ 97%][0m
tests/extensions/test_compiler_signature.py::test_identify[Titanfall 2/mp_crossfire.bsp] [32mPASSED[0m[31m [ 97%][0m
tests/extensions/diff/test_base.py::TestDiff::test_has_no_changes [32mPASSED[0m[31m [ 98%][0m
tests/extensions/diff/test_base.py::TestDiff::test_as_text_FAST [32mPASSED[0m[31m   [ 98%][0m
tests/extensions/diff/test_base.py::TestDiff::test_as_text_VERBOSE [32mPASSED[0m[31m [ 98%][0m
tests/extensions/diff/test_base.py::TestDiff::test_as_text_VERY_VERBOSE [32mPASSED[0m[31m [ 98%][0m
tests/extensions/diff/test_bsps.py::TestBspDiff::test_invalid_lump [32mPASSED[0m[31m [ 98%][0m
tests/extensions/diff/test_bsps.py::TestBspDiff::test_lump_added [32mPASSED[0m[31m  [ 98%][0m
tests/extensions/diff/test_bsps.py::TestBspDiff::test_lump_removed [32mPASSED[0m[31m [ 98%][0m
tests/extensions/diff/test_core.py::TestXXD::test_input[no padding needed] [32mPASSED[0m[31m [ 99%][0m
tests/extensions/diff/test_core.py::TestXXD::test_input[padding required] [32mPASSED[0m[31m [ 99%][0m
tests/extensions/diff/test_core.py::TestXXD::test_input[every byte] [32mPASSED[0m[31m [ 99%][0m
tests/extensions/diff/test_shared.py::TestEntitiesDiff::test_short_stats [32mPASSED[0m[31m [ 99%][0m
tests/extensions/diff/test_shared.py::TestEntitiesDiff::test_unified_diff [32mPASSED[0m[31m [ 99%][0m
tests/extensions/diff/valve/test_source.py::TestPakfileDiff::test_short_stats [32mPASSED[0m[31m [ 99%][0m
tests/extensions/diff/valve/test_source.py::TestPakfileDiff::test_unified_diff [32mPASSED[0m[31m [100%][0m

================================== FAILURES ===================================
[31m[1m_ test_load_bsp[D:/SteamLibrary/steamapps/common-Jabroni Brawl Episode 3-map_dirs57] _[0m

group_path = 'D:/SteamLibrary/steamapps/common'
game_name = 'Jabroni Brawl Episode 3', map_dirs = ['jbep3/maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 13 out of 141 .bsps failed[0m
[1m[31mE         ('ValveBsp', 'bsp_tool.branches.valve.sdk_2013', 21)[0m
[1m[31mE         sprp v11[0m
[1m[31mE       assert {'jbep3/maps/jb_atrium.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_mall/bay_guardrail_left.mdl<\\xde\\xb7\\x04\\xe4\\x0f\\x1c\\xe0\\xa0\\x87x \\xde\\xb7\\x04 \\xde\\xb7\\x04~\\xb6\\x82x0\\xeae\\x07P\\x01|\\xdab8\\xde\\xb7\\x04\\xb0l\\x17P|\\xdabD{\\x170\\xeae\\x07P', 44, 45, 'invalid continuation byte')})"), 'jbep3/maps/jb_farmhouse.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_militia/ladderwood.mdl\\x7fD\\xd8\\xf7\\x04\\xe4\\x0f^\\xe0\\xa0\\xa7Q(\\xd8\\xf7\\x04(\\xd8\\xf7\\x04~\\xb6\\xa2Q\\xb0b.\\nP\\x01|\\xda\\xa4@\\xd8\\xf7\\x04\\xb0lYP|\\xda\\xa4D{Y\\xb0b.\\nP', 40, 41, 'invalid continuation byte')})"), 'jbep3/maps/jb_fof_depot.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_militia/fencewoodlog04_long.mdl\\xe4\\x0f\\xb5h\\xdcw\\xe0\\xa0\\xf9_L\\xdcw~\\xb6\\xf4_O\\x80\\nP\\x01|\\xda\\xfbd\\xdcw\\xb0l\\xb0P|\\xda\\xfbD{\\xb0O\\x80\\nP', 47, 48, 'invalid continuation byte')})"), 'jbep3/maps/jb_gatorfarm.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_urban/porch_light003.mdl\\xff\\x7f\\xbc\\xde\\xf7\\x04\\xc4 \\\\\\xe0\\xa0dP\\xa0\\xde\\xf7\\x04\\xa0\\xde\\xf7\\x04~\\xb6_P\\xf0O5\\tP\\x01|\\xf9\\xa2\\xb8\\xde\\xf7\\x04PmWP|\\xf9\\xa2\\xe4{W\\xf0O5\\tP', 37, 38, 'invalid start byte')})"), 'jbep3/maps/jb_harvest.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_debris/metal_panel01a.mdl\\x7f\\x04\\xd9w\\x05\\xc4 \\xe0\\xe0\\xa0)]\\xe8\\xd8w\\x05\\xe8\\xd8w\\x05~\\xb6$]\\x80\\xcc{\\rP\\x01|\\xf9&\\x01\\xd9w\\x05Pm\\xdbP|\\xf9&\\x01\\xe4{\\xdb\\x80\\xcc{\\rP', 40, 41, 'invalid continuation byte')})"), 'jbep3/maps/jb_meatworld.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_gore/lawnmower_bloodpool.mdl\\xff\\x7f\\xc4 \\x9aX\\xde7\\x05\\xe0\\xa0\\x92x<\\xde7\\x05~\\xb6\\x8dx`D\\x01\\x0cP\\x01|\\xf9\\xe0T\\xde7\\x05Pm\\x95P|\\xf9\\xe0\\xe4{\\x95`D\\x01\\x0cP', 41, 42, 'invalid start byte')})"), 'jbep3/maps/jb_miniroyale.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_office/light_inset.mdl\\xff\\xff\\xff\\x7f\\xe4\\x0f\\x9b\\xc0\\xd9\\x85\\xe0\\xa0Nz\\xa4\\xd9\\x85~\\xb6Iz\\xc0\\xfa\\x10\\x08P\\x01|\\xda\\xe1\\xbc\\xd9\\x85\\xb0l\\x96P|\\xda\\xe1D{\\x96\\xc0\\xfa\\x10\\x08P', 38, 39, 'invalid start byte')})"), 'jbep3/maps/jb_no_mercy.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/effects/urban_puddle_model02a.mdl\\xfc\\xda\\xd7\\x04\\xe4\\x0f7\\xe0\\xa0\\x87x\\xe0\\xda\\xd7\\x04\\xe0\\xda\\xd7\\x04~\\xb6\\x82x0\\x96\\xa3\\nP\\x01|\\xda}\\xf8\\xda\\xd7\\x04\\xb0l2P|\\xda}D{20\\x96\\xa3\\nP', 40, 41, 'invalid start byte')})"), 'jbep3/maps/jb_poolparty.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_lab/powerbox02d.mdl\\xff\\xff\\xff\\x7f\\xb4\\xdd\\xd7\\x04\\xe4\\x0f>\\xe0\\xa0\\xedz\\x98\\xdd\\xd7\\x04\\x98\\xdd\\xd7\\x04~\\xb6\\xe8z\\xa0\\x8fz\\tP\\x01|\\xda\\x84\\xb0\\xdd\\xd7\\x04\\xb0l9P|\\xda\\x84D{9\\xa0\\x8fz\\tP', 32, 33, 'invalid start byte')})"), 'jbep3/maps/jb_portal_bts.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/autoportal_frame/autoportal_frame.mdl\\xdeW\\xe0\\xa0\\rS\\xe4\\xddW~\\xb6\\x08S0et\\x07P\\x01|\\xda?\\x01\\xfc\\xddW\\xb0l\\xf4P|\\xda?\\x01D{\\xf40et\\x07P', 50, 51, 'invalid continuation byte')})"), 'jbep3/maps/jb_ss2_ops.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/ss2/bench.mdl4\\xdcw\\x05\\x1d\\xfc\\xdf\\xff\\xff\\xff\\x7f|\\xdcw\\x05\\xc4 \\xe0\\xe0\\xa0)]`\\xdcw\\x05`\\xdcw\\x05~\\xb6$]\\xe0\\xdf\\x16\\x0fP\\x01|\\xf9&\\x01x\\xdcw\\x05Pm\\xdbP|\\xf9&\\x01\\xe4{\\xdb\\xe0\\xdf\\x16\\x0fP', 21, 22, 'invalid continuation byte')})"), 'jbep3/maps/jb_tiny_terminal.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_street/police_barricade2.mdl\\x1c\\xdbZ\\x05\\xc4 \\xf5\\xe0\\xa0cz\\xdbZ\\x05\\xdbZ\\x05~\\xb6^z@\\x8bP\\nP\\x01|\\xf9;\\x01\\x18\\xdbZ\\x05Pm\\xf0P|\\xf9;\\x01\\xe4{\\xf0@\\x8bP\\nP', 42, 43, 'invalid continuation byte')})"), 'jbep3/maps/jb_two2forts.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/gunman/cactus.mdl=\\xeb\\xab0\\x08\\xff\\xff\\xff\\x7fh\\xdcw:\\x11\\xac\\xe0\\xa0\\x9cxL\\xdcw~\\xb6\\x97x\\xc0\\xa1\\xd9\\rP\\x01|\\xda\\xf2d\\xdcw\\xb0l\\xa7P|\\xda\\xf2D{\\xa7\\xc0\\xa1\\xd9\\rP', 25, 27, 'invalid continuation byte')})")} == {}[0m
[1m[31mE         Left contains 13 more items:[0m
[1m[31mE         {'jbep3/maps/jb_atrium.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_mall/bay_guardrail_left.mdl<\\xde\\xb7\\x04\\xe4\\x0f\\x1c\\xe0\\xa0\\x87x \\xde\\xb7\\x04 \\xde\\xb7\\x04~\\xb6\\x82x0\\xeae\\x07P\\x01|\\xdab8\\xde\\xb7\\x04\\xb0l\\x17P|\\xdabD{\\x170\\xeae\\x07P', 44, 45, 'invalid continuation byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_farmhouse.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_militia/ladderwood.mdl\\x7fD\\xd8\\xf7\\x04\\xe4\\x0f^\\xe0\\xa0\\xa7Q(\\xd8\\xf7\\x04(\\xd8\\xf7\\x04~\\xb6\\xa2Q\\xb0b.\\nP\\x01|\\xda\\xa4@\\xd8\\xf7\\x04\\xb0lYP|\\xda\\xa4D{Y\\xb0b.\\nP', 40, 41, 'invalid continuation byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_fof_depot.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_militia/fencewoodlog04_long.mdl\\xe4\\x0f\\xb5h\\xdcw\\xe0\\xa0\\xf9_L\\xdcw~\\xb6\\xf4_O\\x80\\nP\\x01|\\xda\\xfbd\\xdcw\\xb0l\\xb0P|\\xda\\xfbD{\\xb0O\\x80\\nP', 47, 48, 'invalid continuation byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_gatorfarm.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_urban/porch_light003.mdl\\xff\\x7f\\xbc\\xde\\xf7\\x04\\xc4 \\\\\\xe0\\xa0dP\\xa0\\xde\\xf7\\x04\\xa0\\xde\\xf7\\x04~\\xb6_P\\xf0O5\\tP\\x01|\\xf9\\xa2\\xb8\\xde\\xf7\\x04PmWP|\\xf9\\xa2\\xe4{W\\xf0O5\\tP', 37, 38, 'invalid start byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_harvest.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_debris/metal_panel01a.mdl\\x7f\\x04\\xd9w\\x05\\xc4 \\xe0\\xe0\\xa0)]\\xe8\\xd8w\\x05\\xe8\\xd8w\\x05~\\xb6$]\\x80\\xcc{\\rP\\x01|\\xf9&\\x01\\xd9w\\x05Pm\\xdbP|\\xf9&\\x01\\xe4{\\xdb\\x80\\xcc{\\rP', 40, 41, 'invalid continuation byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_meatworld.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_gore/lawnmower_bloodpool.mdl\\xff\\x7f\\xc4 \\x9aX\\xde7\\x05\\xe0\\xa0\\x92x<\\xde7\\x05~\\xb6\\x8dx`D\\x01\\x0cP\\x01|\\xf9\\xe0T\\xde7\\x05Pm\\x95P|\\xf9\\xe0\\xe4{\\x95`D\\x01\\x0cP', 41, 42, 'invalid start byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_miniroyale.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_office/light_inset.mdl\\xff\\xff\\xff\\x7f\\xe4\\x0f\\x9b\\xc0\\xd9\\x85\\xe0\\xa0Nz\\xa4\\xd9\\x85~\\xb6Iz\\xc0\\xfa\\x10\\x08P\\x01|\\xda\\xe1\\xbc\\xd9\\x85\\xb0l\\x96P|\\xda\\xe1D{\\x96\\xc0\\xfa\\x10\\x08P', 38, 39, 'invalid start byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_no_mercy.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/effects/urban_puddle_model02a.mdl\\xfc\\xda\\xd7\\x04\\xe4\\x0f7\\xe0\\xa0\\x87x\\xe0\\xda\\xd7\\x04\\xe0\\xda\\xd7\\x04~\\xb6\\x82x0\\x96\\xa3\\nP\\x01|\\xda}\\xf8\\xda\\xd7\\x04\\xb0l2P|\\xda}D{20\\x96\\xa3\\nP', 40, 41, 'invalid start byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_poolparty.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_lab/powerbox02d.mdl\\xff\\xff\\xff\\x7f\\xb4\\xdd\\xd7\\x04\\xe4\\x0f>\\xe0\\xa0\\xedz\\x98\\xdd\\xd7\\x04\\x98\\xdd\\xd7\\x04~\\xb6\\xe8z\\xa0\\x8fz\\tP\\x01|\\xda\\x84\\xb0\\xdd\\xd7\\x04\\xb0l9P|\\xda\\x84D{9\\xa0\\x8fz\\tP', 32, 33, 'invalid start byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_portal_bts.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/autoportal_frame/autoportal_frame.mdl\\xdeW\\xe0\\xa0\\rS\\xe4\\xddW~\\xb6\\x08S0et\\x07P\\x01|\\xda?\\x01\\xfc\\xddW\\xb0l\\xf4P|\\xda?\\x01D{\\xf40et\\x07P', 50, 51, 'invalid continuation byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_ss2_ops.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/ss2/bench.mdl4\\xdcw\\x05\\x1d\\xfc\\xdf\\xff\\xff\\xff\\x7f|\\xdcw\\x05\\xc4 \\xe0\\xe0\\xa0)]`\\xdcw\\x05`\\xdcw\\x05~\\xb6$]\\xe0\\xdf\\x16\\x0fP\\x01|\\xf9&\\x01x\\xdcw\\x05Pm\\xdbP|\\xf9&\\x01\\xe4{\\xdb\\xe0\\xdf\\x16\\x0fP', 21, 22, 'invalid continuation byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_tiny_terminal.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_street/police_barricade2.mdl\\x1c\\xdbZ\\x05\\xc4 \\xf5\\xe0\\xa0cz\\xdbZ\\x05\\xdbZ\\x05~\\xb6^z@\\x8bP\\nP\\x01|\\xf9;\\x01\\x18\\xdbZ\\x05Pm\\xf0P|\\xf9;\\x01\\xe4{\\xf0@\\x8bP\\nP', 42, 43, 'invalid continuation byte')})"),[0m
[1m[31mE          'jbep3/maps/jb_two2forts.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/gunman/cactus.mdl=\\xeb\\xab0\\x08\\xff\\xff\\xff\\x7fh\\xdcw:\\x11\\xac\\xe0\\xa0\\x9cxL\\xdcw~\\xb6\\x97x\\xc0\\xa1\\xd9\\rP\\x01|\\xda\\xf2d\\xdcw\\xb0l\\xa7P|\\xda\\xf2D{\\xa7\\xc0\\xa1\\xd9\\rP', 25, 27, 'invalid continuation byte')})")}[0m
[1m[31mE         Full diff:[0m
[1m[31mE           {[0m
[1m[31mE         -  ,[0m
[1m[31mE         +  'jbep3/maps/jb_atrium.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_mall/bay_guardrail_left.mdl<\\xde\\xb7\\x04\\xe4\\x0f\\x1c\\xe0\\xa0\\x87x \\xde\\xb7\\x04 \\xde\\xb7\\x04~\\xb6\\x82x0\\xeae\\x07P\\x01|\\xdab8\\xde\\xb7\\x04\\xb0l\\x17P|\\xdabD{\\x170\\xeae\\x07P', 44, 45, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_farmhouse.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_militia/ladderwood.mdl\\x7fD\\xd8\\xf7\\x04\\xe4\\x0f^\\xe0\\xa0\\xa7Q(\\xd8\\xf7\\x04(\\xd8\\xf7\\x04~\\xb6\\xa2Q\\xb0b.\\nP\\x01|\\xda\\xa4@\\xd8\\xf7\\x04\\xb0lYP|\\xda\\xa4D{Y\\xb0b.\\nP', 40, 41, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_fof_depot.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_militia/fencewoodlog04_long.mdl\\xe4\\x0f\\xb5h\\xdcw\\xe0\\xa0\\xf9_L\\xdcw~\\xb6\\xf4_O\\x80\\nP\\x01|\\xda\\xfbd\\xdcw\\xb0l\\xb0P|\\xda\\xfbD{\\xb0O\\x80\\nP', 47, 48, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_gatorfarm.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_urban/porch_light003.mdl\\xff\\x7f\\xbc\\xde\\xf7\\x04\\xc4 \\\\\\xe0\\xa0dP\\xa0\\xde\\xf7\\x04\\xa0\\xde\\xf7\\x04~\\xb6_P\\xf0O5\\tP\\x01|\\xf9\\xa2\\xb8\\xde\\xf7\\x04PmWP|\\xf9\\xa2\\xe4{W\\xf0O5\\tP', 37, 38, 'invalid start byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_harvest.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_debris/metal_panel01a.mdl\\x7f\\x04\\xd9w\\x05\\xc4 \\xe0\\xe0\\xa0)]\\xe8\\xd8w\\x05\\xe8\\xd8w\\x05~\\xb6$]\\x80\\xcc{\\rP\\x01|\\xf9&\\x01\\xd9w\\x05Pm\\xdbP|\\xf9&\\x01\\xe4{\\xdb\\x80\\xcc{\\rP', 40, 41, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_meatworld.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_gore/lawnmower_bloodpool.mdl\\xff\\x7f\\xc4 \\x9aX\\xde7\\x05\\xe0\\xa0\\x92x<\\xde7\\x05~\\xb6\\x8dx`D\\x01\\x0cP\\x01|\\xf9\\xe0T\\xde7\\x05Pm\\x95P|\\xf9\\xe0\\xe4{\\x95`D\\x01\\x0cP', 41, 42, 'invalid start byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_miniroyale.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/cs_office/light_inset.mdl\\xff\\xff\\xff\\x7f\\xe4\\x0f\\x9b\\xc0\\xd9\\x85\\xe0\\xa0Nz\\xa4\\xd9\\x85~\\xb6Iz\\xc0\\xfa\\x10\\x08P\\x01|\\xda\\xe1\\xbc\\xd9\\x85\\xb0l\\x96P|\\xda\\xe1D{\\x96\\xc0\\xfa\\x10\\x08P', 38, 39, 'invalid start byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_no_mercy.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/effects/urban_puddle_model02a.mdl\\xfc\\xda\\xd7\\x04\\xe4\\x0f7\\xe0\\xa0\\x87x\\xe0\\xda\\xd7\\x04\\xe0\\xda\\xd7\\x04~\\xb6\\x82x0\\x96\\xa3\\nP\\x01|\\xda}\\xf8\\xda\\xd7\\x04\\xb0l2P|\\xda}D{20\\x96\\xa3\\nP', 40, 41, 'invalid start byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_poolparty.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_lab/powerbox02d.mdl\\xff\\xff\\xff\\x7f\\xb4\\xdd\\xd7\\x04\\xe4\\x0f>\\xe0\\xa0\\xedz\\x98\\xdd\\xd7\\x04\\x98\\xdd\\xd7\\x04~\\xb6\\xe8z\\xa0\\x8fz\\tP\\x01|\\xda\\x84\\xb0\\xdd\\xd7\\x04\\xb0l9P|\\xda\\x84D{9\\xa0\\x8fz\\tP', 32, 33, 'invalid start byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_portal_bts.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props/autoportal_frame/autoportal_frame.mdl\\xdeW\\xe0\\xa0\\rS\\xe4\\xddW~\\xb6\\x08S0et\\x07P\\x01|\\xda?\\x01\\xfc\\xddW\\xb0l\\xf4P|\\xda?\\x01D{\\xf40et\\x07P', 50, 51, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_ss2_ops.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/ss2/bench.mdl4\\xdcw\\x05\\x1d\\xfc\\xdf\\xff\\xff\\xff\\x7f|\\xdcw\\x05\\xc4 \\xe0\\xe0\\xa0)]`\\xdcw\\x05`\\xdcw\\x05~\\xb6$]\\xe0\\xdf\\x16\\x0fP\\x01|\\xf9&\\x01x\\xdcw\\x05Pm\\xdbP|\\xf9&\\x01\\xe4{\\xdb\\xe0\\xdf\\x16\\x0fP', 21, 22, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_tiny_terminal.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/props_street/police_barricade2.mdl\\x1c\\xdbZ\\x05\\xc4 \\xf5\\xe0\\xa0cz\\xdbZ\\x05\\xdbZ\\x05~\\xb6^z@\\x8bP\\nP\\x01|\\xf9;\\x01\\x18\\xdbZ\\x05Pm\\xf0P|\\xf9;\\x01\\xe4{\\xf0@\\x8bP\\nP', 42, 43, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'jbep3/maps/jb_two2forts.bsp': AssertionError("sprp v11\nassert 1 == 0\n +  where 1 = len({'sprp v11': UnicodeDecodeError('utf-8', b'models/gunman/cactus.mdl=\\xeb\\xab0\\x08\\xff\\xff\\xff\\x7fh\\xdcw:\\x11\\xac\\xe0\\xa0\\x9cxL\\xdcw~\\xb6\\x97x\\xc0\\xa1\\xd9\\rP\\x01|\\xda\\xf2d\\xdcw\\xb0l\\xa7P|\\xda\\xf2D{\\xa7\\xc0\\xa1\\xd9\\rP', 25, 27, 'invalid continuation byte')})"),[0m
[1m[31mE           }[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[31m[1m________________ test_load_bsp[E:/Mod-DDayNormandy-map_dirs82] ________________[0m

group_path = 'E:/Mod', game_name = 'DDayNormandy'
map_dirs = ['D-Day_ Normandy/dday/maps', 'DDaynormandymaps-mappack/dday/maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 2 out of 719 .bsps failed[0m
[1m[31mE         ('IdTechBsp', 'bsp_tool.branches.id_software.quake2', 38)[0m
[1m[31mE         ENTITIES[0m
[1m[31mE       assert {'DDaynormandymaps-mappack/dday/maps/mtownbh.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError(\'Unexpected line in entities: L19: b\\\'"nextmap" \\\\\\\'battle2bh"\\\'\')})'), 'DDaynormandymaps-mappack/dday/maps/railyardbhv2.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError("Unexpected line in entities: L1: b\'; worldspawn\'")})')} == {}[0m
[1m[31mE         Left contains 2 more items:[0m
[1m[31mE         {'DDaynormandymaps-mappack/dday/maps/mtownbh.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError(\'Unexpected line in entities: L19: b\\\'"nextmap" \\\\\\\'battle2bh"\\\'\')})'),[0m
[1m[31mE          'DDaynormandymaps-mappack/dday/maps/railyardbhv2.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError("Unexpected line in entities: L1: b\'; worldspawn\'")})')}[0m
[1m[31mE         Full diff:[0m
[1m[31mE           {[0m
[1m[31mE         -  ,[0m
[1m[31mE         +  'DDaynormandymaps-mappack/dday/maps/mtownbh.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError(\'Unexpected line in entities: L19: b\\\'"nextmap" \\\\\\\'battle2bh"\\\'\')})'),[0m
[1m[31mE         +  'DDaynormandymaps-mappack/dday/maps/railyardbhv2.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError("Unexpected line in entities: L1: b\'; worldspawn\'")})'),[0m
[1m[31mE           }[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[31m[1m_____________ test_load_bsp[E:/Mod-QuakeII/rerelease-map_dirs93] ______________[0m

group_path = 'E:/Mod', game_name = 'QuakeII/rerelease'
map_dirs = ['pak0/maps', 'pak0/maps/e3', 'pak0/maps/ec', 'pak0/maps/old', 'pak0/maps/q64', 'pak0/maps/test']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 1 out of 222 .bsps failed[0m
[1m[31mE         ('IdTechBsp', 'bsp_tool.branches.id_software.quake2', 38)[0m
[1m[31mE         ENTITIES[0m
[1m[31mE       assert {'pak0/maps/tutorial.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError(\'Unexpected line in entities: L1895: b\\\'"shadowlightradius"   "0"\\\'\')})')} == {}[0m
[1m[31mE         Left contains 1 more item:[0m
[1m[31mE         {'pak0/maps/tutorial.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError(\'Unexpected line in entities: L1895: b\\\'"shadowlightradius"   "0"\\\'\')})')}[0m
[1m[31mE         Full diff:[0m
[1m[31mE         - {}[0m
[1m[31mE         + {'pak0/maps/tutorial.bsp': AssertionError('ENTITIES\nassert 1 == 0\n +  where 1 = len({\'ENTITIES\': RuntimeError(\'Unexpected line in entities: L1895: b\\\'"shadowlightradius"   "0"\\\'\')})')}[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[31m[1m_________ test_load_bsp[E:/Mod-DarkMessiah/singleplayer-map_dirs115] __________[0m

group_path = 'E:/Mod', game_name = 'DarkMessiah/singleplayer'
map_dirs = ['maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 33 out of 35 .bsps failed[0m
[1m[31mE         ('ValveBsp', 'bsp_tool.branches.arkane.dark_messiah_sp', (20, 4))[0m
[1m[31mE         sprp v6[0m
[1m[31mE       assert {'maps/e3_l06_l09.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 54792 bytes; possible_sizeof=136.0')})"), 'maps/l00.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32616 bytes; possible_sizeof=136.0')})"), 'maps/l01_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 43128 bytes; possible_sizeof=136.0')})"), 'maps/l02_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 42696 bytes; possible_sizeof=136.0')})"), 'maps/l02_b1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 29880 bytes; possible_sizeof=136.0')})"), 'maps/l02_b2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16200 bytes; possible_sizeof=136.0')})"), 'maps/l03_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 44568 bytes; possible_sizeof=136.0')})"), 'maps/l03_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45648 bytes; possible_sizeof=136.0')})"), 'maps/l04_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32040 bytes; possible_sizeof=136.0')})"), 'maps/l05_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25704 bytes; possible_sizeof=136.0')})"), 'maps/l05_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45648 bytes; possible_sizeof=136.0')})"), 'maps/l05_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 19800 bytes; possible_sizeof=136.0')})"), 'maps/l06_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 47376 bytes; possible_sizeof=136.0')})"), 'maps/l06_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32112 bytes; possible_sizeof=136.0')})"), 'maps/l06_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 18864 bytes; possible_sizeof=136.0')})"), 'maps/l06_d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 38448 bytes; possible_sizeof=136.0')})"), 'maps/l07_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 33120 bytes; possible_sizeof=136.0')})"), 'maps/l07_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 17280 bytes; possible_sizeof=136.0')})"), 'maps/l08_a1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 39816 bytes; possible_sizeof=136.0')})"), 'maps/l08_a2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16416 bytes; possible_sizeof=136.0')})"), 'maps/l08_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 18072 bytes; possible_sizeof=136.0')})"), 'maps/l09_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 84240 bytes; possible_sizeof=136.0')})"), 'maps/l09_d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16920 bytes; possible_sizeof=136.0')})"), 'maps/l10_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 59184 bytes; possible_sizeof=136.0')})"), 'maps/l10_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 44136 bytes; possible_sizeof=136.0')})"), 'maps/l10_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 40176 bytes; possible_sizeof=136.0')})"), 'maps/l11_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 49968 bytes; possible_sizeof=136.0')})"), 'maps/l11_b1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 63648 bytes; possible_sizeof=136.0')})"), 'maps/l11_b2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 34992 bytes; possible_sizeof=136.0')})"), 'maps/l11_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 28872 bytes; possible_sizeof=136.0')})"), 'maps/l12_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32400 bytes; possible_sizeof=136.0')})"), 'maps/l12_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 48024 bytes; possible_sizeof=136.0')})"), 'maps/l12_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25632 bytes; possible_sizeof=136.0')})")} == {}[0m
[1m[31mE         Left contains 33 more items:[0m
[1m[31mE         {'maps/e3_l06_l09.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 54792 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l00.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32616 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l01_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 43128 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l02_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 42696 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l02_b1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 29880 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l02_b2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16200 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l03_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 44568 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l03_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45648 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l04_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32040 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l05_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25704 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l05_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45648 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l05_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 19800 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l06_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 47376 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l06_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32112 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l06_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 18864 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l06_d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 38448 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l07_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 33120 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l07_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 17280 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l08_a1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 39816 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l08_a2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16416 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l08_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 18072 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l09_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 84240 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l09_d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16920 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l10_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 59184 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l10_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 44136 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l10_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 40176 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l11_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 49968 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l11_b1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 63648 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l11_b2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 34992 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l11_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 28872 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l12_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32400 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l12_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 48024 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l12_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25632 bytes; possible_sizeof=136.0')})")}[0m
[1m[31mE         Full diff:[0m
[1m[31mE           {[0m
[1m[31mE         -  ,[0m
[1m[31mE         +  'maps/e3_l06_l09.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 54792 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l00.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32616 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l01_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 43128 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l02_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 42696 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l02_b1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 29880 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l02_b2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16200 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l03_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 44568 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l03_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45648 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l04_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32040 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l05_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25704 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l05_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45648 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l05_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 19800 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l06_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 47376 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l06_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32112 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l06_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 18864 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l06_d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 38448 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l07_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 33120 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l07_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 17280 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l08_a1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 39816 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l08_a2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16416 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l08_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 18072 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l09_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 84240 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l09_d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 16920 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l10_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 59184 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l10_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 44136 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l10_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 40176 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l11_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 49968 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l11_b1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 63648 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l11_b2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 34992 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l11_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 28872 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l12_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 32400 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l12_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 48024 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l12_c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25632 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE           }[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[31m[1m__________ test_load_bsp[E:/Mod-DarkMessiah/multiplayer-map_dirs116] __________[0m

group_path = 'E:/Mod', game_name = 'DarkMessiah/multiplayer'
map_dirs = ['maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 11 out of 11 .bsps failed[0m
[1m[31mE         ('ValveBsp', 'bsp_tool.branches.arkane.dark_messiah_mp', (20, 4))[0m
[1m[31mE         sprp v6[0m
[1m[31mE       assert {'maps/clsm_circus.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 2304 bytes; possible_sizeof=136.0')})"), 'maps/ctf_2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 8712 bytes; possible_sizeof=136.0')})"), 'maps/ctf_3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 9576 bytes; possible_sizeof=136.0')})"), 'maps/ctf_mp2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25920 bytes; possible_sizeof=136.0')})"), 'maps/ctf_mp3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 9864 bytes; possible_sizeof=136.0')})"), 'maps/ctf_mp4.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 17496 bytes; possible_sizeof=136.0')})"), 'maps/l_mp1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45864 bytes; possible_sizeof=136.0')})"), 'maps/l_mp2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 42192 bytes; possible_sizeof=136.0')})"), 'maps/l_mp3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 19584 bytes; possible_sizeof=136.0')})"), 'maps/l_mp4.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 60264 bytes; possible_sizeof=136.0')})"), 'maps/l_mp5.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 37440 bytes; possible_sizeof=136.0')})")} == {}[0m
[1m[31mE         Left contains 11 more items:[0m
[1m[31mE         {'maps/clsm_circus.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 2304 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/ctf_2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 8712 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/ctf_3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 9576 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/ctf_mp2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25920 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/ctf_mp3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 9864 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/ctf_mp4.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 17496 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l_mp1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45864 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l_mp2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 42192 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l_mp3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 19584 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l_mp4.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 60264 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE          'maps/l_mp5.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 37440 bytes; possible_sizeof=136.0')})")}[0m
[1m[31mE         Full diff:[0m
[1m[31mE           {[0m
[1m[31mE         -  ,[0m
[1m[31mE         +  'maps/clsm_circus.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 2304 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/ctf_2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 8712 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/ctf_3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 9576 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/ctf_mp2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 25920 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/ctf_mp3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 9864 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/ctf_mp4.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 17496 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l_mp1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 45864 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l_mp2.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 42192 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l_mp3.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 19584 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l_mp4.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 60264 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE         +  'maps/l_mp5.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('tail of 37440 bytes; possible_sizeof=136.0')})"),[0m
[1m[31mE           }[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[31m[1m_________________ test_load_bsp[E:/Mod-Vindictus-map_dirs126] _________________[0m

group_path = 'E:/Mod', game_name = 'Vindictus'
map_dirs = ['hfs/2022/maps', 'Colhen_Mod_BSP (Private Server Version)']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 301 out of 475 .bsps failed[0m
[1m[31mE         ('ValveBsp', 'bsp_tool.branches.nexon.vindictus', 20)[0m
[1m[31mE         sprp v6[0m
[1m[31mE       assert {'hfs/2022/maps/01c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01xe.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01_boss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/01_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/02c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/02d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/02i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/02j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/02k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/02_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/02_mboss_cut.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/03e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/03f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/03j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/03_mboss_alice.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/04b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/04e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/04f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/05e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/05f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/05g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/05l.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/05_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/06d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/06f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/06h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/06i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/06j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/06_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07j_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/07_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08g_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/08_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/09a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/09b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/09b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/09c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/09d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/09_boss_special.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/09_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/10_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/11a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/11c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/11c_special.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/11d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/12a_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/12b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/12b_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/12c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/12c_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13a_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13c_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13d_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13f_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13g_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13h_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13_mboss_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/13_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14a_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14b_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14c_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14d_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14e_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14f_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14_boss_return.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/14_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15b_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15c_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15d_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15f_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15g_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15i_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15j_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15j_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15k_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15k_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15m.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15n.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/15_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16a_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16b_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16c_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16d_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16d_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16e_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16f_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16f_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16g_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16g_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16h_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16h_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16i_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16j_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16j_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16k_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16k_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16l_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16l_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16m_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16m_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16n_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16n_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16o_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16p.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16_boss_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/16_boss_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/17a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/17b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/17d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_05_story.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_06.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_07.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_08.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_09.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_10.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_12.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_13.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_13_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_14.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_14_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_15.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_16.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_18.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_19.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_19_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_20k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_21.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22c_return.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22d_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_22h_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_23.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_25.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_25_ending.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_25_screenshot.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26a_1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26g_04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26l.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26l_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_26l_ending.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_27b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_29.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_31.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/3_game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/bel_teaser.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/bel_teaser_light.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/create_character.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_halloween_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_halloween_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_halloween_dream.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_newyear_2014.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_newyear_2015.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_xmas14_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_xmas_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/event_xmas_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/f01_cart_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/f01_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character_arisha.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character_hagie.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character_lynn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character_vin.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character_vin_arisha.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character_vin_hagie.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_create_character_vin_lynn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_start_neamhain_kalok.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/game_start_vin.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/h01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/h03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/h03_cut.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_event.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_fishingcraft.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_fishingcraft_halloween.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_fishingcraft_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_fishingcraft_sunset.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_fishingcraft_winter.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_berbe.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_berbe_hall.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_morvan.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_morvan_s.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_rochest.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_rochest_s.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/lobby_multiplayer_spring.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/minigame.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/minigame_wall.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/nolwenn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/p03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/p04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/p05.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/p06.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/p06_blacklight.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/p06_halloween.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/p07.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/pve_competition.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/s3_00.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/s3_game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/s3_lobby_multiplayer.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/s3_lobby_multiplayer_rochest.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/s3_lobby_multiplayer_rochest_w.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/s3_lobby_multiplayer_winter.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/sc_mini01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/sc_mini02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/sc_mini03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/start_2018_children_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/start_2018_foolsday_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/start_2018_spring_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/start_2018_summer_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/start_2020_lethor.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/Storysector_talk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/t05_school.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/teaser_lethor.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/w_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'hfs/2022/maps/w_boss02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"), 'Colhen_Mod_BSP (Private Server Version)/t01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})")} == {}[0m
[1m[31mE         Left contains 301 more items:[0m
[1m[31mE         {'Colhen_Mod_BSP (Private Server Version)/t01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01_boss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/01xe.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/02_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/02_mboss_cut.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/02c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/02d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/02i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/02j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/02k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/03_mboss_alice.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/03e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/03f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/03j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/04b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/04e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/04f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/05_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/05e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/05f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/05g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/05l.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/06_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/06d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/06f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/06h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/06i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/06j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/07j_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08g_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/08h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/09_boss_special.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/09_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/09a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/09b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/09b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/09c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/09d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/10_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/11a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/11c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/11c_special.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/11d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/12a_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/12b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/12b_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/12c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/12c_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13_mboss_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13a_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13c_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13d_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13f_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13g_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/13h_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14_boss_return.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14a_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14b_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14c_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14d_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14e_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14f_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/14g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15b_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15c_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15d_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15f_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15g_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15i_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15j_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15j_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15k_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15k_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15m.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/15n.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16_boss_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16_boss_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16a_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16b_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16c_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16d_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16d_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16e_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16f_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16f_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16g_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16g_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16h_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16h_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16i_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16j_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16j_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16k_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16k_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16l_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16l_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16m_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16m_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16n_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16n_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16o_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/16p.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/17a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/17b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/17d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_05_story.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_06.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_07.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_08.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_09.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_10.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_12.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_13.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_13_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_14.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_14_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_15.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_16.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_18.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_19.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_19_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_20k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_21.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22c_return.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22d_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_22h_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_23.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_25.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_25_ending.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_25_screenshot.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26a_1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26g_04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26l.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26l_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_26l_ending.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_27b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_29.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_31.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/3_game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/Storysector_talk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/bel_teaser.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/bel_teaser_light.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/create_character.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_halloween_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_halloween_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_halloween_dream.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_newyear_2014.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_newyear_2015.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_xmas14_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_xmas_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/event_xmas_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/f01_cart_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/f01_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character_arisha.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character_hagie.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character_lynn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character_vin.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character_vin_arisha.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character_vin_hagie.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_create_character_vin_lynn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_start_neamhain_kalok.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/game_start_vin.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/h01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/h03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/h03_cut.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_event.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_fishingcraft.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_fishingcraft_halloween.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_fishingcraft_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_fishingcraft_sunset.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_fishingcraft_winter.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_berbe.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_berbe_hall.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_morvan.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_morvan_s.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_rochest.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_rochest_s.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/lobby_multiplayer_spring.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/minigame.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/minigame_wall.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/nolwenn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/p03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/p04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/p05.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/p06.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/p06_blacklight.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/p06_halloween.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/p07.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/pve_competition.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/s3_00.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/s3_game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/s3_lobby_multiplayer.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/s3_lobby_multiplayer_rochest.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/s3_lobby_multiplayer_rochest_w.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/s3_lobby_multiplayer_winter.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/sc_mini01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/sc_mini02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/sc_mini03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/start_2018_children_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/start_2018_foolsday_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/start_2018_spring_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/start_2018_summer_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/start_2020_lethor.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/t05_school.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/teaser_lethor.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/w_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE          'hfs/2022/maps/w_boss02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})")}[0m
[1m[31mE         Full diff:[0m
[1m[31mE           {[0m
[1m[31mE         -  ,[0m
[1m[31mE         +  'Colhen_Mod_BSP (Private Server Version)/t01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01_boss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/01xe.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/02_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/02_mboss_cut.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/02c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/02d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/02i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/02j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/02k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/03_mboss_alice.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/03e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/03f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/03j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/04b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/04e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/04f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/05_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/05e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/05f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/05g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/05l.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/06_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/06d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/06f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/06h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/06i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/06j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/07j_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08g_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/08h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/09_boss_special.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/09_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/09a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/09b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/09b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/09c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/09d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/10_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/11a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/11c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/11c_special.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/11d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/12a_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/12b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/12b_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/12c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/12c_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13_mboss_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13a_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13c_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13d_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13f_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13g_farming.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/13h_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14_boss_return.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14_mboss_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14a_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14b_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14c_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14d_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14e_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14f_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/14g_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15b_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15b_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15c_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15d_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15d_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15f_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15g_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15i_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15j_new_dusk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15j_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15k_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15k_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15m.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/15n.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16_boss_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16_boss_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16a_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16a_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16b_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16c_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16c_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16d_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16d_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16e_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16e_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16f_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16f_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16f_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16g_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16g_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16h_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16h_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16i_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16i_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16j_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16j_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16k_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16k_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16l_new_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16l_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16m_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16m_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16n_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16n_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16o_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/16p.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/17a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/17b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/17d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_05_story.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_06.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_07.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_08.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_09.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_10.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_12.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_13.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_13_new.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_14.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_14_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_15.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_16.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_18.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_19.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_19_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20g.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_20k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_21.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22c_return.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22d_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_22h_mboss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_23.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_25.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_25_ending.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_25_screenshot.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26a_1.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26c.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26d.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26e.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26f.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26g_04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26h.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26i.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26j.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26k.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26l.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26l_ds.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_26l_ending.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_27b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_29.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_31.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/3_game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/Storysector_talk.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/bel_teaser.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/bel_teaser_light.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/create_character.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_halloween_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_halloween_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_halloween_dream.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_newyear_2014.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_newyear_2015.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_xmas14_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_xmas_a.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/event_xmas_b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/f01_cart_ex.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/f01_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character_arisha.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character_hagie.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character_lynn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character_vin.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character_vin_arisha.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character_vin_hagie.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_create_character_vin_lynn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_start_neamhain_kalok.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/game_start_vin.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/h01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/h03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/h03_cut.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_event.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_fishingcraft.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_fishingcraft_halloween.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_fishingcraft_night.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_fishingcraft_sunset.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_fishingcraft_winter.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_berbe.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_berbe_hall.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_guild.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_morvan.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_morvan_s.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_rochest.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_rochest_s.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/lobby_multiplayer_spring.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/minigame.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/minigame_wall.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/nolwenn.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/p03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/p04.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/p05.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/p06.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/p06_blacklight.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/p06_halloween.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/p07.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/pve_competition.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/s3_00.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/s3_game_start.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/s3_lobby_multiplayer.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/s3_lobby_multiplayer_rochest.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/s3_lobby_multiplayer_rochest_w.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/s3_lobby_multiplayer_winter.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/sc_mini01.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/sc_mini02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/sc_mini03.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/start_2018_children_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/start_2018_foolsday_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/start_2018_spring_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/start_2018_summer_089b.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/start_2020_lethor.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/t05_school.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/teaser_lethor.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/w_boss.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE         +  'hfs/2022/maps/w_boss02.bsp': AssertionError("sprp v6\nassert 1 == 0\n +  where 1 = len({'sprp v6': RuntimeError('Early end of lump! possible_sizeof=60.0 (is 64)')})"),[0m
[1m[31mE           }[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[31m[1m______________ test_load_bsp[E:/Mod/X360-Left4Dead-map_dirs165] _______________[0m

group_path = 'E:/Mod/X360', game_name = 'Left4Dead'
map_dirs = ['left4dead/maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 43 out of 44 .bsps failed[0m
[1m[31mE         ('ValveBsp', 'bsp_tool.branches.valve.orange_box_x360', 20)[0m
[1m[31mE         sprp v7[0m
[1m[31mE       assert {'left4dead/maps/backgroundstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/background_lighthouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_airport01_greenhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_airport02_offices.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_airport03_garage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_airport04_terminal.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_airport05_runway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_farm01_hilltop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_farm02_traintunnel.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_farm03_bridge.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_farm04_barn.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_farm05_cornfield.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_hospital01_apartment.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_hospital02_subway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_hospital03_sewers.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_hospital04_interior.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_hospital05_rooftop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_smalltown01_caves.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_smalltown02_drainage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_smalltown03_ranchhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_smalltown04_mainstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_smalltown05_houseboat.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_airport01_greenhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_airport02_offices.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_airport03_garage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_airport04_terminal.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_airport05_runway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_farm01_hilltop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_farm02_traintunnel.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_farm03_bridge.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_farm04_barn.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_farm05_cornfield.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_hospital01_apartment.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_hospital02_subway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_hospital03_sewers.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_hospital04_interior.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_hospital05_rooftop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_smalltown01_caves.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_smalltown02_drainage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_smalltown03_ranchhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_smalltown04_mainstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/l4d_vs_smalltown05_houseboat.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"), 'left4dead/maps/lighthouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})")} == {}[0m
[1m[31mE         Left contains 43 more items:[0m
[1m[31mE         {'left4dead/maps/background_lighthouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/backgroundstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_airport01_greenhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_airport02_offices.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_airport03_garage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_airport04_terminal.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_airport05_runway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_farm01_hilltop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_farm02_traintunnel.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_farm03_bridge.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_farm04_barn.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_farm05_cornfield.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_hospital01_apartment.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_hospital02_subway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_hospital03_sewers.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_hospital04_interior.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_hospital05_rooftop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_smalltown01_caves.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_smalltown02_drainage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_smalltown03_ranchhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_smalltown04_mainstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_smalltown05_houseboat.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_airport01_greenhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_airport02_offices.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_airport03_garage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_airport04_terminal.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_airport05_runway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_farm01_hilltop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_farm02_traintunnel.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_farm03_bridge.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_farm04_barn.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_farm05_cornfield.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_hospital01_apartment.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_hospital02_subway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_hospital03_sewers.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_hospital04_interior.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_hospital05_rooftop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_smalltown01_caves.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_smalltown02_drainage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_smalltown03_ranchhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_smalltown04_mainstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/l4d_vs_smalltown05_houseboat.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE          'left4dead/maps/lighthouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})")}[0m
[1m[31mE         Full diff:[0m
[1m[31mE           {[0m
[1m[31mE         -  ,[0m
[1m[31mE         +  'left4dead/maps/background_lighthouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/backgroundstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_airport01_greenhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_airport02_offices.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_airport03_garage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_airport04_terminal.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_airport05_runway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_farm01_hilltop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_farm02_traintunnel.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_farm03_bridge.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_farm04_barn.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_farm05_cornfield.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_hospital01_apartment.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_hospital02_subway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_hospital03_sewers.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_hospital04_interior.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_hospital05_rooftop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_smalltown01_caves.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_smalltown02_drainage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_smalltown03_ranchhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_smalltown04_mainstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_smalltown05_houseboat.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_airport01_greenhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_airport02_offices.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_airport03_garage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_airport04_terminal.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_airport05_runway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_farm01_hilltop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_farm02_traintunnel.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_farm03_bridge.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_farm04_barn.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_farm05_cornfield.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_hospital01_apartment.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_hospital02_subway.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_hospital03_sewers.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_hospital04_interior.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_hospital05_rooftop.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_smalltown01_caves.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_smalltown02_drainage.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_smalltown03_ranchhouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_smalltown04_mainstreet.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/l4d_vs_smalltown05_houseboat.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE         +  'left4dead/maps/lighthouse.360.bsp': AssertionError("sprp v7\nassert 1 == 0\n +  where 1 = len({'sprp v7': RuntimeError('Early end of lump! possible_sizeof=68.0 (is 71)')})"),[0m
[1m[31mE           }[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[31m[1m_______________ test_load_bsp[E:/Mod/X360-Portal2-map_dirs168] ________________[0m

group_path = 'E:/Mod/X360', game_name = 'Portal2', map_dirs = ['portal2/maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        # TODO: clean up all the edge case conditions elsewhere
        branch_script = game_scripts.get(game_name)  # forcing branch to test each branch_script
        # TODO: move branch_script tests to another test and test auto-detect here instead
        # -- e.g. test_list = [(BspClass, branch_script, ["mapdir", ...]), ...]
        errors = dict()
        # ^ {"map_dir/map_name.bsp": ["Error"]}
        types = set()  # printed on failure to aid in debugging
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                maps = [m for m in maps if "." in m]  # DDayNormandy bomba2bsp edge case
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        elif game_name == "DDayNormandy" and m in dday_mappack_excludes:
                            continue  # maps probably tweaked in a text editor, all null bytes are spaces
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        bsp_id = (bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version)  # debug info
                        loading_errors = dict()
                        for lump_name, error in bsp.loading_errors.items():
                            lump_version = getattr(bsp.headers[lump_name], "version", None)
                            if lump_version is not None:
                                loading_errors[f"{lump_name} v{lump_version}"] = error
                            else:
                                loading_errors[lump_name] = error
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                loading_errors.update({f"{k} v{bsp.GAME_LUMP.headers[k].version}": v
                                                       for k, v in bsp.GAME_LUMP.loading_errors.items()})
                        if hasattr(bsp, "external"):
                            # TODO: actually read external SpecialLumpClasses lumps for a thorough check
                            # TODO: close any external lump files this opens to avoid OSError
                            # NOTE: if collecting external lumps for a BspClass w/o versions this will break
                            loading_errors.update({f"external.{k} v{bsp.external.headers[k].version}": v
                                                   for k, v in bsp.external.loading_errors.items()})
                            if hasattr(bsp.external, "GAME_LUMP"):
                                if not isinstance(bsp.external.GAME_LUMP, lumps.RawBspLump):  # skip unmapped game lumps
                                    loading_errors.update({f"external.GAME_LUMP.{k} v{bsp.external.GAME_LUMP.headers[k].version}": v  # noqa E501
                                                           for k, v in bsp.external.GAME_LUMP.loading_errors.items()})
                        del bsp  # close all open files before pytest freezes locals() on assert
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())  # pass loading_errors out
                    except NotImplementedError as nie:
                        # "DarkPlaces/maps/b_*.bsp" files are Quake .mdl with the .bsp extension
                        # https://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF
                        # Quake stores pickup models as .bsp and renders them in a nested fashion
                        # so this is probably fine in Quake, but they still aren't .bsp files
                        if not (game_name == "DarkPlaces" and nie.args == ("Unknown file_magic: b'IDPO'",)):
                            errors[f"{map_dir}/{m}"] = nie
                    except AssertionError as ae:  # should catch the `assert len(loading_errors) == ...` above
                        errors[f"{map_dir}/{m}"] = ae
                        types.add(bsp_id)
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed",
                                            *map(str, types),  # BspClass, branch_script, bsp_version
                                            *{ln for ae in errors.values() for ln in ae.args[0].split("\n")[0].split(", ")}])
[1m[31mE       AssertionError: 105 out of 105 .bsps failed[0m
[1m[31mE         ('ValveBsp', 'bsp_tool.branches.valve.sdk_2013_x360', 21)[0m
[1m[31mE         sprp v9[0m
[1m[31mE       assert {'portal2/maps/mp_coop_catapult_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xdb\\xd05\\x92\\x01wx\\x04\\xba\\x1c\\x13\\xb3\\x13\\x05f\\xd8DV\\x01\\x81\\x05\\xab0.i\\x01x\\x08\\x01\\x01\\x02\\x02\\x90\\x0c\\x02\\x04\\x106\\xdf\\x01\\x01\\x9a ', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_catapult_2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03xl(\\xe8\\xff\\xa8\\x03i\\xb0\\x0b\\x047y\\x03\\xed\\xf0\'L\\xcf@\\x04\\x15<(\\xb0\\x01&0\\x01\\x01\\x01H\\xb8\\x0c\\x02\\x04\\x10!Y\\x01\\xdc", 4, 5, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_catapult_wall_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03b\\x98,\\xa9\\xeb\\x98\\x03O\\xe4\\x0f\\x91Q\\xc7\\x03\\xe5L$E\\xae\\xe0\\x04\\t\\x94) \\x01#\\xa8\\x01\\x01\\x01A|\\x0c\\x02\\x04\\x10\\x1fE\\x01\\xb9`', 2, 3, 'invalid start byte')})"), 'portal2/maps/mp_coop_come_along.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02\\xab,"a\\xc1\\\\\\x02\\x9f\\xec\\x08G)\\xbb\\x03\\x17l\\x1f!\\xa4\\x036\\x90\\x1b\\\\\\xb7\\xa8\\x01\\x01\\x01\\n\\x84\\x0c\\x02\\x04\\x10\\x1aZ\\x01\\xae\\xa0\', 1, 2, \'invalid start byte\')})'), 'portal2/maps/mp_coop_credits.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'E\\xec\\x04D%DD\\x18\\xf0\\x03@M\\x98\\x06\\xbd)@TX\\x02^\\x11p\\x01\\x01\\x1bD\\x0c\\x02\\x04\\x10\\x05\\x96\\x01. ', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_doors.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x1e\\xa0!\\x1d\\xac\\xb0\\x02\\x17\\xa8\\x04P\\x13\\x01\\x02\\x89@\\x14\\xb7b\\xa0\\x02\\x9d\\xf8\\x17\\xe1\\x98p\\x01\\x01\\x8d\\xe8\\x0c\\x02\\x04\\x10\\x12\\x87\\x01j ', 2, 3, 'invalid start byte')})"), 'portal2/maps/mp_coop_fan.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x98@?t\\x016\\xe0\\x03\\x89\\x14\\x0b\\xa8`S\\x04,\\xac!\\xa0\\x9b\\xa0\\x04NL\\x1c\\x13\\xdc\\xc8\\x01\\x01\\x01]\\x18\\x0c\\x02\\x04\\x10 R\\x01\\xa4', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_fling_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02H@\\x1eQ\\x9a\\xbc\\x02Ad\\x04\\xff\\x17\\x05\\x02\\xa9t\\x14Y\\xc0\\x02\\xbdt\\x19\\xdf\\xab\\xd8\\x01\\x01\\xc4H\\x0c\\x02\\x04\\x10\\x12\\x1c\\x01^\\xc0', 5, 6, 'invalid start byte')})"), 'portal2/maps/mp_coop_fling_3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03T\\xe4&\\xa9\\xeb\\x80\\x03GD\\n\\x808D\\x03\\xc0x"\\xbd\\xba\\xa0\\x03\\xe38 \\x05\\xe4\\xf0\\x01\\x01\\x01a\\x90\\x0c\\x02\\x04\\x10\\x1d\\x08\\x01\\xc6\\xc0\', 2, 3, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_fling_crushers.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02\\xd7\\xf0"\\xfc\\xd9\\x08\\x02\\xcaT\\t\\xe35\\xa2\\x03=@#6\\xb3\\x03`x\\x1b\\xf1\\xc3\\xc0\\x01\\x01\\xe7\\xe0\\x0c\\x02\\x04\\x10\\x1e\\x1a\\x01\\xc0\', 1, 2, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_infinifling_train.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x027d\\x1e\\x1c\\xa3h\\x02,\\x90\\x08B$3\\x02\\x95|\\x19Ov\\x02\\xae\\xcc\\x19\\xee\\xa9\\xe0\\x01\\x01\\xb5@\\x0c\\x02\\x04\\x10\\x16\\x8c\\x01}`', 5, 6, 'invalid start byte')})"), 'portal2/maps/mp_coop_laser_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x06\\x0c$\\xe4\\xf6\\x18\\x02\\xf1\\xfc\\x10cZ\\t\\x03i\\x1c)[\\xe1@\\x03\\x92x\\x1c\\xdd\\xd5x\\x01\\x01\\x01\\x1f\\xd0\\x0c\\x02\\x04\\x10!\\xf5\\x01\\xf0`', 4, 5, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_laser_crusher.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03\\x1e&\\x87\\xeax\\x03\\x0c(\\x0e\\xc6Jr\\x03\\x86|"\\xb0\\xaf\\xc0\\x03\\xa9,\\x1c(\\xd0 \\x01\\x01\\x017\\xc8\\x0c\\x02\\x04\\x10\\x1d\\xee\\x01\\xb9\\x80\', 3, 4, \'invalid start byte\')})'), 'portal2/maps/mp_coop_lobby_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08b`p\\xcc\\x03%,\\x08\\x178Cx\\x02\\xf5\\x92\\t\\x9f`U\\xd9\\x01\\xed\\xc0\\t\\xf5<G\\x07\\x02\\x8d\\x10\\x01\\x01\\x03\\xd2$\\x0c\\x02\\x04\\x10I+\\x01\\x02\\x11@', 4, 5, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_multifling_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05X\\xc4A\\x82\\x01\\x97\\xa0\\x054\\xb4\\x1fR\\xd1t\\x06\\x0ed>\\xac\\x01R\\xe0\\x06M\\x103s\\x01\\x908\\x01\\x01\\x02F\\xc0\\x0c\\x02\\x04\\x103\\xbd\\x01\\x01e\\xc0', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_paint_bridge.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x04\\x07(-|\\xfb\\xdc\\x03\\xd7d-\\x1c\\x01#k\\x04x\\xac,"\\xc7`\\x04\\xa4\\xd0 \\xfd\\x013\\xf8\\x01\\x01\\x01\\xf1@\\x0c\\x02\\x04\\x10\\\'\\x16\\x01\\xcf\', 5, 6, \'invalid start byte\')})'), 'portal2/maps/mp_coop_paint_come_along.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xf0\\xe4!\\x9b\\xa6h\\x02\\xd10\\x1dt\\x93\\xa7\\x03[\\x94\\x1f\\x1e\\x8c\\xa0\\x03z\\xb4\\x1a\\x1f\\xcc\\xc0\\x01\\x01\\x01h\\x98\\x0c\\x02\\x04\\x10\\x1b\\xb2\\x01\\x92\\xe0', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_paint_longjump_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x86\\x8c>\\xe4\\x01~D\\x06\\x0b\\xd8v\\x97\\x03^0\\x06\\xfd\\xe8NL\\x01_\\xe0\\x07L41\\xb6\\x01\\xd7`\\x01\\x01\\x03\\x17\\xa8\\x0c\\x02\\x04\\x10F\\x92\\x01\\x01k', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_paint_redirect.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03i\\x80-\\xe0\\xde\\xfc\\x03M\\xe0\\x18\\x9a\\x9by\\x03\\xf2l&\\x12\\xb0\\xe0\\x04\\x18\\x80!\\xf3\\x01!\\xf8\\x01\\x01\\x01\\x928\\x0c\\x02\\x04\\x10!\\xe0\\x01\\xb9', 2, 3, 'invalid start byte')})"), 'portal2/maps/mp_coop_paint_red_racer.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03T|(\\xe2\\xcc$\\x03<\\xe8\\x14\\xc4\\xa0q\\x03\\xd2L"\\x1c\\x96`\\x03\\xf4h \\xf6\\x01\\x0cP\\x01\\x01\\x01\\xb3\\xd8\\x0c\\x02\\x04\\x10\\x1f\\x1d\\x01\\x9d`\', 4, 5, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_paint_speed_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xda\\x08%*\\xb9\\xf4\\x02\\xc3D\\x14)~\\xf7\\x03L, \\x0e\\x98@\\x03l<\\x1e\\x0f\\xfb\\xb8\\x01\\x01\\x01]\\xd8\\x0c\\x02\\x04\\x10\\x1c/\\x01\\xa0\\x80', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_paint_speed_fling.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x9381\\x15\\x01\\x15 \\x04TH<+\\x01\\x9e\\xae\\x05\\x0c\\x8038\\xed`\\x05?\\xb8#\\xcf\\x01F\\x88\\x01\\x01\\x02L\\xbc\\x0c\\x02\\x04\\x10-\\x05\\x01\\xf6\\xc0', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_paint_walljumps.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xb1,,z\\xe9\\xc4\\x03\\x91 \\x1dC\\xbaM\\x045\\xa0$\\x91\\xa6 \\x04Z4%\\xfb\\x01>`\\x01\\x01\\x01\\xaf0\\x0c\\x02\\x04\\x10 \\x86\\x01\\xae ', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_race_2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03Ml\'\\xd9\\x01\\x08\\x038P\\x11\\xc8q\\xa0\\x03\\xb3\\x14+\\xbd\\xed \\x03\\xde\\xd4\\x1fW\\xf3\\x90\\x01\\x01\\x015t\\x0c\\x02\\x04\\x10#\\xea\\x01\\xfa\\xa0", 4, 5, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_rat_maze.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x11\\xa0\\x1e\\xba\\xact\\x02\\x08\\x98\\x06\\xe2 \\x8a\\x02e\\x90\\x16\\xe3l\\x80\\x02|t\\x17\\xe9\\xb0X\\x01\\x01\\x9fh\\x0c\\x02\\x04\\x10\\x14o\\x01r\\x80', 2, 3, 'invalid start byte')})"), 'portal2/maps/mp_coop_start.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08m\\xe4^6\\x03l\\x08\\x17\\x0cM\\xe6\\x026\\xa0\\tH\\x10w\\xdd\\x02\\xd2\\xe0\\t\\xbf\\xf0Fj\\x02\\xa2\\xb8\\x01\\x01\\x03ih\\x0c\\x02\\x04\\x10]A\\x01\\x03\\x06', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_tbeam_catch_grind_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03a\\x08*\\x95\\x01\\xb0\\x03C\\xdc\\x19\\xad\\x8d}\\x03\\xd1\\xc4)\\x13\\xcb@\\x03\\xfa\\xd8\\x1d\\xa4\\xcf\\xd8\\x01\\x01\\x01u4\\x0c\\x02\\x04\\x10#\\xac\\x01\\xd7\\xc0', 4, 5, 'invalid start byte')})"), 'portal2/maps/mp_coop_tbeam_drill.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03o<.7\\x015\\xf0\\x03U\\xa4\\x16\\xb0\\x8au\\x03\\xe5\\x84\'\\xdf\\xdd@\\x04\\rd\\x1e\\xba\\xe7x\\x01\\x01\\x01z\\\\\\x0c\\x02\\x04\\x10!R\\x01\\xe8\\xa0", 7, 8, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_tbeam_end.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xd1\\x180T\\x01mX\\x04\\xb1h\\x1b\\x8c\\xac4\\x05!\\xc08e\\x01&\\xc0\\x05Z(\\x1d\\x17\\x01\\x0b\\xc0\\x01\\x01\\x02P\\xf4\\x0c\\x02\\x04\\x10.\\x96\\x01\\x017\\xe0', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_tbeam_laser_1.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03E\\xc8,?\\x01\\n\\x10\\x03+\\x10\\x17\\xc9\\x90\\xb9\\x03\\xb6\\xc4\\\'\\x93\\xbe\\x03\\xdeX#\\x14\\x01\\x01\\x10\\x01\\x01\\x01>\\xc8\\x0c\\x02\\x04\\x10"\\xf5\\x01\\xc7@\', 2, 3, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_tbeam_maze.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03\\x99\\xb4/\\xab\\x01\\x0b\\xa8\\x03l\\x04)x\\xfat\\x04\\x15\\xb4,\\xe6\\xcd@\\x04B\\x9c%\\x9e\\x013 \\x01\\x01\\x01}8\\x0c\\x02\\x04\\x10\'\\xc5\\x01\\xd8\\xa0", 1, 2, \'invalid start byte\')})'), 'portal2/maps/mp_coop_tbeam_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xa3l$k\\xdb\\xf0\\x02\\x96$\\nd1_\\x03\\x0f\\xb0!\\x8e\\xb0 \\x031@\\x1b[\\xc4\\x08\\x01\\x01\\xdc\\xa4\\x0c\\x02\\x04\\x10\\x1bv\\x01\\xba`', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_tbeam_polarity2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x96|%\\x10\\xccH\\x02\\x8a\\xac\\t\\\\-F\\x03\\x03|\\x1a\\x89x`\\x03\\x1e\\x08\\x1a\\x83\\xaf\\xc8\\x01\\x01\\xdd$\\x0c\\x02\\x04\\x10\\x17\\x86\\x01\\x7f', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_tbeam_polarity3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x038\\xc4$=\\xdc\\\\\\x03$\\xb0\\x10\\xc8]"\\x03\\xaa8&\\xb5\\xc5`\\x03\\xd0\\xf0\\x1d\\r\\xcd\\x98\\x01\\x01\\x01^\\xd8\\x0c\\x02\\x04\\x10 \\xec\\x01\\xd0\\xe0\', 2, 3, \'invalid continuation byte\')})'), 'portal2/maps/mp_coop_tbeam_redirect.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xab$0\\xa9\\x01A\\xfc\\x05P@X\\x0e\\x02HS\\x06\\x1c\\x806\\xf0\\x01 \\x06Sp\\x1f\\xa1\\xf6`\\x01\\x01\\x035,\\x0c\\x02\\x04\\x101V\\x01\\x01+ ', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_teambts.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\xf1\\xac\\x0b\\xf8B<\\xeb\\xe0\\x03\\xaa\\x10\\xfb\\x01\\r\\xbc\\x0f=@`\\x01\\x1c\\xfc\\x0bDT\\xa8\\x01\\x01`\\xac\\x0c\\x02\\x04\\x10\\r\\xc5\\x01E@', 0, 2, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_turret_ball.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04U\\xb84\\xff\\x01D\\x9c\\x047d\\x1aW\\x9eq\\x04\\xd9P0V\\x01\\x03\\xa0\\x05\\t\\xa8-s\\x01K\\xe0\\x01\\x01\\x01\\xee\\xf4\\x0c\\x02\\x04\\x10)\\xa1\\x01\\x01\\x12\\xc0', 2, 3, 'invalid start byte')})"), 'portal2/maps/mp_coop_turret_walls.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03~ /\\x06\\x01?\\xc8\\x03k\\x08\\x0fbQ)\\x03\\xf5\\xb0.\\xae\\x01\\x0f \\x04$`(\\xe4\\x01BP\\x01\\x01\\x01/|\\x0c\\x02\\x04\\x10$\\xab\\x01\\x01  ', 7, 8, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_wall_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x01\\xc5\\xf0\\x1e\\xea\\x8e\\xd4\\x01\\xc0T\\x03\\xbf\\x0e\\xaa\\x02(\\x84\\x0f\\x81A`\\x028\\x08\\x1d\\x97\\xc0\\xa8\\x01\\x01w\\x14\\x0c\\x02\\x04\\x10\\x0ec\\x01E\\xe0', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/mp_coop_wall_5.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xa2,(U\\xf9<\\x02\\x90\\x18\\r\\xfcc\\x83\\x02\\xe5\\x80%i\\xb4`\\x03\\n\\xec\\x19\\xbb\\xf0\\xc0\\x01\\x01\\xee\\x9c\\x0c\\x02\\x04\\x10 \\xa2\\x01\\xc2 ', 1, 2, 'invalid start byte')})"), 'portal2/maps/mp_coop_wall_block.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xc4\\xac6\\x86\\x01\\xae\\xb0\\x03\\xabx\\x14\\xf7m\\xd4\\x04HP;\\x1d\\x01\\x96\\x04\\x83p++\\x01G`\\x01\\x01\\x01\\x0f\\xf0\\x0c\\x02\\x04\\x10-\\x19\\x01\\x01\\xae\\xa0', 4, 5, 'invalid start byte')})"), 'portal2/maps/mp_coop_wall_intro.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03\\xb8h2h\\x01"p\\x03\\xa5\\x08\\x0f\\xd1J\\xfa\\x048T+\\x15\\xde`\\x04cl+*\\x01V\\xd8\\x01\\x01\\x01Q\\x98\\x0c\\x02\\x04\\x10#q\\x01\\xeb\\x80\', 1, 2, \'invalid start byte\')})'), 'portal2/maps/sp_a1_intro1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xc9 p\\xb0\\x02,\\xd4\\x05\\xb1(\\x13\\xdd\\x9d\\x90\\x06\\xeb\\xd84\\xca\\xef@\\x07 \\xa4Z\\xb0\\x01\\xfe0\\x01\\x01\\x02\\x18\\xf4\\x0c\\x02\\x04\\x100c\\x01\\xf9@', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a1_intro2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03O84\\xca\\xc3\\xcc\\x03FX\\x06\\xb1%\\xb1\\x04\\x0f\\x08\\x18\\x13i \\x04\'\\x1c,p\\xe7\\xc0\\x01\\x01\\x01\\x12\\x0c\\x0c\\x02\\x04\\x10\\x16\\xea\\x01o", 4, 5, \'invalid continuation byte\')})'), 'portal2/maps/sp_a1_intro3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x05\\xf7\\xd4W\\x14\\x01f8\\x05\\xd5\\xb4\\x1d\\xe5\\xde\\x7f\\x07\'X86\\xff\\xc0\\x07_\\x90?\\xef\\x01\\x8d\\xb0\\x01\\x01\\x01\\xff\\x94\\x0c\\x02\\x04\\x104&\\x01\\x01\\x0b", 1, 2, \'invalid start byte\')})'), 'portal2/maps/sp_a1_intro4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05e\\xa4jr\\x01t$\\x05?\\xe4!\\\\\\x01\\x0f\\xeb\\x06\\x95<6n\\xf1\\xa0\\x06\\xcb\\xac5&\\x01B\\x08\\x01\\x01\\x01\\x9a\\xa8\\x0c\\x02\\x04\\x102\\xcd\\x01\\xfe', 2, 3, 'invalid start byte')})"), 'portal2/maps/sp_a1_intro5.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03\\xcc\\xfc5t\\xdf\\x98\\x03\\xb5|\\x14\\xb2\\x94\'\\x04\\x87\\xa4$d\\xa6 \\x04\\xac\\x08.b\\x01\\x01X\\x01\\x01\\x01\\x84\\x14\\x0c\\x02\\x04\\x10!\\x89\\x01\\xae\\xe0", 1, 2, \'invalid continuation byte\')})'), 'portal2/maps/sp_a1_intro6.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x0e\\x14B;\\x01A\\xe4\\x04\\xf6x\\x14\\x0c|^\\x05\\xfd\\x18/,\\xee@\\x06,D.0\\x01\\x1b\\xc8\\x01\\x01\\x01\\xd9\\x8c\\x0c\\x02\\x04\\x10(\\x93\\x01\\xfb\\x80', 7, 8, 'invalid continuation byte')})"), 'portal2/maps/sp_a1_intro7.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04w\\xd4K\\xa8\\x01/\\xf0\\x04S\\x94 9\\xf6s\\x05`\\x90/;\\xd6\\xe0\\x05\\x8f\\xcc7F\\x014\\xd0\\x01\\x01\\x01\\x95L\\x0c\\x02\\x04\\x10+\\xdd\\x01\\xe1\\xc0', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a1_wakeup.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xfb4I\\x88\\x01 `\\x03\\xe1\\xbc\\x14\\xff\\x9f*\\x04\\xbch*^\\xbe \\x04\\xe6\\xc84\\xb7\\x013 \\x01\\x01\\x01#\\xc4\\x0c\\x02\\x04\\x10+\\xa9\\x01\\xc7\\xc0', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_bridge_intro.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04r\\xcc:\\xb3\\x01\\x1b\\xc8\\x04Yp\\x15\\xc3\\x94\\xcd\\x05,\\xfc-\\xee\\xec\\x05Z\\xec.\\xb4\\x011\\xb8\\x01\\x01\\x01\\xb7\\\\\\x0c\\x02\\x04\\x10\'E\\x01\\xf9`", 2, 3, \'invalid continuation byte\')})'), 'portal2/maps/sp_a2_bridge_the_gap.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xa3d9F\\x01-\\x8c\\x04\\x8e\\x04\\x10\\xa5S\\x17\\x05PX/\\xd9\\xed\\xe0\\x05\\x804/]\\x01I\\xa0\\x01\\x01\\x01\\xce\\x88\\x0c\\x02\\x04\\x10(\\xc7\\x01\\xfd\\xa0', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_bts1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x058\\xe0B\\xc3\\x01\\xd0\\xb8\\x05\\x02l/\\xcb\\x01\\r\\xc5\\x05\\xe6\\xfcT\\xaa\\x01\\xd2@\\x06;\\xa8\\x1f\\xf1\\x01\\x07\\x88\\x01\\x01\\x02+|\\x0c\\x02\\x04\\x10D\\xee\\x01\\x01\\xf3 ', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_bts2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02e\\xc4\\x1c#\\xee\\xd4\\x02M\\x1c\\x13\\x07\\x7f@\\x02\\x91\\xac8w\\x01;\\xa0\\x02\\xca$\\x10W\\x98p\\x01\\x01\\x01/\\x1c\\x0c\\x02\\x04\\x100\\xaa\\x01\\x01V\\xc0', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_bts3.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xe7\\x981W\\x01E \\x03\\xcb\\xc8\\x15\\x9c\\xa9\\x87\\x049\\xa4B\\xbb\\x014\\xa0\\x04|`\\x1c\\x8b\\x01&\\xc0\\x01\\x01\\x01\\x8c\\xec\\x0c\\x02\\x04\\x10:\\x1a\\x01\\x01F`', 1, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_bts4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x1f\\x800s\\x0138\\x03\\xfb\\xe0\\x1cv\\xb8\\\\\\x04\\x90\\x84?\\xaf\\x01\\x1b`\\x04\\xd04\\x1f\\xd3\\x01,\\xa8\\x01\\x01\\x01\\xc9\\x88\\x0c\\x02\\x04\\x109\\xf6\\x01\\x01/ ', 2, 3, 'invalid start byte')})"), 'portal2/maps/sp_a2_bts5.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02` \\x1dk\\xa2\\x84\\x02Jp\\x12\\x0cr\\x89\\x02\\x98\\xf4#\\x14\\x9b\\x80\\x02\\xbc\\x08\\x11\\x0e}\\xb8\\x01\\x01\\x01\\x1c\\xac\\x0c\\x02\\x04\\x10 \\x19\\x01\\xa5@', 5, 6, 'invalid start byte')})"), 'portal2/maps/sp_a2_bts6.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03Yh)\\x95\\x01$\\x80\\x037\\x9c!#\\xbb\\xf4\\x03\\x8bX \\x18\\x84 \\x03\\xabp\\r\\x8a\\x92@\\x01\\x01\\x01\\xd5\\\\\\x0c\\x02\\x04\\x10\\x1e\\x07\\x01\\x85@', 4, 5, 'invalid start byte')})"), 'portal2/maps/sp_a2_catapult_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xfd\\x90>h\\x01\\x1c4\\x03\\xe9\\xb4\\x0fVU\\xd7\\x04\\xc9\\x840s\\xfc\\xe0\\x04\\xf9\\xf82W\\x01A0\\x01\\x01\\x01d\\x1c\\x0c\\x02\\x04\\x10)\\xf1\\x01\\x01\\x11@', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_column_blocker.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xba\\xc0B\\x94\\x01y\\xe8\\x04\\x9dl\\x19\\x0b\\xcb\\xd5\\x05c\\xbc<\\xe2\\x014\\x05\\xa0\\xa0/\\xcd\\x01U(\\x01\\x01\\x01\\xddP\\x0c\\x02\\x04\\x103W\\x01\\x01D ', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_core.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06HZS\\x01\\x92\\x05\\xcc\\xec*\\x94\\x01L\\x99\\x07(\\x84Q\\t\\x01\\xa3 \\x07y\\x90!\\xa7\\x01\\x1cX\\x01\\x01\\x035\\xb4\\x0c\\x02\\x04\\x10H_\\x01\\x01\\xc7 ', 5, 6, 'invalid start byte')})"), 'portal2/maps/sp_a2_dual_lasers.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xeb\\xf8;i\\xe8\\xbc\\x03\\xd9\\x18\\x0fhP^\\x04\\xc5\\xb0&\\xb5\\xb1\\xc0\\x04\\xech3,\\x01&\\xc0\\x01\\x01\\x01k\\xcc\\x0c\\x02\\x04\\x10#z\\x01\\xbc\\xe0', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_fizzler_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xb8\\xbc.\\xf3\\xc7D\\x02\\xae\\xa0\\x076%6\\x03_\\x9c\\x1d\\x87\\x8f@\\x03}$)\\x83\\xed`\\x01\\x01\\xbd\\xa4\\x0c\\x02\\x04\\x10\\x19\\xb0\\x01\\x99\\xa0', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\xe2\\xa4X\\xbf\\x01\\x8a\\xb0\\x06\\xa1\\xf09\\xe3\\x01s\\xc0\\x07\\xc9\\x84S\\xff\\x01j \\x08\\x1d\\x84:\\x8a\\x01\\x9e\\xd8\\x01\\x01\\x02\\xe3,\\x0c\\x02\\x04\\x10N\\x1f\\x01\\x01y\\xe0', 1, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_laser_chaining.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03c\\xf83\\x13\\x01\\x1d$\\x03Tl\\x0b\\xd1G\\xa0\\x04\\x0bD*\\x8f\\xeb@\\x045\\xd4*\\x15\\x014@\\x01\\x01\\xed\\x04\\x0c\\x02\\x04\\x10#o\\x01\\xfb ', 2, 3, 'invalid start byte')})"), 'portal2/maps/sp_a2_laser_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x05\\xe4;\\x95\\xd8\\xe4\\x03\\xf1\\x88\\x11\\x9ejz\\x04\\xd3\\x9c$\\xad\\xa1\\x80\\x04\\xf8L0A\\x01\\x08`\\x01\\x01\\x01\\xae\\x94\\x0c\\x02\\x04\\x10!\\xce\\x01\\xa8\\xc0', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_laser_over_goo.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03u\\xdc1\\r\\xdd\\xb8\\x03h,\\t&/\\xc6\\x04.d&y\\xb9\\xc0\\x04T\\xe0.\\x07\\x01\\x15\\xe0\\x01\\x01\\x01$T\\x0c\\x02\\x04\\x10"\\xc7\\x01\\xc9@\', 2, 3, \'invalid continuation byte\')})'), 'portal2/maps/sp_a2_laser_relays.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xfe\\xb81}\\x01\\x05\\x90\\x02\\xeb4\\x0f\\\\f\\xc6\\x03\\x990*\\x9d\\xe3\\xc0\\x03\\xc3\\xd0$\\xa9\\xf5@\\x01\\x01\\xe8D\\x0c\\x02\\x04\\x10#\\x9e\\x01\\xf6\\xe0', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_laser_stairs.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x04\\xb1\\xe0J"\\x01;\\x04\\x98\\x0c\\x15wsC\\x05\\x9d\\xc4-\\x82\\xd8\\x80\\x05\\xcbH:A\\x01\\x84h\\x01\\x01\\x01\\xd1\\\\\\x0c\\x02\\x04\\x10(\\xf5\\x01\\xe8@\', 1, 2, \'invalid start byte\')})'), 'portal2/maps/sp_a2_laser_vs_turret.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xc8\\xf80\\xeb\\xe2\\xc8\\x03\\xb6\\xdc\\x0e\\xefU\\xf9\\x04s\\x94$\\xad\\xac\\xa0\\x04\\x98D+\\xb8\\x01\\x12\\xc8\\x01\\x01\\x01\\x80(\\x0c\\x02\\x04\\x10 \\xad\\x01\\xb6`', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_pit_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05d0B\\x9b\\x011|\\x05OL\\x0e\\x81XJ\\x06B\\x986\\xe8\\x01\\x01@\\x06y\\x803W\\x01_\\x90\\x01\\x01\\x02hT\\x0c\\x02\\x04\\x100M\\x01\\x01\\x14\\xc0', 4, 5, 'invalid start byte')})"), 'portal2/maps/sp_a2_pull_the_rug.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04d\\x10N\\xe0\\x01;\\xcc\\x04N,\\x11bb_\\x05]T.`\\xf3\\x80\\x05\\x8b\\xb4B,\\x01x\\xe0\\x01\\x01\\x01\\x81L\\x0c\\x02\\x04\\x10)\\x85\\x01\\x01\\x05\\x80', 4, 5, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_ricochet.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xd4DE\\x12\\x01M`\\x04\\xb2\\xb0\\x1b\\xff\\xca\\xaa\\x05\\xa8<5o\\xfd\\x05\\xdd\\xac5p\\x01c\\xc8\\x01\\x01\\x01\\xc9\\x14\\x0c\\x02\\x04\\x100O\\x01\\x01\\x0f', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_sphere_peek.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x8cD>\\xad\\x01C|\\x04q\\x04\\x16Wk\\xc5\\x05V\\xd07\\x95\\x01,@\\x05\\x8eh1 \\x01[\\xe8\\x01\\x01\\x01\\xb08\\x0c\\x02\\x04\\x10.\\xef\\x01\\x01@ ', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_triple_laser.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02*$"\\xf3\\xa3\\x98\\x02"\\xe0\\x05k\\x16s\\x02\\xc6\\xd8\\x15\\x17h\\x02\\xdb\\xf0\\x1d\\xf8\\xad@\\x01\\x01u\\xbc\\x0c\\x02\\x04\\x10\\x12\\xf4\\x01n`\', 4, 7, \'invalid continuation byte\')})'), 'portal2/maps/sp_a2_trust_fling.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x8b\\xe4?*\\x01jX\\x05c\\x8c!\\xfd\\xf3\\xd6\\x06PdC\\xfb\\x01`\\x80\\x06\\x94`6I\\x01\\x83\\x90\\x01\\x01\\x02`@\\x0c\\x02\\x04\\x108\\x89\\x01\\x01{ ', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a2_turret_blocker.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x07\\xdc1\\xfb\\xf3<\\x03\\xf6\\x10\\x0e\\xa7SL\\x04\\xaed%Y\\xba`\\x04\\xd3\\xc0+{\\x01\\x07\\xd0\\x01\\x01\\x01\\xb8\\x1c\\x0c\\x02\\x04\\x10 \\x10\\x01\\xc5`', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a2_turret_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03`\\xf86v\\xe8\\\\\\x03T\\x8c\\t\\xc6*\\xb6\\x04\\x18|\\x1e\\x80\\x97\\x046\\xfc/r\\x01#\\xf0\\x01\\x01\\x01\\t\\x88\\x0c\\x02\\x04\\x10\\x1b\\xa4\\x01\\xa0 ', 2, 3, 'invalid start byte')})"), 'portal2/maps/sp_a3_00.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xb6|)\\xdd', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a3_01.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08r4v\\xd9\\x01\\x99\\xe0\\x08\\x0b\\xc8`\\xe3\\x03\\r\\xbd\\t\\xb7\\xb0FC\\x01^\\xa0\\t\\xfd\\xf4V\\xbd\\x01\\xf8\\x90\\x01\\x01\\x04(|\\x0c\\x02\\x04\\x10B\\xe2\\x01\\x01o\\xe0', 4, 5, 'invalid continuation byte')})"), 'portal2/maps/sp_a3_03.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05}\\x8cL\\xcb\\x01\\x86\\xf0\\x05>t6e\\x02(\\xc7\\x06?\\x0cG\\x14\\x01P\\x80\\x06\\x86 ,\\xbc\\x01\\\\0\\x01\\x01\\x0208\\x0c\\x02\\x04\\x10?\\xbe\\x01\\x01f@', 2, 3, 'invalid start byte')})"), 'portal2/maps/sp_a3_bomb_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x19\\xf8/\\xaf\\xb6\\xa0\\x03\\x03\\x98\\x14\\x17\\x848\\x03\\x94\\xc0\\x1d\\x81~\\xc0\\x03\\xb2D$\\xa0\\x01%\\xe8\\x01\\x01\\x01O@\\x0c\\x02\\x04\\x10\\x1b\\xa0\\x01\\x84', 2, 3, 'invalid start byte')})"), 'portal2/maps/sp_a3_crazy_box.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04Q\\xd0(\\x17\\xd7p\\x044\\x84\\x17\\xba\\xa4\\x9c\\x04\\xa7\\x9c2L\\xe2\\x04\\xd9\\xe8\\x1bw\\xf8X\\x01\\x01\\x02{D\\x0c\\x02\\x04\\x10,D\\x01\\xf2`', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a3_end.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x07;dm\\x93\\x01\\xe5X\\x07\\x13\\xa4 \\xfd\\x01V\\x16\\x08\\x85\\\\C\\xfa\\x01F\\xe0\\x08\\xc9X=\\xe1\\x01\\xd4\\x90\\x01\\x01\\x03\\x88\\x14\\x0c\\x02\\x04\\x10<\\x87\\x01\\x01Y\\xc0', 4, 5, 'invalid start byte')})"), 'portal2/maps/sp_a3_jump_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x16\\x1876\\x01%4\\x04\\xd5\\xa4<7\\x01\\xa9_\\x05\\x8e\\x04=\\xf7\\x01\\x1d\\xe0\\x05\\xcb\\xfc,\\x13\\x01\\x89\\xc0\\x01\\x01\\x02\\x8c\\x10\\x0c\\x02\\x04\\x108\\x80\\x01\\x01(\\xc0', 14, 15, 'invalid start byte')})"), 'portal2/maps/sp_a3_portal_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\t\\xc4\\x04gc\\x02X\\x0c\\tY<b\\xe4\\x03\\x90\\x08\\n\\x968X\\x9e\\x01\\x93@\\n\\xee\\xd8NS\\x02\\x8b`\\x01\\x01\\x04\\xb9(\\x0c\\x02\\x04\\x10R\\x92\\x01\\x01\\xa9\\xe0', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a3_speed_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02!L#\\x98\\xbe\\xd4\\x02\\x1d`\\x01*\\x0b|\\x02q\\\\\\x11\\xd1N`\\x02\\x830\\x1a\\xc7\\xcb\\xe8\\x01\\x01\\xc0,\\x0c\\x02\\x04\\x10\\x10\\xa7\\x01T`', 4, 5, 'invalid start byte')})"), 'portal2/maps/sp_a3_speed_ramp.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04|\\x84.~\\xdf\\x98\\x04\\x1b\\xd4]>\\x02\\x83\\xe1\\x04\\xe8\\xb42O\\xe2\\xc0\\x05\\x1b\\x04,\\xf8\\x01q\\xd8\\x01\\x01\\x02=\\xec\\x0c\\x02\\x04\\x10/)\\x01\\xea\\xc0', 2, 3, 'invalid start byte')})"), 'portal2/maps/sp_a3_transition01.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x07\\xff8TD\\x01\\x89\\x07\\xba\\xc4=\\xe6\\x01\\xca\\x9b\\x08\\xd9\\xe8A\\xd9\\x013`\\t\\x1b\\xc4-q\\x01\\x81\\x08\\x01\\x01\\x04v\\x18\\x0c\\x02\\x04\\x10<\\xce\\x01\\x01C ', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a4_finale1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xae\\x0cEd\\x01r\\\\\\x04\\x89\\xf4\\x1e@\\xce\\x92\\x05lLEZ\\x01Q\\xc0\\x05\\xb1\\xa84\\x1a\\x01Q\\xc8\\x01\\x01\\x01\\xf1X\\x0c\\x02\\x04\\x10;\\xd6\\x01\\x01c\\xc0', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a4_finale2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x05\\xd4>\\x9e\\x01\\x97p\\x05\\xdeD\\x1f\\xeb\\xba\\xa9\\x06\\x96V*\\x01\\xb4\\xc0\\x06\\xec,%\\xdb\\x01?\\xc8\\x01\\x01\\x0308\\x0c\\x02\\x04\\x10I\\xad\\x01\\x01\\xd0\\xe0', 2, 3, 'invalid continuation byte')})"), 'portal2/maps/sp_a4_finale3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x05t\\xd4G\'\\x01\\xbaD\\x05=H1m\\x01\\xa9\\xcb\\x05\\xf2`O\\xbd\\x01x\\xc0\\x06B -\\x83\\x01\\x9cP\\x01\\x01\\x02al\\x0c\\x02\\x04\\x10Ed\\x01\\x01\\x8c@", 2, 3, \'invalid continuation byte\')})'), 'portal2/maps/sp_a4_finale4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xc2T\\x9c\\xf3\\x01\\xfap\\x05\\xac\\x90\\x10\\x16\\x98k\\x06\\xfd`@T\\x019 \\x07=\\xb4?\\x9e\\x01X\\x88\\x01\\x01\\x02l\\xfc\\x0c\\x02\\x04\\x1098\\x01\\x01M ', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a4_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x85\\x9c]Z\\x02%\\xfc\\x06M\\x942\\xf1\\x01\\x183\\x07lXF\\xec\\x01m\\x80\\x07\\xb3D1\\x18\\x01j\\xd0\\x01\\x01\\x02\\xb1\\x1c\\x0c\\x02\\x04\\x10:X\\x01\\x01\\x82 ', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a4_jump_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08\\xb9\\x8c_F\\x01\\xff\\xe0\\x08: {\\r\\x03[\\xf3\\t\\xb0\\x90Y}\\x01\\xb9`\\n\\n\\x1076\\x01i\\xb0\\x01\\x01\\x04e8\\x0c\\x02\\x04\\x10Ph\\x01\\x01\\xc8', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a4_laser_catapult.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06l,mx\\x01\\xf4d\\x065\\xac2\\n\\xf6\\n\\x07\\x81\\x98@\\xad\\x01:@\\x07\\xc2H;\\xd9\\x01]\\xe0\\x01\\x01\\x02\\xe6t\\x0c\\x02\\x04\\x109\\\\\\x01\\x01I ', 6, 7, 'invalid continuation byte')})"), 'portal2/maps/sp_a4_laser_platform.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x83@`\\xf2\\x02\\x16\\x90\\x05c\\x08\\x1b\\x11\\xa2\\x88\\x06`\\xb4C\\x17\\x01F\\x80\\x06\\xa3\\xcc.N\\x013\\xb0\\x01\\x01\\x02\\xa3(\\x0c\\x02\\x04\\x10;(\\x01\\x01W\\x80', 1, 2, 'invalid start byte')})"), 'portal2/maps/sp_a4_speed_tb_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04h4<\\x9a\\x01`\\x98\\x04C\\x88 @\\xd2\\xe3\\x04\\xf8\\x18>\\xff\\x010\\xe0\\x057\\x18\\x1f/\\xf8X\\x01\\x01\\x01\\xa5\\xc8\\x0c\\x02\\x04\\x105s\\x01\\x01>\\xe0', 4, 5, 'invalid start byte')})"), 'portal2/maps/sp_a4_stop_the_box.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04G\\x883#\\x01-\\\\\\x041,\\x11\\xbad)\\x04\\xe8,5T\\x01+\\xa0\\x05\\x1d\\x80\'t\\x01\\x07\\x88\\x01\\x01\\x01\\xced\\x0c\\x02\\x04\\x10*?\\x01\\x01>\\xa0", 2, 3, \'invalid start byte\')})'), 'portal2/maps/sp_a4_tb_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xc2,@\\x84\\x01:d\\x04\\xaax\\x13\\xee\\x88\\xb1\\x05v\\x08/\\xc4\\xe3\\x05\\xa5\\xcc1d\\x01W \\x01\\x01\\x01\\xb8\\xd8\\x0c\\x02\\x04\\x10)S\\x01\\xee ', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a4_tb_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xdd8,W\\xfb\\xb8\\x02\\xd4\\xdc\\x04\\x96\\x11\\xe1\\x03xH#\\xab\\xdb`\\x03\\x9b\\xf4#O\\xdb\\xa8\\x01\\x01\\xb34\\x0c\\x02\\x04\\x10\\x1c,\\x01\\xed', 1, 2, 'invalid continuation byte')})"), 'portal2/maps/sp_a4_tb_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x08dB\\x9e\\x01b`\\x04\\xd5\\x88/9\\x01/G\\x05\\xb5\\xd468\\x01\\x14`\\x05\\xec\\x0c+D\\x01$\\x80\\x01\\x01\\x02Ht\\x0c\\x02\\x04\\x10/\\xfe\\x01\\x01 \\xa0', 4, 5, 'invalid start byte')})"), 'portal2/maps/sp_a4_tb_trust_drop.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04\\xf4\\xe8=\\x97\\x01]\\x14\\x04\\xc2\\xa4.\\xa5\\x011\\xb2\\x05\\xa2x9\\xa7\\x015\\xe0\\x05\\xdc +\'\\x01BP\\x01\\x01\\x02A\\xbc\\x0c\\x02\\x04\\x100\\xd2\\x01\\x01D ", 1, 2, \'invalid continuation byte\')})'), 'portal2/maps/sp_a4_tb_wall_button.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04\\x90\\xd4<\\x18\\x01,H\\x04~$\\r\\xd8V\\xdd\\x05ND<\\x05\\x01%\\xe0\\x05\\x8aL-\'\\x015`\\x01\\x01\\x01\\xdf\\x84\\x0c\\x02\\x04\\x102D\\x01\\x014\\xc0", 1, 2, \'invalid start byte\')})'), 'portal2/maps/sp_a5_credits.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x0b\\xf4R', 1, 2, 'invalid continuation byte')})")} == {}[0m
[1m[31mE         Left contains 105 more items:[0m
[1m[31mE         {'portal2/maps/mp_coop_catapult_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xdb\\xd05\\x92\\x01wx\\x04\\xba\\x1c\\x13\\xb3\\x13\\x05f\\xd8DV\\x01\\x81\\x05\\xab0.i\\x01x\\x08\\x01\\x01\\x02\\x02\\x90\\x0c\\x02\\x04\\x106\\xdf\\x01\\x01\\x9a ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_catapult_2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03xl(\\xe8\\xff\\xa8\\x03i\\xb0\\x0b\\x047y\\x03\\xed\\xf0\'L\\xcf@\\x04\\x15<(\\xb0\\x01&0\\x01\\x01\\x01H\\xb8\\x0c\\x02\\x04\\x10!Y\\x01\\xdc", 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_catapult_wall_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03b\\x98,\\xa9\\xeb\\x98\\x03O\\xe4\\x0f\\x91Q\\xc7\\x03\\xe5L$E\\xae\\xe0\\x04\\t\\x94) \\x01#\\xa8\\x01\\x01\\x01A|\\x0c\\x02\\x04\\x10\\x1fE\\x01\\xb9`', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_come_along.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02\\xab,"a\\xc1\\\\\\x02\\x9f\\xec\\x08G)\\xbb\\x03\\x17l\\x1f!\\xa4\\x036\\x90\\x1b\\\\\\xb7\\xa8\\x01\\x01\\x01\\n\\x84\\x0c\\x02\\x04\\x10\\x1aZ\\x01\\xae\\xa0\', 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_credits.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'E\\xec\\x04D%DD\\x18\\xf0\\x03@M\\x98\\x06\\xbd)@TX\\x02^\\x11p\\x01\\x01\\x1bD\\x0c\\x02\\x04\\x10\\x05\\x96\\x01. ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_doors.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x1e\\xa0!\\x1d\\xac\\xb0\\x02\\x17\\xa8\\x04P\\x13\\x01\\x02\\x89@\\x14\\xb7b\\xa0\\x02\\x9d\\xf8\\x17\\xe1\\x98p\\x01\\x01\\x8d\\xe8\\x0c\\x02\\x04\\x10\\x12\\x87\\x01j ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_fan.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x98@?t\\x016\\xe0\\x03\\x89\\x14\\x0b\\xa8`S\\x04,\\xac!\\xa0\\x9b\\xa0\\x04NL\\x1c\\x13\\xdc\\xc8\\x01\\x01\\x01]\\x18\\x0c\\x02\\x04\\x10 R\\x01\\xa4', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_fling_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02H@\\x1eQ\\x9a\\xbc\\x02Ad\\x04\\xff\\x17\\x05\\x02\\xa9t\\x14Y\\xc0\\x02\\xbdt\\x19\\xdf\\xab\\xd8\\x01\\x01\\xc4H\\x0c\\x02\\x04\\x10\\x12\\x1c\\x01^\\xc0', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_fling_3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03T\\xe4&\\xa9\\xeb\\x80\\x03GD\\n\\x808D\\x03\\xc0x"\\xbd\\xba\\xa0\\x03\\xe38 \\x05\\xe4\\xf0\\x01\\x01\\x01a\\x90\\x0c\\x02\\x04\\x10\\x1d\\x08\\x01\\xc6\\xc0\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_fling_crushers.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02\\xd7\\xf0"\\xfc\\xd9\\x08\\x02\\xcaT\\t\\xe35\\xa2\\x03=@#6\\xb3\\x03`x\\x1b\\xf1\\xc3\\xc0\\x01\\x01\\xe7\\xe0\\x0c\\x02\\x04\\x10\\x1e\\x1a\\x01\\xc0\', 1, 2, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_infinifling_train.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x027d\\x1e\\x1c\\xa3h\\x02,\\x90\\x08B$3\\x02\\x95|\\x19Ov\\x02\\xae\\xcc\\x19\\xee\\xa9\\xe0\\x01\\x01\\xb5@\\x0c\\x02\\x04\\x10\\x16\\x8c\\x01}`', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_laser_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x06\\x0c$\\xe4\\xf6\\x18\\x02\\xf1\\xfc\\x10cZ\\t\\x03i\\x1c)[\\xe1@\\x03\\x92x\\x1c\\xdd\\xd5x\\x01\\x01\\x01\\x1f\\xd0\\x0c\\x02\\x04\\x10!\\xf5\\x01\\xf0`', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_laser_crusher.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03\\x1e&\\x87\\xeax\\x03\\x0c(\\x0e\\xc6Jr\\x03\\x86|"\\xb0\\xaf\\xc0\\x03\\xa9,\\x1c(\\xd0 \\x01\\x01\\x017\\xc8\\x0c\\x02\\x04\\x10\\x1d\\xee\\x01\\xb9\\x80\', 3, 4, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_lobby_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08b`p\\xcc\\x03%,\\x08\\x178Cx\\x02\\xf5\\x92\\t\\x9f`U\\xd9\\x01\\xed\\xc0\\t\\xf5<G\\x07\\x02\\x8d\\x10\\x01\\x01\\x03\\xd2$\\x0c\\x02\\x04\\x10I+\\x01\\x02\\x11@', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_multifling_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05X\\xc4A\\x82\\x01\\x97\\xa0\\x054\\xb4\\x1fR\\xd1t\\x06\\x0ed>\\xac\\x01R\\xe0\\x06M\\x103s\\x01\\x908\\x01\\x01\\x02F\\xc0\\x0c\\x02\\x04\\x103\\xbd\\x01\\x01e\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_bridge.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x04\\x07(-|\\xfb\\xdc\\x03\\xd7d-\\x1c\\x01#k\\x04x\\xac,"\\xc7`\\x04\\xa4\\xd0 \\xfd\\x013\\xf8\\x01\\x01\\x01\\xf1@\\x0c\\x02\\x04\\x10\\\'\\x16\\x01\\xcf\', 5, 6, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_come_along.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xf0\\xe4!\\x9b\\xa6h\\x02\\xd10\\x1dt\\x93\\xa7\\x03[\\x94\\x1f\\x1e\\x8c\\xa0\\x03z\\xb4\\x1a\\x1f\\xcc\\xc0\\x01\\x01\\x01h\\x98\\x0c\\x02\\x04\\x10\\x1b\\xb2\\x01\\x92\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_longjump_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x86\\x8c>\\xe4\\x01~D\\x06\\x0b\\xd8v\\x97\\x03^0\\x06\\xfd\\xe8NL\\x01_\\xe0\\x07L41\\xb6\\x01\\xd7`\\x01\\x01\\x03\\x17\\xa8\\x0c\\x02\\x04\\x10F\\x92\\x01\\x01k', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_red_racer.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03T|(\\xe2\\xcc$\\x03<\\xe8\\x14\\xc4\\xa0q\\x03\\xd2L"\\x1c\\x96`\\x03\\xf4h \\xf6\\x01\\x0cP\\x01\\x01\\x01\\xb3\\xd8\\x0c\\x02\\x04\\x10\\x1f\\x1d\\x01\\x9d`\', 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_redirect.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03i\\x80-\\xe0\\xde\\xfc\\x03M\\xe0\\x18\\x9a\\x9by\\x03\\xf2l&\\x12\\xb0\\xe0\\x04\\x18\\x80!\\xf3\\x01!\\xf8\\x01\\x01\\x01\\x928\\x0c\\x02\\x04\\x10!\\xe0\\x01\\xb9', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_speed_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xda\\x08%*\\xb9\\xf4\\x02\\xc3D\\x14)~\\xf7\\x03L, \\x0e\\x98@\\x03l<\\x1e\\x0f\\xfb\\xb8\\x01\\x01\\x01]\\xd8\\x0c\\x02\\x04\\x10\\x1c/\\x01\\xa0\\x80', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_speed_fling.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x9381\\x15\\x01\\x15 \\x04TH<+\\x01\\x9e\\xae\\x05\\x0c\\x8038\\xed`\\x05?\\xb8#\\xcf\\x01F\\x88\\x01\\x01\\x02L\\xbc\\x0c\\x02\\x04\\x10-\\x05\\x01\\xf6\\xc0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_paint_walljumps.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xb1,,z\\xe9\\xc4\\x03\\x91 \\x1dC\\xbaM\\x045\\xa0$\\x91\\xa6 \\x04Z4%\\xfb\\x01>`\\x01\\x01\\x01\\xaf0\\x0c\\x02\\x04\\x10 \\x86\\x01\\xae ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_race_2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03Ml\'\\xd9\\x01\\x08\\x038P\\x11\\xc8q\\xa0\\x03\\xb3\\x14+\\xbd\\xed \\x03\\xde\\xd4\\x1fW\\xf3\\x90\\x01\\x01\\x015t\\x0c\\x02\\x04\\x10#\\xea\\x01\\xfa\\xa0", 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_rat_maze.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x11\\xa0\\x1e\\xba\\xact\\x02\\x08\\x98\\x06\\xe2 \\x8a\\x02e\\x90\\x16\\xe3l\\x80\\x02|t\\x17\\xe9\\xb0X\\x01\\x01\\x9fh\\x0c\\x02\\x04\\x10\\x14o\\x01r\\x80', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_start.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08m\\xe4^6\\x03l\\x08\\x17\\x0cM\\xe6\\x026\\xa0\\tH\\x10w\\xdd\\x02\\xd2\\xe0\\t\\xbf\\xf0Fj\\x02\\xa2\\xb8\\x01\\x01\\x03ih\\x0c\\x02\\x04\\x10]A\\x01\\x03\\x06', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_catch_grind_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03a\\x08*\\x95\\x01\\xb0\\x03C\\xdc\\x19\\xad\\x8d}\\x03\\xd1\\xc4)\\x13\\xcb@\\x03\\xfa\\xd8\\x1d\\xa4\\xcf\\xd8\\x01\\x01\\x01u4\\x0c\\x02\\x04\\x10#\\xac\\x01\\xd7\\xc0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_drill.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03o<.7\\x015\\xf0\\x03U\\xa4\\x16\\xb0\\x8au\\x03\\xe5\\x84\'\\xdf\\xdd@\\x04\\rd\\x1e\\xba\\xe7x\\x01\\x01\\x01z\\\\\\x0c\\x02\\x04\\x10!R\\x01\\xe8\\xa0", 7, 8, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_end.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xd1\\x180T\\x01mX\\x04\\xb1h\\x1b\\x8c\\xac4\\x05!\\xc08e\\x01&\\xc0\\x05Z(\\x1d\\x17\\x01\\x0b\\xc0\\x01\\x01\\x02P\\xf4\\x0c\\x02\\x04\\x10.\\x96\\x01\\x017\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_laser_1.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03E\\xc8,?\\x01\\n\\x10\\x03+\\x10\\x17\\xc9\\x90\\xb9\\x03\\xb6\\xc4\\\'\\x93\\xbe\\x03\\xdeX#\\x14\\x01\\x01\\x10\\x01\\x01\\x01>\\xc8\\x0c\\x02\\x04\\x10"\\xf5\\x01\\xc7@\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_maze.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03\\x99\\xb4/\\xab\\x01\\x0b\\xa8\\x03l\\x04)x\\xfat\\x04\\x15\\xb4,\\xe6\\xcd@\\x04B\\x9c%\\x9e\\x013 \\x01\\x01\\x01}8\\x0c\\x02\\x04\\x10\'\\xc5\\x01\\xd8\\xa0", 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xa3l$k\\xdb\\xf0\\x02\\x96$\\nd1_\\x03\\x0f\\xb0!\\x8e\\xb0 \\x031@\\x1b[\\xc4\\x08\\x01\\x01\\xdc\\xa4\\x0c\\x02\\x04\\x10\\x1bv\\x01\\xba`', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_polarity2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x96|%\\x10\\xccH\\x02\\x8a\\xac\\t\\\\-F\\x03\\x03|\\x1a\\x89x`\\x03\\x1e\\x08\\x1a\\x83\\xaf\\xc8\\x01\\x01\\xdd$\\x0c\\x02\\x04\\x10\\x17\\x86\\x01\\x7f', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_polarity3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x038\\xc4$=\\xdc\\\\\\x03$\\xb0\\x10\\xc8]"\\x03\\xaa8&\\xb5\\xc5`\\x03\\xd0\\xf0\\x1d\\r\\xcd\\x98\\x01\\x01\\x01^\\xd8\\x0c\\x02\\x04\\x10 \\xec\\x01\\xd0\\xe0\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/mp_coop_tbeam_redirect.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xab$0\\xa9\\x01A\\xfc\\x05P@X\\x0e\\x02HS\\x06\\x1c\\x806\\xf0\\x01 \\x06Sp\\x1f\\xa1\\xf6`\\x01\\x01\\x035,\\x0c\\x02\\x04\\x101V\\x01\\x01+ ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_teambts.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\xf1\\xac\\x0b\\xf8B<\\xeb\\xe0\\x03\\xaa\\x10\\xfb\\x01\\r\\xbc\\x0f=@`\\x01\\x1c\\xfc\\x0bDT\\xa8\\x01\\x01`\\xac\\x0c\\x02\\x04\\x10\\r\\xc5\\x01E@', 0, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_turret_ball.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04U\\xb84\\xff\\x01D\\x9c\\x047d\\x1aW\\x9eq\\x04\\xd9P0V\\x01\\x03\\xa0\\x05\\t\\xa8-s\\x01K\\xe0\\x01\\x01\\x01\\xee\\xf4\\x0c\\x02\\x04\\x10)\\xa1\\x01\\x01\\x12\\xc0', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_turret_walls.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03~ /\\x06\\x01?\\xc8\\x03k\\x08\\x0fbQ)\\x03\\xf5\\xb0.\\xae\\x01\\x0f \\x04$`(\\xe4\\x01BP\\x01\\x01\\x01/|\\x0c\\x02\\x04\\x10$\\xab\\x01\\x01  ', 7, 8, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_wall_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x01\\xc5\\xf0\\x1e\\xea\\x8e\\xd4\\x01\\xc0T\\x03\\xbf\\x0e\\xaa\\x02(\\x84\\x0f\\x81A`\\x028\\x08\\x1d\\x97\\xc0\\xa8\\x01\\x01w\\x14\\x0c\\x02\\x04\\x10\\x0ec\\x01E\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_wall_5.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xa2,(U\\xf9<\\x02\\x90\\x18\\r\\xfcc\\x83\\x02\\xe5\\x80%i\\xb4`\\x03\\n\\xec\\x19\\xbb\\xf0\\xc0\\x01\\x01\\xee\\x9c\\x0c\\x02\\x04\\x10 \\xa2\\x01\\xc2 ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_wall_block.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xc4\\xac6\\x86\\x01\\xae\\xb0\\x03\\xabx\\x14\\xf7m\\xd4\\x04HP;\\x1d\\x01\\x96\\x04\\x83p++\\x01G`\\x01\\x01\\x01\\x0f\\xf0\\x0c\\x02\\x04\\x10-\\x19\\x01\\x01\\xae\\xa0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/mp_coop_wall_intro.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03\\xb8h2h\\x01"p\\x03\\xa5\\x08\\x0f\\xd1J\\xfa\\x048T+\\x15\\xde`\\x04cl+*\\x01V\\xd8\\x01\\x01\\x01Q\\x98\\x0c\\x02\\x04\\x10#q\\x01\\xeb\\x80\', 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a1_intro1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xc9 p\\xb0\\x02,\\xd4\\x05\\xb1(\\x13\\xdd\\x9d\\x90\\x06\\xeb\\xd84\\xca\\xef@\\x07 \\xa4Z\\xb0\\x01\\xfe0\\x01\\x01\\x02\\x18\\xf4\\x0c\\x02\\x04\\x100c\\x01\\xf9@', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a1_intro2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03O84\\xca\\xc3\\xcc\\x03FX\\x06\\xb1%\\xb1\\x04\\x0f\\x08\\x18\\x13i \\x04\'\\x1c,p\\xe7\\xc0\\x01\\x01\\x01\\x12\\x0c\\x0c\\x02\\x04\\x10\\x16\\xea\\x01o", 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a1_intro3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x05\\xf7\\xd4W\\x14\\x01f8\\x05\\xd5\\xb4\\x1d\\xe5\\xde\\x7f\\x07\'X86\\xff\\xc0\\x07_\\x90?\\xef\\x01\\x8d\\xb0\\x01\\x01\\x01\\xff\\x94\\x0c\\x02\\x04\\x104&\\x01\\x01\\x0b", 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a1_intro4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05e\\xa4jr\\x01t$\\x05?\\xe4!\\\\\\x01\\x0f\\xeb\\x06\\x95<6n\\xf1\\xa0\\x06\\xcb\\xac5&\\x01B\\x08\\x01\\x01\\x01\\x9a\\xa8\\x0c\\x02\\x04\\x102\\xcd\\x01\\xfe', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a1_intro5.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03\\xcc\\xfc5t\\xdf\\x98\\x03\\xb5|\\x14\\xb2\\x94\'\\x04\\x87\\xa4$d\\xa6 \\x04\\xac\\x08.b\\x01\\x01X\\x01\\x01\\x01\\x84\\x14\\x0c\\x02\\x04\\x10!\\x89\\x01\\xae\\xe0", 1, 2, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a1_intro6.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x0e\\x14B;\\x01A\\xe4\\x04\\xf6x\\x14\\x0c|^\\x05\\xfd\\x18/,\\xee@\\x06,D.0\\x01\\x1b\\xc8\\x01\\x01\\x01\\xd9\\x8c\\x0c\\x02\\x04\\x10(\\x93\\x01\\xfb\\x80', 7, 8, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a1_intro7.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04w\\xd4K\\xa8\\x01/\\xf0\\x04S\\x94 9\\xf6s\\x05`\\x90/;\\xd6\\xe0\\x05\\x8f\\xcc7F\\x014\\xd0\\x01\\x01\\x01\\x95L\\x0c\\x02\\x04\\x10+\\xdd\\x01\\xe1\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a1_wakeup.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xfb4I\\x88\\x01 `\\x03\\xe1\\xbc\\x14\\xff\\x9f*\\x04\\xbch*^\\xbe \\x04\\xe6\\xc84\\xb7\\x013 \\x01\\x01\\x01#\\xc4\\x0c\\x02\\x04\\x10+\\xa9\\x01\\xc7\\xc0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_bridge_intro.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04r\\xcc:\\xb3\\x01\\x1b\\xc8\\x04Yp\\x15\\xc3\\x94\\xcd\\x05,\\xfc-\\xee\\xec\\x05Z\\xec.\\xb4\\x011\\xb8\\x01\\x01\\x01\\xb7\\\\\\x0c\\x02\\x04\\x10\'E\\x01\\xf9`", 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a2_bridge_the_gap.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xa3d9F\\x01-\\x8c\\x04\\x8e\\x04\\x10\\xa5S\\x17\\x05PX/\\xd9\\xed\\xe0\\x05\\x804/]\\x01I\\xa0\\x01\\x01\\x01\\xce\\x88\\x0c\\x02\\x04\\x10(\\xc7\\x01\\xfd\\xa0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_bts1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x058\\xe0B\\xc3\\x01\\xd0\\xb8\\x05\\x02l/\\xcb\\x01\\r\\xc5\\x05\\xe6\\xfcT\\xaa\\x01\\xd2@\\x06;\\xa8\\x1f\\xf1\\x01\\x07\\x88\\x01\\x01\\x02+|\\x0c\\x02\\x04\\x10D\\xee\\x01\\x01\\xf3 ', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_bts2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02e\\xc4\\x1c#\\xee\\xd4\\x02M\\x1c\\x13\\x07\\x7f@\\x02\\x91\\xac8w\\x01;\\xa0\\x02\\xca$\\x10W\\x98p\\x01\\x01\\x01/\\x1c\\x0c\\x02\\x04\\x100\\xaa\\x01\\x01V\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_bts3.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xe7\\x981W\\x01E \\x03\\xcb\\xc8\\x15\\x9c\\xa9\\x87\\x049\\xa4B\\xbb\\x014\\xa0\\x04|`\\x1c\\x8b\\x01&\\xc0\\x01\\x01\\x01\\x8c\\xec\\x0c\\x02\\x04\\x10:\\x1a\\x01\\x01F`', 1, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_bts4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x1f\\x800s\\x0138\\x03\\xfb\\xe0\\x1cv\\xb8\\\\\\x04\\x90\\x84?\\xaf\\x01\\x1b`\\x04\\xd04\\x1f\\xd3\\x01,\\xa8\\x01\\x01\\x01\\xc9\\x88\\x0c\\x02\\x04\\x109\\xf6\\x01\\x01/ ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_bts5.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02` \\x1dk\\xa2\\x84\\x02Jp\\x12\\x0cr\\x89\\x02\\x98\\xf4#\\x14\\x9b\\x80\\x02\\xbc\\x08\\x11\\x0e}\\xb8\\x01\\x01\\x01\\x1c\\xac\\x0c\\x02\\x04\\x10 \\x19\\x01\\xa5@', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_bts6.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03Yh)\\x95\\x01$\\x80\\x037\\x9c!#\\xbb\\xf4\\x03\\x8bX \\x18\\x84 \\x03\\xabp\\r\\x8a\\x92@\\x01\\x01\\x01\\xd5\\\\\\x0c\\x02\\x04\\x10\\x1e\\x07\\x01\\x85@', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_catapult_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xfd\\x90>h\\x01\\x1c4\\x03\\xe9\\xb4\\x0fVU\\xd7\\x04\\xc9\\x840s\\xfc\\xe0\\x04\\xf9\\xf82W\\x01A0\\x01\\x01\\x01d\\x1c\\x0c\\x02\\x04\\x10)\\xf1\\x01\\x01\\x11@', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_column_blocker.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xba\\xc0B\\x94\\x01y\\xe8\\x04\\x9dl\\x19\\x0b\\xcb\\xd5\\x05c\\xbc<\\xe2\\x014\\x05\\xa0\\xa0/\\xcd\\x01U(\\x01\\x01\\x01\\xddP\\x0c\\x02\\x04\\x103W\\x01\\x01D ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_core.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06HZS\\x01\\x92\\x05\\xcc\\xec*\\x94\\x01L\\x99\\x07(\\x84Q\\t\\x01\\xa3 \\x07y\\x90!\\xa7\\x01\\x1cX\\x01\\x01\\x035\\xb4\\x0c\\x02\\x04\\x10H_\\x01\\x01\\xc7 ', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_dual_lasers.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xeb\\xf8;i\\xe8\\xbc\\x03\\xd9\\x18\\x0fhP^\\x04\\xc5\\xb0&\\xb5\\xb1\\xc0\\x04\\xech3,\\x01&\\xc0\\x01\\x01\\x01k\\xcc\\x0c\\x02\\x04\\x10#z\\x01\\xbc\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_fizzler_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xb8\\xbc.\\xf3\\xc7D\\x02\\xae\\xa0\\x076%6\\x03_\\x9c\\x1d\\x87\\x8f@\\x03}$)\\x83\\xed`\\x01\\x01\\xbd\\xa4\\x0c\\x02\\x04\\x10\\x19\\xb0\\x01\\x99\\xa0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\xe2\\xa4X\\xbf\\x01\\x8a\\xb0\\x06\\xa1\\xf09\\xe3\\x01s\\xc0\\x07\\xc9\\x84S\\xff\\x01j \\x08\\x1d\\x84:\\x8a\\x01\\x9e\\xd8\\x01\\x01\\x02\\xe3,\\x0c\\x02\\x04\\x10N\\x1f\\x01\\x01y\\xe0', 1, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_laser_chaining.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03c\\xf83\\x13\\x01\\x1d$\\x03Tl\\x0b\\xd1G\\xa0\\x04\\x0bD*\\x8f\\xeb@\\x045\\xd4*\\x15\\x014@\\x01\\x01\\xed\\x04\\x0c\\x02\\x04\\x10#o\\x01\\xfb ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_laser_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x05\\xe4;\\x95\\xd8\\xe4\\x03\\xf1\\x88\\x11\\x9ejz\\x04\\xd3\\x9c$\\xad\\xa1\\x80\\x04\\xf8L0A\\x01\\x08`\\x01\\x01\\x01\\xae\\x94\\x0c\\x02\\x04\\x10!\\xce\\x01\\xa8\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_laser_over_goo.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03u\\xdc1\\r\\xdd\\xb8\\x03h,\\t&/\\xc6\\x04.d&y\\xb9\\xc0\\x04T\\xe0.\\x07\\x01\\x15\\xe0\\x01\\x01\\x01$T\\x0c\\x02\\x04\\x10"\\xc7\\x01\\xc9@\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a2_laser_relays.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xfe\\xb81}\\x01\\x05\\x90\\x02\\xeb4\\x0f\\\\f\\xc6\\x03\\x990*\\x9d\\xe3\\xc0\\x03\\xc3\\xd0$\\xa9\\xf5@\\x01\\x01\\xe8D\\x0c\\x02\\x04\\x10#\\x9e\\x01\\xf6\\xe0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_laser_stairs.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x04\\xb1\\xe0J"\\x01;\\x04\\x98\\x0c\\x15wsC\\x05\\x9d\\xc4-\\x82\\xd8\\x80\\x05\\xcbH:A\\x01\\x84h\\x01\\x01\\x01\\xd1\\\\\\x0c\\x02\\x04\\x10(\\xf5\\x01\\xe8@\', 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a2_laser_vs_turret.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xc8\\xf80\\xeb\\xe2\\xc8\\x03\\xb6\\xdc\\x0e\\xefU\\xf9\\x04s\\x94$\\xad\\xac\\xa0\\x04\\x98D+\\xb8\\x01\\x12\\xc8\\x01\\x01\\x01\\x80(\\x0c\\x02\\x04\\x10 \\xad\\x01\\xb6`', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_pit_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05d0B\\x9b\\x011|\\x05OL\\x0e\\x81XJ\\x06B\\x986\\xe8\\x01\\x01@\\x06y\\x803W\\x01_\\x90\\x01\\x01\\x02hT\\x0c\\x02\\x04\\x100M\\x01\\x01\\x14\\xc0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_pull_the_rug.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04d\\x10N\\xe0\\x01;\\xcc\\x04N,\\x11bb_\\x05]T.`\\xf3\\x80\\x05\\x8b\\xb4B,\\x01x\\xe0\\x01\\x01\\x01\\x81L\\x0c\\x02\\x04\\x10)\\x85\\x01\\x01\\x05\\x80', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_ricochet.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xd4DE\\x12\\x01M`\\x04\\xb2\\xb0\\x1b\\xff\\xca\\xaa\\x05\\xa8<5o\\xfd\\x05\\xdd\\xac5p\\x01c\\xc8\\x01\\x01\\x01\\xc9\\x14\\x0c\\x02\\x04\\x100O\\x01\\x01\\x0f', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_sphere_peek.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x8cD>\\xad\\x01C|\\x04q\\x04\\x16Wk\\xc5\\x05V\\xd07\\x95\\x01,@\\x05\\x8eh1 \\x01[\\xe8\\x01\\x01\\x01\\xb08\\x0c\\x02\\x04\\x10.\\xef\\x01\\x01@ ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_triple_laser.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02*$"\\xf3\\xa3\\x98\\x02"\\xe0\\x05k\\x16s\\x02\\xc6\\xd8\\x15\\x17h\\x02\\xdb\\xf0\\x1d\\xf8\\xad@\\x01\\x01u\\xbc\\x0c\\x02\\x04\\x10\\x12\\xf4\\x01n`\', 4, 7, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a2_trust_fling.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x8b\\xe4?*\\x01jX\\x05c\\x8c!\\xfd\\xf3\\xd6\\x06PdC\\xfb\\x01`\\x80\\x06\\x94`6I\\x01\\x83\\x90\\x01\\x01\\x02`@\\x0c\\x02\\x04\\x108\\x89\\x01\\x01{ ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_turret_blocker.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x07\\xdc1\\xfb\\xf3<\\x03\\xf6\\x10\\x0e\\xa7SL\\x04\\xaed%Y\\xba`\\x04\\xd3\\xc0+{\\x01\\x07\\xd0\\x01\\x01\\x01\\xb8\\x1c\\x0c\\x02\\x04\\x10 \\x10\\x01\\xc5`', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a2_turret_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03`\\xf86v\\xe8\\\\\\x03T\\x8c\\t\\xc6*\\xb6\\x04\\x18|\\x1e\\x80\\x97\\x046\\xfc/r\\x01#\\xf0\\x01\\x01\\x01\\t\\x88\\x0c\\x02\\x04\\x10\\x1b\\xa4\\x01\\xa0 ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_00.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xb6|)\\xdd', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_01.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08r4v\\xd9\\x01\\x99\\xe0\\x08\\x0b\\xc8`\\xe3\\x03\\r\\xbd\\t\\xb7\\xb0FC\\x01^\\xa0\\t\\xfd\\xf4V\\xbd\\x01\\xf8\\x90\\x01\\x01\\x04(|\\x0c\\x02\\x04\\x10B\\xe2\\x01\\x01o\\xe0', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_03.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05}\\x8cL\\xcb\\x01\\x86\\xf0\\x05>t6e\\x02(\\xc7\\x06?\\x0cG\\x14\\x01P\\x80\\x06\\x86 ,\\xbc\\x01\\\\0\\x01\\x01\\x0208\\x0c\\x02\\x04\\x10?\\xbe\\x01\\x01f@', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_bomb_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x19\\xf8/\\xaf\\xb6\\xa0\\x03\\x03\\x98\\x14\\x17\\x848\\x03\\x94\\xc0\\x1d\\x81~\\xc0\\x03\\xb2D$\\xa0\\x01%\\xe8\\x01\\x01\\x01O@\\x0c\\x02\\x04\\x10\\x1b\\xa0\\x01\\x84', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_crazy_box.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04Q\\xd0(\\x17\\xd7p\\x044\\x84\\x17\\xba\\xa4\\x9c\\x04\\xa7\\x9c2L\\xe2\\x04\\xd9\\xe8\\x1bw\\xf8X\\x01\\x01\\x02{D\\x0c\\x02\\x04\\x10,D\\x01\\xf2`', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_end.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x07;dm\\x93\\x01\\xe5X\\x07\\x13\\xa4 \\xfd\\x01V\\x16\\x08\\x85\\\\C\\xfa\\x01F\\xe0\\x08\\xc9X=\\xe1\\x01\\xd4\\x90\\x01\\x01\\x03\\x88\\x14\\x0c\\x02\\x04\\x10<\\x87\\x01\\x01Y\\xc0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_jump_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x16\\x1876\\x01%4\\x04\\xd5\\xa4<7\\x01\\xa9_\\x05\\x8e\\x04=\\xf7\\x01\\x1d\\xe0\\x05\\xcb\\xfc,\\x13\\x01\\x89\\xc0\\x01\\x01\\x02\\x8c\\x10\\x0c\\x02\\x04\\x108\\x80\\x01\\x01(\\xc0', 14, 15, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_portal_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\t\\xc4\\x04gc\\x02X\\x0c\\tY<b\\xe4\\x03\\x90\\x08\\n\\x968X\\x9e\\x01\\x93@\\n\\xee\\xd8NS\\x02\\x8b`\\x01\\x01\\x04\\xb9(\\x0c\\x02\\x04\\x10R\\x92\\x01\\x01\\xa9\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_speed_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02!L#\\x98\\xbe\\xd4\\x02\\x1d`\\x01*\\x0b|\\x02q\\\\\\x11\\xd1N`\\x02\\x830\\x1a\\xc7\\xcb\\xe8\\x01\\x01\\xc0,\\x0c\\x02\\x04\\x10\\x10\\xa7\\x01T`', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_speed_ramp.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04|\\x84.~\\xdf\\x98\\x04\\x1b\\xd4]>\\x02\\x83\\xe1\\x04\\xe8\\xb42O\\xe2\\xc0\\x05\\x1b\\x04,\\xf8\\x01q\\xd8\\x01\\x01\\x02=\\xec\\x0c\\x02\\x04\\x10/)\\x01\\xea\\xc0', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a3_transition01.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x07\\xff8TD\\x01\\x89\\x07\\xba\\xc4=\\xe6\\x01\\xca\\x9b\\x08\\xd9\\xe8A\\xd9\\x013`\\t\\x1b\\xc4-q\\x01\\x81\\x08\\x01\\x01\\x04v\\x18\\x0c\\x02\\x04\\x10<\\xce\\x01\\x01C ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_finale1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xae\\x0cEd\\x01r\\\\\\x04\\x89\\xf4\\x1e@\\xce\\x92\\x05lLEZ\\x01Q\\xc0\\x05\\xb1\\xa84\\x1a\\x01Q\\xc8\\x01\\x01\\x01\\xf1X\\x0c\\x02\\x04\\x10;\\xd6\\x01\\x01c\\xc0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_finale2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x05\\xd4>\\x9e\\x01\\x97p\\x05\\xdeD\\x1f\\xeb\\xba\\xa9\\x06\\x96V*\\x01\\xb4\\xc0\\x06\\xec,%\\xdb\\x01?\\xc8\\x01\\x01\\x0308\\x0c\\x02\\x04\\x10I\\xad\\x01\\x01\\xd0\\xe0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_finale3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x05t\\xd4G\'\\x01\\xbaD\\x05=H1m\\x01\\xa9\\xcb\\x05\\xf2`O\\xbd\\x01x\\xc0\\x06B -\\x83\\x01\\x9cP\\x01\\x01\\x02al\\x0c\\x02\\x04\\x10Ed\\x01\\x01\\x8c@", 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a4_finale4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xc2T\\x9c\\xf3\\x01\\xfap\\x05\\xac\\x90\\x10\\x16\\x98k\\x06\\xfd`@T\\x019 \\x07=\\xb4?\\x9e\\x01X\\x88\\x01\\x01\\x02l\\xfc\\x0c\\x02\\x04\\x1098\\x01\\x01M ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x85\\x9c]Z\\x02%\\xfc\\x06M\\x942\\xf1\\x01\\x183\\x07lXF\\xec\\x01m\\x80\\x07\\xb3D1\\x18\\x01j\\xd0\\x01\\x01\\x02\\xb1\\x1c\\x0c\\x02\\x04\\x10:X\\x01\\x01\\x82 ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_jump_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08\\xb9\\x8c_F\\x01\\xff\\xe0\\x08: {\\r\\x03[\\xf3\\t\\xb0\\x90Y}\\x01\\xb9`\\n\\n\\x1076\\x01i\\xb0\\x01\\x01\\x04e8\\x0c\\x02\\x04\\x10Ph\\x01\\x01\\xc8', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_laser_catapult.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06l,mx\\x01\\xf4d\\x065\\xac2\\n\\xf6\\n\\x07\\x81\\x98@\\xad\\x01:@\\x07\\xc2H;\\xd9\\x01]\\xe0\\x01\\x01\\x02\\xe6t\\x0c\\x02\\x04\\x109\\\\\\x01\\x01I ', 6, 7, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_laser_platform.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x83@`\\xf2\\x02\\x16\\x90\\x05c\\x08\\x1b\\x11\\xa2\\x88\\x06`\\xb4C\\x17\\x01F\\x80\\x06\\xa3\\xcc.N\\x013\\xb0\\x01\\x01\\x02\\xa3(\\x0c\\x02\\x04\\x10;(\\x01\\x01W\\x80', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_speed_tb_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04h4<\\x9a\\x01`\\x98\\x04C\\x88 @\\xd2\\xe3\\x04\\xf8\\x18>\\xff\\x010\\xe0\\x057\\x18\\x1f/\\xf8X\\x01\\x01\\x01\\xa5\\xc8\\x0c\\x02\\x04\\x105s\\x01\\x01>\\xe0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_stop_the_box.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04G\\x883#\\x01-\\\\\\x041,\\x11\\xbad)\\x04\\xe8,5T\\x01+\\xa0\\x05\\x1d\\x80\'t\\x01\\x07\\x88\\x01\\x01\\x01\\xced\\x0c\\x02\\x04\\x10*?\\x01\\x01>\\xa0", 2, 3, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a4_tb_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xc2,@\\x84\\x01:d\\x04\\xaax\\x13\\xee\\x88\\xb1\\x05v\\x08/\\xc4\\xe3\\x05\\xa5\\xcc1d\\x01W \\x01\\x01\\x01\\xb8\\xd8\\x0c\\x02\\x04\\x10)S\\x01\\xee ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_tb_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xdd8,W\\xfb\\xb8\\x02\\xd4\\xdc\\x04\\x96\\x11\\xe1\\x03xH#\\xab\\xdb`\\x03\\x9b\\xf4#O\\xdb\\xa8\\x01\\x01\\xb34\\x0c\\x02\\x04\\x10\\x1c,\\x01\\xed', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_tb_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x08dB\\x9e\\x01b`\\x04\\xd5\\x88/9\\x01/G\\x05\\xb5\\xd468\\x01\\x14`\\x05\\xec\\x0c+D\\x01$\\x80\\x01\\x01\\x02Ht\\x0c\\x02\\x04\\x10/\\xfe\\x01\\x01 \\xa0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE          'portal2/maps/sp_a4_tb_trust_drop.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04\\xf4\\xe8=\\x97\\x01]\\x14\\x04\\xc2\\xa4.\\xa5\\x011\\xb2\\x05\\xa2x9\\xa7\\x015\\xe0\\x05\\xdc +\'\\x01BP\\x01\\x01\\x02A\\xbc\\x0c\\x02\\x04\\x100\\xd2\\x01\\x01D ", 1, 2, \'invalid continuation byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a4_tb_wall_button.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04\\x90\\xd4<\\x18\\x01,H\\x04~$\\r\\xd8V\\xdd\\x05ND<\\x05\\x01%\\xe0\\x05\\x8aL-\'\\x015`\\x01\\x01\\x01\\xdf\\x84\\x0c\\x02\\x04\\x102D\\x01\\x014\\xc0", 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE          'portal2/maps/sp_a5_credits.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x0b\\xf4R', 1, 2, 'invalid continuation byte')})")}[0m
[1m[31mE         Full diff:[0m
[1m[31mE           {[0m
[1m[31mE         -  ,[0m
[1m[31mE         +  'portal2/maps/mp_coop_catapult_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xdb\\xd05\\x92\\x01wx\\x04\\xba\\x1c\\x13\\xb3\\x13\\x05f\\xd8DV\\x01\\x81\\x05\\xab0.i\\x01x\\x08\\x01\\x01\\x02\\x02\\x90\\x0c\\x02\\x04\\x106\\xdf\\x01\\x01\\x9a ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_catapult_2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03xl(\\xe8\\xff\\xa8\\x03i\\xb0\\x0b\\x047y\\x03\\xed\\xf0\'L\\xcf@\\x04\\x15<(\\xb0\\x01&0\\x01\\x01\\x01H\\xb8\\x0c\\x02\\x04\\x10!Y\\x01\\xdc", 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_catapult_wall_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03b\\x98,\\xa9\\xeb\\x98\\x03O\\xe4\\x0f\\x91Q\\xc7\\x03\\xe5L$E\\xae\\xe0\\x04\\t\\x94) \\x01#\\xa8\\x01\\x01\\x01A|\\x0c\\x02\\x04\\x10\\x1fE\\x01\\xb9`', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_come_along.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02\\xab,"a\\xc1\\\\\\x02\\x9f\\xec\\x08G)\\xbb\\x03\\x17l\\x1f!\\xa4\\x036\\x90\\x1b\\\\\\xb7\\xa8\\x01\\x01\\x01\\n\\x84\\x0c\\x02\\x04\\x10\\x1aZ\\x01\\xae\\xa0\', 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_credits.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'E\\xec\\x04D%DD\\x18\\xf0\\x03@M\\x98\\x06\\xbd)@TX\\x02^\\x11p\\x01\\x01\\x1bD\\x0c\\x02\\x04\\x10\\x05\\x96\\x01. ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_doors.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x1e\\xa0!\\x1d\\xac\\xb0\\x02\\x17\\xa8\\x04P\\x13\\x01\\x02\\x89@\\x14\\xb7b\\xa0\\x02\\x9d\\xf8\\x17\\xe1\\x98p\\x01\\x01\\x8d\\xe8\\x0c\\x02\\x04\\x10\\x12\\x87\\x01j ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_fan.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x98@?t\\x016\\xe0\\x03\\x89\\x14\\x0b\\xa8`S\\x04,\\xac!\\xa0\\x9b\\xa0\\x04NL\\x1c\\x13\\xdc\\xc8\\x01\\x01\\x01]\\x18\\x0c\\x02\\x04\\x10 R\\x01\\xa4', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_fling_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02H@\\x1eQ\\x9a\\xbc\\x02Ad\\x04\\xff\\x17\\x05\\x02\\xa9t\\x14Y\\xc0\\x02\\xbdt\\x19\\xdf\\xab\\xd8\\x01\\x01\\xc4H\\x0c\\x02\\x04\\x10\\x12\\x1c\\x01^\\xc0', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_fling_3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03T\\xe4&\\xa9\\xeb\\x80\\x03GD\\n\\x808D\\x03\\xc0x"\\xbd\\xba\\xa0\\x03\\xe38 \\x05\\xe4\\xf0\\x01\\x01\\x01a\\x90\\x0c\\x02\\x04\\x10\\x1d\\x08\\x01\\xc6\\xc0\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_fling_crushers.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02\\xd7\\xf0"\\xfc\\xd9\\x08\\x02\\xcaT\\t\\xe35\\xa2\\x03=@#6\\xb3\\x03`x\\x1b\\xf1\\xc3\\xc0\\x01\\x01\\xe7\\xe0\\x0c\\x02\\x04\\x10\\x1e\\x1a\\x01\\xc0\', 1, 2, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_infinifling_train.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x027d\\x1e\\x1c\\xa3h\\x02,\\x90\\x08B$3\\x02\\x95|\\x19Ov\\x02\\xae\\xcc\\x19\\xee\\xa9\\xe0\\x01\\x01\\xb5@\\x0c\\x02\\x04\\x10\\x16\\x8c\\x01}`', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_laser_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x06\\x0c$\\xe4\\xf6\\x18\\x02\\xf1\\xfc\\x10cZ\\t\\x03i\\x1c)[\\xe1@\\x03\\x92x\\x1c\\xdd\\xd5x\\x01\\x01\\x01\\x1f\\xd0\\x0c\\x02\\x04\\x10!\\xf5\\x01\\xf0`', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_laser_crusher.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03\\x1e&\\x87\\xeax\\x03\\x0c(\\x0e\\xc6Jr\\x03\\x86|"\\xb0\\xaf\\xc0\\x03\\xa9,\\x1c(\\xd0 \\x01\\x01\\x017\\xc8\\x0c\\x02\\x04\\x10\\x1d\\xee\\x01\\xb9\\x80\', 3, 4, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_lobby_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08b`p\\xcc\\x03%,\\x08\\x178Cx\\x02\\xf5\\x92\\t\\x9f`U\\xd9\\x01\\xed\\xc0\\t\\xf5<G\\x07\\x02\\x8d\\x10\\x01\\x01\\x03\\xd2$\\x0c\\x02\\x04\\x10I+\\x01\\x02\\x11@', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_multifling_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05X\\xc4A\\x82\\x01\\x97\\xa0\\x054\\xb4\\x1fR\\xd1t\\x06\\x0ed>\\xac\\x01R\\xe0\\x06M\\x103s\\x01\\x908\\x01\\x01\\x02F\\xc0\\x0c\\x02\\x04\\x103\\xbd\\x01\\x01e\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_bridge.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x04\\x07(-|\\xfb\\xdc\\x03\\xd7d-\\x1c\\x01#k\\x04x\\xac,"\\xc7`\\x04\\xa4\\xd0 \\xfd\\x013\\xf8\\x01\\x01\\x01\\xf1@\\x0c\\x02\\x04\\x10\\\'\\x16\\x01\\xcf\', 5, 6, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_come_along.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xf0\\xe4!\\x9b\\xa6h\\x02\\xd10\\x1dt\\x93\\xa7\\x03[\\x94\\x1f\\x1e\\x8c\\xa0\\x03z\\xb4\\x1a\\x1f\\xcc\\xc0\\x01\\x01\\x01h\\x98\\x0c\\x02\\x04\\x10\\x1b\\xb2\\x01\\x92\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_longjump_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x86\\x8c>\\xe4\\x01~D\\x06\\x0b\\xd8v\\x97\\x03^0\\x06\\xfd\\xe8NL\\x01_\\xe0\\x07L41\\xb6\\x01\\xd7`\\x01\\x01\\x03\\x17\\xa8\\x0c\\x02\\x04\\x10F\\x92\\x01\\x01k', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_red_racer.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03T|(\\xe2\\xcc$\\x03<\\xe8\\x14\\xc4\\xa0q\\x03\\xd2L"\\x1c\\x96`\\x03\\xf4h \\xf6\\x01\\x0cP\\x01\\x01\\x01\\xb3\\xd8\\x0c\\x02\\x04\\x10\\x1f\\x1d\\x01\\x9d`\', 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_redirect.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03i\\x80-\\xe0\\xde\\xfc\\x03M\\xe0\\x18\\x9a\\x9by\\x03\\xf2l&\\x12\\xb0\\xe0\\x04\\x18\\x80!\\xf3\\x01!\\xf8\\x01\\x01\\x01\\x928\\x0c\\x02\\x04\\x10!\\xe0\\x01\\xb9', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_speed_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xda\\x08%*\\xb9\\xf4\\x02\\xc3D\\x14)~\\xf7\\x03L, \\x0e\\x98@\\x03l<\\x1e\\x0f\\xfb\\xb8\\x01\\x01\\x01]\\xd8\\x0c\\x02\\x04\\x10\\x1c/\\x01\\xa0\\x80', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_speed_fling.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x9381\\x15\\x01\\x15 \\x04TH<+\\x01\\x9e\\xae\\x05\\x0c\\x8038\\xed`\\x05?\\xb8#\\xcf\\x01F\\x88\\x01\\x01\\x02L\\xbc\\x0c\\x02\\x04\\x10-\\x05\\x01\\xf6\\xc0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_paint_walljumps.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xb1,,z\\xe9\\xc4\\x03\\x91 \\x1dC\\xbaM\\x045\\xa0$\\x91\\xa6 \\x04Z4%\\xfb\\x01>`\\x01\\x01\\x01\\xaf0\\x0c\\x02\\x04\\x10 \\x86\\x01\\xae ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_race_2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03Ml\'\\xd9\\x01\\x08\\x038P\\x11\\xc8q\\xa0\\x03\\xb3\\x14+\\xbd\\xed \\x03\\xde\\xd4\\x1fW\\xf3\\x90\\x01\\x01\\x015t\\x0c\\x02\\x04\\x10#\\xea\\x01\\xfa\\xa0", 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_rat_maze.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x11\\xa0\\x1e\\xba\\xact\\x02\\x08\\x98\\x06\\xe2 \\x8a\\x02e\\x90\\x16\\xe3l\\x80\\x02|t\\x17\\xe9\\xb0X\\x01\\x01\\x9fh\\x0c\\x02\\x04\\x10\\x14o\\x01r\\x80', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_start.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08m\\xe4^6\\x03l\\x08\\x17\\x0cM\\xe6\\x026\\xa0\\tH\\x10w\\xdd\\x02\\xd2\\xe0\\t\\xbf\\xf0Fj\\x02\\xa2\\xb8\\x01\\x01\\x03ih\\x0c\\x02\\x04\\x10]A\\x01\\x03\\x06', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_catch_grind_1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03a\\x08*\\x95\\x01\\xb0\\x03C\\xdc\\x19\\xad\\x8d}\\x03\\xd1\\xc4)\\x13\\xcb@\\x03\\xfa\\xd8\\x1d\\xa4\\xcf\\xd8\\x01\\x01\\x01u4\\x0c\\x02\\x04\\x10#\\xac\\x01\\xd7\\xc0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_drill.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03o<.7\\x015\\xf0\\x03U\\xa4\\x16\\xb0\\x8au\\x03\\xe5\\x84\'\\xdf\\xdd@\\x04\\rd\\x1e\\xba\\xe7x\\x01\\x01\\x01z\\\\\\x0c\\x02\\x04\\x10!R\\x01\\xe8\\xa0", 7, 8, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_end.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xd1\\x180T\\x01mX\\x04\\xb1h\\x1b\\x8c\\xac4\\x05!\\xc08e\\x01&\\xc0\\x05Z(\\x1d\\x17\\x01\\x0b\\xc0\\x01\\x01\\x02P\\xf4\\x0c\\x02\\x04\\x10.\\x96\\x01\\x017\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_laser_1.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03E\\xc8,?\\x01\\n\\x10\\x03+\\x10\\x17\\xc9\\x90\\xb9\\x03\\xb6\\xc4\\\'\\x93\\xbe\\x03\\xdeX#\\x14\\x01\\x01\\x10\\x01\\x01\\x01>\\xc8\\x0c\\x02\\x04\\x10"\\xf5\\x01\\xc7@\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_maze.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03\\x99\\xb4/\\xab\\x01\\x0b\\xa8\\x03l\\x04)x\\xfat\\x04\\x15\\xb4,\\xe6\\xcd@\\x04B\\x9c%\\x9e\\x013 \\x01\\x01\\x01}8\\x0c\\x02\\x04\\x10\'\\xc5\\x01\\xd8\\xa0", 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xa3l$k\\xdb\\xf0\\x02\\x96$\\nd1_\\x03\\x0f\\xb0!\\x8e\\xb0 \\x031@\\x1b[\\xc4\\x08\\x01\\x01\\xdc\\xa4\\x0c\\x02\\x04\\x10\\x1bv\\x01\\xba`', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_polarity2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\x96|%\\x10\\xccH\\x02\\x8a\\xac\\t\\\\-F\\x03\\x03|\\x1a\\x89x`\\x03\\x1e\\x08\\x1a\\x83\\xaf\\xc8\\x01\\x01\\xdd$\\x0c\\x02\\x04\\x10\\x17\\x86\\x01\\x7f', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_polarity3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x038\\xc4$=\\xdc\\\\\\x03$\\xb0\\x10\\xc8]"\\x03\\xaa8&\\xb5\\xc5`\\x03\\xd0\\xf0\\x1d\\r\\xcd\\x98\\x01\\x01\\x01^\\xd8\\x0c\\x02\\x04\\x10 \\xec\\x01\\xd0\\xe0\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/mp_coop_tbeam_redirect.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xab$0\\xa9\\x01A\\xfc\\x05P@X\\x0e\\x02HS\\x06\\x1c\\x806\\xf0\\x01 \\x06Sp\\x1f\\xa1\\xf6`\\x01\\x01\\x035,\\x0c\\x02\\x04\\x101V\\x01\\x01+ ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_teambts.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\xf1\\xac\\x0b\\xf8B<\\xeb\\xe0\\x03\\xaa\\x10\\xfb\\x01\\r\\xbc\\x0f=@`\\x01\\x1c\\xfc\\x0bDT\\xa8\\x01\\x01`\\xac\\x0c\\x02\\x04\\x10\\r\\xc5\\x01E@', 0, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_turret_ball.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04U\\xb84\\xff\\x01D\\x9c\\x047d\\x1aW\\x9eq\\x04\\xd9P0V\\x01\\x03\\xa0\\x05\\t\\xa8-s\\x01K\\xe0\\x01\\x01\\x01\\xee\\xf4\\x0c\\x02\\x04\\x10)\\xa1\\x01\\x01\\x12\\xc0', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_turret_walls.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03~ /\\x06\\x01?\\xc8\\x03k\\x08\\x0fbQ)\\x03\\xf5\\xb0.\\xae\\x01\\x0f \\x04$`(\\xe4\\x01BP\\x01\\x01\\x01/|\\x0c\\x02\\x04\\x10$\\xab\\x01\\x01  ', 7, 8, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_wall_2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x01\\xc5\\xf0\\x1e\\xea\\x8e\\xd4\\x01\\xc0T\\x03\\xbf\\x0e\\xaa\\x02(\\x84\\x0f\\x81A`\\x028\\x08\\x1d\\x97\\xc0\\xa8\\x01\\x01w\\x14\\x0c\\x02\\x04\\x10\\x0ec\\x01E\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_wall_5.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xa2,(U\\xf9<\\x02\\x90\\x18\\r\\xfcc\\x83\\x02\\xe5\\x80%i\\xb4`\\x03\\n\\xec\\x19\\xbb\\xf0\\xc0\\x01\\x01\\xee\\x9c\\x0c\\x02\\x04\\x10 \\xa2\\x01\\xc2 ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_wall_block.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xc4\\xac6\\x86\\x01\\xae\\xb0\\x03\\xabx\\x14\\xf7m\\xd4\\x04HP;\\x1d\\x01\\x96\\x04\\x83p++\\x01G`\\x01\\x01\\x01\\x0f\\xf0\\x0c\\x02\\x04\\x10-\\x19\\x01\\x01\\xae\\xa0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/mp_coop_wall_intro.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03\\xb8h2h\\x01"p\\x03\\xa5\\x08\\x0f\\xd1J\\xfa\\x048T+\\x15\\xde`\\x04cl+*\\x01V\\xd8\\x01\\x01\\x01Q\\x98\\x0c\\x02\\x04\\x10#q\\x01\\xeb\\x80\', 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a1_intro1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xc9 p\\xb0\\x02,\\xd4\\x05\\xb1(\\x13\\xdd\\x9d\\x90\\x06\\xeb\\xd84\\xca\\xef@\\x07 \\xa4Z\\xb0\\x01\\xfe0\\x01\\x01\\x02\\x18\\xf4\\x0c\\x02\\x04\\x100c\\x01\\xf9@', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a1_intro2.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03O84\\xca\\xc3\\xcc\\x03FX\\x06\\xb1%\\xb1\\x04\\x0f\\x08\\x18\\x13i \\x04\'\\x1c,p\\xe7\\xc0\\x01\\x01\\x01\\x12\\x0c\\x0c\\x02\\x04\\x10\\x16\\xea\\x01o", 4, 5, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a1_intro3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x05\\xf7\\xd4W\\x14\\x01f8\\x05\\xd5\\xb4\\x1d\\xe5\\xde\\x7f\\x07\'X86\\xff\\xc0\\x07_\\x90?\\xef\\x01\\x8d\\xb0\\x01\\x01\\x01\\xff\\x94\\x0c\\x02\\x04\\x104&\\x01\\x01\\x0b", 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a1_intro4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05e\\xa4jr\\x01t$\\x05?\\xe4!\\\\\\x01\\x0f\\xeb\\x06\\x95<6n\\xf1\\xa0\\x06\\xcb\\xac5&\\x01B\\x08\\x01\\x01\\x01\\x9a\\xa8\\x0c\\x02\\x04\\x102\\xcd\\x01\\xfe', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a1_intro5.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x03\\xcc\\xfc5t\\xdf\\x98\\x03\\xb5|\\x14\\xb2\\x94\'\\x04\\x87\\xa4$d\\xa6 \\x04\\xac\\x08.b\\x01\\x01X\\x01\\x01\\x01\\x84\\x14\\x0c\\x02\\x04\\x10!\\x89\\x01\\xae\\xe0", 1, 2, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a1_intro6.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x0e\\x14B;\\x01A\\xe4\\x04\\xf6x\\x14\\x0c|^\\x05\\xfd\\x18/,\\xee@\\x06,D.0\\x01\\x1b\\xc8\\x01\\x01\\x01\\xd9\\x8c\\x0c\\x02\\x04\\x10(\\x93\\x01\\xfb\\x80', 7, 8, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a1_intro7.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04w\\xd4K\\xa8\\x01/\\xf0\\x04S\\x94 9\\xf6s\\x05`\\x90/;\\xd6\\xe0\\x05\\x8f\\xcc7F\\x014\\xd0\\x01\\x01\\x01\\x95L\\x0c\\x02\\x04\\x10+\\xdd\\x01\\xe1\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a1_wakeup.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xfb4I\\x88\\x01 `\\x03\\xe1\\xbc\\x14\\xff\\x9f*\\x04\\xbch*^\\xbe \\x04\\xe6\\xc84\\xb7\\x013 \\x01\\x01\\x01#\\xc4\\x0c\\x02\\x04\\x10+\\xa9\\x01\\xc7\\xc0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bridge_intro.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04r\\xcc:\\xb3\\x01\\x1b\\xc8\\x04Yp\\x15\\xc3\\x94\\xcd\\x05,\\xfc-\\xee\\xec\\x05Z\\xec.\\xb4\\x011\\xb8\\x01\\x01\\x01\\xb7\\\\\\x0c\\x02\\x04\\x10\'E\\x01\\xf9`", 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bridge_the_gap.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xa3d9F\\x01-\\x8c\\x04\\x8e\\x04\\x10\\xa5S\\x17\\x05PX/\\xd9\\xed\\xe0\\x05\\x804/]\\x01I\\xa0\\x01\\x01\\x01\\xce\\x88\\x0c\\x02\\x04\\x10(\\xc7\\x01\\xfd\\xa0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bts1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x058\\xe0B\\xc3\\x01\\xd0\\xb8\\x05\\x02l/\\xcb\\x01\\r\\xc5\\x05\\xe6\\xfcT\\xaa\\x01\\xd2@\\x06;\\xa8\\x1f\\xf1\\x01\\x07\\x88\\x01\\x01\\x02+|\\x0c\\x02\\x04\\x10D\\xee\\x01\\x01\\xf3 ', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bts2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02e\\xc4\\x1c#\\xee\\xd4\\x02M\\x1c\\x13\\x07\\x7f@\\x02\\x91\\xac8w\\x01;\\xa0\\x02\\xca$\\x10W\\x98p\\x01\\x01\\x01/\\x1c\\x0c\\x02\\x04\\x100\\xaa\\x01\\x01V\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bts3.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xe7\\x981W\\x01E \\x03\\xcb\\xc8\\x15\\x9c\\xa9\\x87\\x049\\xa4B\\xbb\\x014\\xa0\\x04|`\\x1c\\x8b\\x01&\\xc0\\x01\\x01\\x01\\x8c\\xec\\x0c\\x02\\x04\\x10:\\x1a\\x01\\x01F`', 1, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bts4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x1f\\x800s\\x0138\\x03\\xfb\\xe0\\x1cv\\xb8\\\\\\x04\\x90\\x84?\\xaf\\x01\\x1b`\\x04\\xd04\\x1f\\xd3\\x01,\\xa8\\x01\\x01\\x01\\xc9\\x88\\x0c\\x02\\x04\\x109\\xf6\\x01\\x01/ ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bts5.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02` \\x1dk\\xa2\\x84\\x02Jp\\x12\\x0cr\\x89\\x02\\x98\\xf4#\\x14\\x9b\\x80\\x02\\xbc\\x08\\x11\\x0e}\\xb8\\x01\\x01\\x01\\x1c\\xac\\x0c\\x02\\x04\\x10 \\x19\\x01\\xa5@', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_bts6.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03Yh)\\x95\\x01$\\x80\\x037\\x9c!#\\xbb\\xf4\\x03\\x8bX \\x18\\x84 \\x03\\xabp\\r\\x8a\\x92@\\x01\\x01\\x01\\xd5\\\\\\x0c\\x02\\x04\\x10\\x1e\\x07\\x01\\x85@', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_catapult_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xfd\\x90>h\\x01\\x1c4\\x03\\xe9\\xb4\\x0fVU\\xd7\\x04\\xc9\\x840s\\xfc\\xe0\\x04\\xf9\\xf82W\\x01A0\\x01\\x01\\x01d\\x1c\\x0c\\x02\\x04\\x10)\\xf1\\x01\\x01\\x11@', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_column_blocker.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xba\\xc0B\\x94\\x01y\\xe8\\x04\\x9dl\\x19\\x0b\\xcb\\xd5\\x05c\\xbc<\\xe2\\x014\\x05\\xa0\\xa0/\\xcd\\x01U(\\x01\\x01\\x01\\xddP\\x0c\\x02\\x04\\x103W\\x01\\x01D ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_core.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06HZS\\x01\\x92\\x05\\xcc\\xec*\\x94\\x01L\\x99\\x07(\\x84Q\\t\\x01\\xa3 \\x07y\\x90!\\xa7\\x01\\x1cX\\x01\\x01\\x035\\xb4\\x0c\\x02\\x04\\x10H_\\x01\\x01\\xc7 ', 5, 6, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_dual_lasers.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xeb\\xf8;i\\xe8\\xbc\\x03\\xd9\\x18\\x0fhP^\\x04\\xc5\\xb0&\\xb5\\xb1\\xc0\\x04\\xech3,\\x01&\\xc0\\x01\\x01\\x01k\\xcc\\x0c\\x02\\x04\\x10#z\\x01\\xbc\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_fizzler_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xb8\\xbc.\\xf3\\xc7D\\x02\\xae\\xa0\\x076%6\\x03_\\x9c\\x1d\\x87\\x8f@\\x03}$)\\x83\\xed`\\x01\\x01\\xbd\\xa4\\x0c\\x02\\x04\\x10\\x19\\xb0\\x01\\x99\\xa0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\xe2\\xa4X\\xbf\\x01\\x8a\\xb0\\x06\\xa1\\xf09\\xe3\\x01s\\xc0\\x07\\xc9\\x84S\\xff\\x01j \\x08\\x1d\\x84:\\x8a\\x01\\x9e\\xd8\\x01\\x01\\x02\\xe3,\\x0c\\x02\\x04\\x10N\\x1f\\x01\\x01y\\xe0', 1, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_laser_chaining.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03c\\xf83\\x13\\x01\\x1d$\\x03Tl\\x0b\\xd1G\\xa0\\x04\\x0bD*\\x8f\\xeb@\\x045\\xd4*\\x15\\x014@\\x01\\x01\\xed\\x04\\x0c\\x02\\x04\\x10#o\\x01\\xfb ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_laser_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x05\\xe4;\\x95\\xd8\\xe4\\x03\\xf1\\x88\\x11\\x9ejz\\x04\\xd3\\x9c$\\xad\\xa1\\x80\\x04\\xf8L0A\\x01\\x08`\\x01\\x01\\x01\\xae\\x94\\x0c\\x02\\x04\\x10!\\xce\\x01\\xa8\\xc0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_laser_over_goo.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x03u\\xdc1\\r\\xdd\\xb8\\x03h,\\t&/\\xc6\\x04.d&y\\xb9\\xc0\\x04T\\xe0.\\x07\\x01\\x15\\xe0\\x01\\x01\\x01$T\\x0c\\x02\\x04\\x10"\\xc7\\x01\\xc9@\', 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a2_laser_relays.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xfe\\xb81}\\x01\\x05\\x90\\x02\\xeb4\\x0f\\\\f\\xc6\\x03\\x990*\\x9d\\xe3\\xc0\\x03\\xc3\\xd0$\\xa9\\xf5@\\x01\\x01\\xe8D\\x0c\\x02\\x04\\x10#\\x9e\\x01\\xf6\\xe0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_laser_stairs.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x04\\xb1\\xe0J"\\x01;\\x04\\x98\\x0c\\x15wsC\\x05\\x9d\\xc4-\\x82\\xd8\\x80\\x05\\xcbH:A\\x01\\x84h\\x01\\x01\\x01\\xd1\\\\\\x0c\\x02\\x04\\x10(\\xf5\\x01\\xe8@\', 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a2_laser_vs_turret.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xc8\\xf80\\xeb\\xe2\\xc8\\x03\\xb6\\xdc\\x0e\\xefU\\xf9\\x04s\\x94$\\xad\\xac\\xa0\\x04\\x98D+\\xb8\\x01\\x12\\xc8\\x01\\x01\\x01\\x80(\\x0c\\x02\\x04\\x10 \\xad\\x01\\xb6`', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_pit_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05d0B\\x9b\\x011|\\x05OL\\x0e\\x81XJ\\x06B\\x986\\xe8\\x01\\x01@\\x06y\\x803W\\x01_\\x90\\x01\\x01\\x02hT\\x0c\\x02\\x04\\x100M\\x01\\x01\\x14\\xc0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_pull_the_rug.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04d\\x10N\\xe0\\x01;\\xcc\\x04N,\\x11bb_\\x05]T.`\\xf3\\x80\\x05\\x8b\\xb4B,\\x01x\\xe0\\x01\\x01\\x01\\x81L\\x0c\\x02\\x04\\x10)\\x85\\x01\\x01\\x05\\x80', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_ricochet.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xd4DE\\x12\\x01M`\\x04\\xb2\\xb0\\x1b\\xff\\xca\\xaa\\x05\\xa8<5o\\xfd\\x05\\xdd\\xac5p\\x01c\\xc8\\x01\\x01\\x01\\xc9\\x14\\x0c\\x02\\x04\\x100O\\x01\\x01\\x0f', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_sphere_peek.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x8cD>\\xad\\x01C|\\x04q\\x04\\x16Wk\\xc5\\x05V\\xd07\\x95\\x01,@\\x05\\x8eh1 \\x01[\\xe8\\x01\\x01\\x01\\xb08\\x0c\\x02\\x04\\x10.\\xef\\x01\\x01@ ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_triple_laser.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b\'\\x02*$"\\xf3\\xa3\\x98\\x02"\\xe0\\x05k\\x16s\\x02\\xc6\\xd8\\x15\\x17h\\x02\\xdb\\xf0\\x1d\\xf8\\xad@\\x01\\x01u\\xbc\\x0c\\x02\\x04\\x10\\x12\\xf4\\x01n`\', 4, 7, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a2_trust_fling.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x8b\\xe4?*\\x01jX\\x05c\\x8c!\\xfd\\xf3\\xd6\\x06PdC\\xfb\\x01`\\x80\\x06\\x94`6I\\x01\\x83\\x90\\x01\\x01\\x02`@\\x0c\\x02\\x04\\x108\\x89\\x01\\x01{ ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_turret_blocker.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\x07\\xdc1\\xfb\\xf3<\\x03\\xf6\\x10\\x0e\\xa7SL\\x04\\xaed%Y\\xba`\\x04\\xd3\\xc0+{\\x01\\x07\\xd0\\x01\\x01\\x01\\xb8\\x1c\\x0c\\x02\\x04\\x10 \\x10\\x01\\xc5`', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a2_turret_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03`\\xf86v\\xe8\\\\\\x03T\\x8c\\t\\xc6*\\xb6\\x04\\x18|\\x1e\\x80\\x97\\x046\\xfc/r\\x01#\\xf0\\x01\\x01\\x01\\t\\x88\\x0c\\x02\\x04\\x10\\x1b\\xa4\\x01\\xa0 ', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_00.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\xb6|)\\xdd', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_01.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08r4v\\xd9\\x01\\x99\\xe0\\x08\\x0b\\xc8`\\xe3\\x03\\r\\xbd\\t\\xb7\\xb0FC\\x01^\\xa0\\t\\xfd\\xf4V\\xbd\\x01\\xf8\\x90\\x01\\x01\\x04(|\\x0c\\x02\\x04\\x10B\\xe2\\x01\\x01o\\xe0', 4, 5, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_03.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05}\\x8cL\\xcb\\x01\\x86\\xf0\\x05>t6e\\x02(\\xc7\\x06?\\x0cG\\x14\\x01P\\x80\\x06\\x86 ,\\xbc\\x01\\\\0\\x01\\x01\\x0208\\x0c\\x02\\x04\\x10?\\xbe\\x01\\x01f@', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_bomb_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x03\\x19\\xf8/\\xaf\\xb6\\xa0\\x03\\x03\\x98\\x14\\x17\\x848\\x03\\x94\\xc0\\x1d\\x81~\\xc0\\x03\\xb2D$\\xa0\\x01%\\xe8\\x01\\x01\\x01O@\\x0c\\x02\\x04\\x10\\x1b\\xa0\\x01\\x84', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_crazy_box.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04Q\\xd0(\\x17\\xd7p\\x044\\x84\\x17\\xba\\xa4\\x9c\\x04\\xa7\\x9c2L\\xe2\\x04\\xd9\\xe8\\x1bw\\xf8X\\x01\\x01\\x02{D\\x0c\\x02\\x04\\x10,D\\x01\\xf2`', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_end.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x07;dm\\x93\\x01\\xe5X\\x07\\x13\\xa4 \\xfd\\x01V\\x16\\x08\\x85\\\\C\\xfa\\x01F\\xe0\\x08\\xc9X=\\xe1\\x01\\xd4\\x90\\x01\\x01\\x03\\x88\\x14\\x0c\\x02\\x04\\x10<\\x87\\x01\\x01Y\\xc0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_jump_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x16\\x1876\\x01%4\\x04\\xd5\\xa4<7\\x01\\xa9_\\x05\\x8e\\x04=\\xf7\\x01\\x1d\\xe0\\x05\\xcb\\xfc,\\x13\\x01\\x89\\xc0\\x01\\x01\\x02\\x8c\\x10\\x0c\\x02\\x04\\x108\\x80\\x01\\x01(\\xc0', 14, 15, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_portal_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\t\\xc4\\x04gc\\x02X\\x0c\\tY<b\\xe4\\x03\\x90\\x08\\n\\x968X\\x9e\\x01\\x93@\\n\\xee\\xd8NS\\x02\\x8b`\\x01\\x01\\x04\\xb9(\\x0c\\x02\\x04\\x10R\\x92\\x01\\x01\\xa9\\xe0', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_speed_flings.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02!L#\\x98\\xbe\\xd4\\x02\\x1d`\\x01*\\x0b|\\x02q\\\\\\x11\\xd1N`\\x02\\x830\\x1a\\xc7\\xcb\\xe8\\x01\\x01\\xc0,\\x0c\\x02\\x04\\x10\\x10\\xa7\\x01T`', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_speed_ramp.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04|\\x84.~\\xdf\\x98\\x04\\x1b\\xd4]>\\x02\\x83\\xe1\\x04\\xe8\\xb42O\\xe2\\xc0\\x05\\x1b\\x04,\\xf8\\x01q\\xd8\\x01\\x01\\x02=\\xec\\x0c\\x02\\x04\\x10/)\\x01\\xea\\xc0', 2, 3, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a3_transition01.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x07\\xff8TD\\x01\\x89\\x07\\xba\\xc4=\\xe6\\x01\\xca\\x9b\\x08\\xd9\\xe8A\\xd9\\x013`\\t\\x1b\\xc4-q\\x01\\x81\\x08\\x01\\x01\\x04v\\x18\\x0c\\x02\\x04\\x10<\\xce\\x01\\x01C ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_finale1.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xae\\x0cEd\\x01r\\\\\\x04\\x89\\xf4\\x1e@\\xce\\x92\\x05lLEZ\\x01Q\\xc0\\x05\\xb1\\xa84\\x1a\\x01Q\\xc8\\x01\\x01\\x01\\xf1X\\x0c\\x02\\x04\\x10;\\xd6\\x01\\x01c\\xc0', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_finale2.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x05\\xd4>\\x9e\\x01\\x97p\\x05\\xdeD\\x1f\\xeb\\xba\\xa9\\x06\\x96V*\\x01\\xb4\\xc0\\x06\\xec,%\\xdb\\x01?\\xc8\\x01\\x01\\x0308\\x0c\\x02\\x04\\x10I\\xad\\x01\\x01\\xd0\\xe0', 2, 3, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_finale3.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x05t\\xd4G\'\\x01\\xbaD\\x05=H1m\\x01\\xa9\\xcb\\x05\\xf2`O\\xbd\\x01x\\xc0\\x06B -\\x83\\x01\\x9cP\\x01\\x01\\x02al\\x0c\\x02\\x04\\x10Ed\\x01\\x01\\x8c@", 2, 3, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a4_finale4.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\xc2T\\x9c\\xf3\\x01\\xfap\\x05\\xac\\x90\\x10\\x16\\x98k\\x06\\xfd`@T\\x019 \\x07=\\xb4?\\x9e\\x01X\\x88\\x01\\x01\\x02l\\xfc\\x0c\\x02\\x04\\x1098\\x01\\x01M ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06\\x85\\x9c]Z\\x02%\\xfc\\x06M\\x942\\xf1\\x01\\x183\\x07lXF\\xec\\x01m\\x80\\x07\\xb3D1\\x18\\x01j\\xd0\\x01\\x01\\x02\\xb1\\x1c\\x0c\\x02\\x04\\x10:X\\x01\\x01\\x82 ', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_jump_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x08\\xb9\\x8c_F\\x01\\xff\\xe0\\x08: {\\r\\x03[\\xf3\\t\\xb0\\x90Y}\\x01\\xb9`\\n\\n\\x1076\\x01i\\xb0\\x01\\x01\\x04e8\\x0c\\x02\\x04\\x10Ph\\x01\\x01\\xc8', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_laser_catapult.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x06l,mx\\x01\\xf4d\\x065\\xac2\\n\\xf6\\n\\x07\\x81\\x98@\\xad\\x01:@\\x07\\xc2H;\\xd9\\x01]\\xe0\\x01\\x01\\x02\\xe6t\\x0c\\x02\\x04\\x109\\\\\\x01\\x01I ', 6, 7, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_laser_platform.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x83@`\\xf2\\x02\\x16\\x90\\x05c\\x08\\x1b\\x11\\xa2\\x88\\x06`\\xb4C\\x17\\x01F\\x80\\x06\\xa3\\xcc.N\\x013\\xb0\\x01\\x01\\x02\\xa3(\\x0c\\x02\\x04\\x10;(\\x01\\x01W\\x80', 1, 2, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_speed_tb_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04h4<\\x9a\\x01`\\x98\\x04C\\x88 @\\xd2\\xe3\\x04\\xf8\\x18>\\xff\\x010\\xe0\\x057\\x18\\x1f/\\xf8X\\x01\\x01\\x01\\xa5\\xc8\\x0c\\x02\\x04\\x105s\\x01\\x01>\\xe0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_stop_the_box.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04G\\x883#\\x01-\\\\\\x041,\\x11\\xbad)\\x04\\xe8,5T\\x01+\\xa0\\x05\\x1d\\x80\'t\\x01\\x07\\x88\\x01\\x01\\x01\\xced\\x0c\\x02\\x04\\x10*?\\x01\\x01>\\xa0", 2, 3, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a4_tb_catch.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x04\\xc2,@\\x84\\x01:d\\x04\\xaax\\x13\\xee\\x88\\xb1\\x05v\\x08/\\xc4\\xe3\\x05\\xa5\\xcc1d\\x01W \\x01\\x01\\x01\\xb8\\xd8\\x0c\\x02\\x04\\x10)S\\x01\\xee ', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_tb_intro.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x02\\xdd8,W\\xfb\\xb8\\x02\\xd4\\xdc\\x04\\x96\\x11\\xe1\\x03xH#\\xab\\xdb`\\x03\\x9b\\xf4#O\\xdb\\xa8\\x01\\x01\\xb34\\x0c\\x02\\x04\\x10\\x1c,\\x01\\xed', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_tb_polarity.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x05\\x08dB\\x9e\\x01b`\\x04\\xd5\\x88/9\\x01/G\\x05\\xb5\\xd468\\x01\\x14`\\x05\\xec\\x0c+D\\x01$\\x80\\x01\\x01\\x02Ht\\x0c\\x02\\x04\\x10/\\xfe\\x01\\x01 \\xa0', 4, 5, 'invalid start byte')})"),[0m
[1m[31mE         +  'portal2/maps/sp_a4_tb_trust_drop.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04\\xf4\\xe8=\\x97\\x01]\\x14\\x04\\xc2\\xa4.\\xa5\\x011\\xb2\\x05\\xa2x9\\xa7\\x015\\xe0\\x05\\xdc +\'\\x01BP\\x01\\x01\\x02A\\xbc\\x0c\\x02\\x04\\x100\\xd2\\x01\\x01D ", 1, 2, \'invalid continuation byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a4_tb_wall_button.360.bsp': AssertionError('sprp v9\nassert 1 == 0\n +  where 1 = len({\'sprp v9\': UnicodeDecodeError(\'utf-8\', b"\\x04\\x90\\xd4<\\x18\\x01,H\\x04~$\\r\\xd8V\\xdd\\x05ND<\\x05\\x01%\\xe0\\x05\\x8aL-\'\\x015`\\x01\\x01\\x01\\xdf\\x84\\x0c\\x02\\x04\\x102D\\x01\\x014\\xc0", 1, 2, \'invalid start byte\')})'),[0m
[1m[31mE         +  'portal2/maps/sp_a5_credits.360.bsp': AssertionError("sprp v9\nassert 1 == 0\n +  where 1 = len({'sprp v9': UnicodeDecodeError('utf-8', b'\\x0b\\xf4R', 1, 2, 'invalid continuation byte')})"),[0m
[1m[31mE           }[0m

[1m[31mtests\test_load_bsp.py[0m:115: AssertionError
[33m============================== warnings summary ===============================[0m
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Momentum Mod Playtest-map_dirs61]
tests/test_load_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Team Fortress 2-map_dirs69]
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CSS/Bocuma747_SurfMaps-map_dirs112]
tests/test_load_bsp.py::test_load_bsp[E:/Mod-CSS/OiuSURF_SurfMaps-map_dirs113]
tests/test_load_bsp.py::test_load_bsp[E:/Mod-MomentumMod-map_dirs121]
  C:\Users\Jared\Documents\GitHub\bsp_tool\bsp_tool\lumps.py:400: UserWarning: compressed empty sprp game lump
    warnings.warn(UserWarning(f"compressed empty {child_name} game lump"))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform win32, python 3.11.3-final-0 -----------
Name                                                      Stmts   Miss  Cover
-----------------------------------------------------------------------------
bsp_tool\__init__.py                                         53      3    94%
bsp_tool\base.py                                             85     30    65%
bsp_tool\branches\__init__.py                                43      0   100%
bsp_tool\branches\ace_team\__init__.py                        2      0   100%
bsp_tool\branches\ace_team\zeno_clash.py                     79      0   100%
bsp_tool\branches\arkane\__init__.py                          3      0   100%
bsp_tool\branches\arkane\dark_messiah_mp.py                  16      0   100%
bsp_tool\branches\arkane\dark_messiah_sp.py                  51      0   100%
bsp_tool\branches\base.py                                   431     38    91%
bsp_tool\branches\gearbox\__init__.py                         3      0   100%
bsp_tool\branches\gearbox\blue_shift.py                      28      0   100%
bsp_tool\branches\gearbox\nightfire.py                       90      0   100%
bsp_tool\branches\id_software\__init__.py                     9      0   100%
bsp_tool\branches\id_software\qbism.py                       44      0   100%
bsp_tool\branches\id_software\qfusion.py                    114      6    95%
bsp_tool\branches\id_software\quake2.py                     203      0   100%
bsp_tool\branches\id_software\quake3.py                     237     23    90%
bsp_tool\branches\id_software\quake64.py                     44      0   100%
bsp_tool\branches\id_software\quake.py                      299     54    82%
bsp_tool\branches\id_software\remake_quake.py                20      0   100%
bsp_tool\branches\id_software\remake_quake_old.py            25      0   100%
bsp_tool\branches\infinity_ward\__init__.py                   5      0   100%
bsp_tool\branches\infinity_ward\call_of_duty1.py             46      0   100%
bsp_tool\branches\infinity_ward\call_of_duty1_demo.py       168      6    96%
bsp_tool\branches\infinity_ward\call_of_duty2.py            139      1    99%
bsp_tool\branches\infinity_ward\modern_warfare.py            63      0   100%
bsp_tool\branches\ion_storm\__init__.py                       2      0   100%
bsp_tool\branches\ion_storm\daikatana.py                     13      0   100%
bsp_tool\branches\loiste\__init__.py                          2      0   100%
bsp_tool\branches\loiste\infra.py                            80      0   100%
bsp_tool\branches\nexon\__init__.py                           5      0   100%
bsp_tool\branches\nexon\cso2.py                              98      0   100%
bsp_tool\branches\nexon\cso2_2018.py                         18      0   100%
bsp_tool\branches\nexon\vindictus69.py                      261      4    98%
bsp_tool\branches\nexon\vindictus.py                         82      0   100%
bsp_tool\branches\outerlight\__init__.py                      2      0   100%
bsp_tool\branches\outerlight\outerlight.py                   79      0   100%
bsp_tool\branches\raven\__init__.py                           4      0   100%
bsp_tool\branches\raven\hexen2.py                            50      0   100%
bsp_tool\branches\raven\soldier_of_fortune2.py               32      0   100%
bsp_tool\branches\raven\soldier_of_fortune.py                37      0   100%
bsp_tool\branches\respawn\__init__.py                         6      0   100%
bsp_tool\branches\respawn\apex_legends13.py                 154      0   100%
bsp_tool\branches\respawn\apex_legends.py                   377     55    85%
bsp_tool\branches\respawn\titanfall2.py                     249      4    98%
bsp_tool\branches\respawn\titanfall.py                      800    133    83%
bsp_tool\branches\respawn\titanfall_x360.py                  31      0   100%
bsp_tool\branches\ritual\__init__.py                          8      0   100%
bsp_tool\branches\ritual\fakk2.py                            60      0   100%
bsp_tool\branches\ritual\mohaa.py                            42      0   100%
bsp_tool\branches\ritual\mohaa_bt.py                         12      0   100%
bsp_tool\branches\ritual\mohaa_demo.py                       89      0   100%
bsp_tool\branches\ritual\sin.py                              14      0   100%
bsp_tool\branches\ritual\star_trek_elite_force2.py           43      0   100%
bsp_tool\branches\ritual\star_trek_elite_force2_demo.py      77      0   100%
bsp_tool\branches\shared.py                                  78     16    79%
bsp_tool\branches\strata\__init__.py                          2      0   100%
bsp_tool\branches\strata\strata.py                          238      0   100%
bsp_tool\branches\troika\__init__.py                          2      0   100%
bsp_tool\branches\troika\vampire.py                          36      0   100%
bsp_tool\branches\utoplanet\__init__.py                       2      0   100%
bsp_tool\branches\utoplanet\merubasu.py                     106      0   100%
bsp_tool\branches\valve\__init__.py                          13      0   100%
bsp_tool\branches\valve\alien_swarm.py                       81      0   100%
bsp_tool\branches\valve\goldsrc.py                           88      3    97%
bsp_tool\branches\valve\left4dead2.py                       109      0   100%
bsp_tool\branches\valve\left4dead.py                        106      0   100%
bsp_tool\branches\valve\orange_box.py                       122      0   100%
bsp_tool\branches\valve\orange_box_x360.py                   85      0   100%
bsp_tool\branches\valve\physics.py                          179     79    56%
bsp_tool\branches\valve\sdk_2013.py                         132      0   100%
bsp_tool\branches\valve\sdk_2013_x360.py                     36      0   100%
bsp_tool\branches\valve\source.py                           786     52    93%
bsp_tool\branches\valve\source_filmmaker.py                  80      0   100%
bsp_tool\branches\vector.py                                 193    103    47%
bsp_tool\branches\x360.py                                    21      0   100%
bsp_tool\extensions\__init__.py                               0      0   100%
bsp_tool\extensions\archives\__init__.py                     21     21     0%
bsp_tool\extensions\archives\base.py                          7      7     0%
bsp_tool\extensions\archives\bluepoint.py                     4      4     0%
bsp_tool\extensions\archives\gearbox.py                       4      4     0%
bsp_tool\extensions\archives\id_software.py                   6      6     0%
bsp_tool\extensions\archives\infinity_ward.py                52     52     0%
bsp_tool\extensions\archives\nexon.py                         7      7     0%
bsp_tool\extensions\archives\respawn.py                     100    100     0%
bsp_tool\extensions\archives\utoplanet.py                    58     58     0%
bsp_tool\extensions\archives\valve.py                         4      4     0%
bsp_tool\extensions\compiler_signature.py                    41      5    88%
bsp_tool\extensions\convert\__init__.py                       0      0   100%
bsp_tool\extensions\convert\respawn.py                       44     44     0%
bsp_tool\extensions\decompile_rbsp.py                       103    103     0%
bsp_tool\extensions\decrypt_xor.py                           11     11     0%
bsp_tool\extensions\diff\__init__.py                          8      0   100%
bsp_tool\extensions\diff\base.py                             33      0   100%
bsp_tool\extensions\diff\bsps.py                             70     35    50%
bsp_tool\extensions\diff\core.py                             15      1    93%
bsp_tool\extensions\diff\id_software\quake2.py               21     15    29%
bsp_tool\extensions\diff\lightmaps.py                         1      0   100%
bsp_tool\extensions\diff\lumps.py                            34     23    32%
bsp_tool\extensions\diff\shared.py                           47     16    66%
bsp_tool\extensions\diff\valve\source.py                     48      5    90%
bsp_tool\extensions\lightmaps.py                            235    235     0%
bsp_tool\extensions\mprt.py                                  15     15     0%
bsp_tool\extensions\to_cpp.py                                24     24     0%
bsp_tool\id_software.py                                      82      7    91%
bsp_tool\infinity_ward.py                                    52      7    87%
bsp_tool\lumps.py                                           361     73    80%
bsp_tool\raven.py                                             3      0   100%
bsp_tool\respawn.py                                         231    129    44%
bsp_tool\ritual.py                                           22      0   100%
bsp_tool\valve.py                                           142     77    46%
-----------------------------------------------------------------------------
TOTAL                                                      9428   1698    82%

[36m[1m=========================== short test summary info ===========================[0m
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[D:/SteamLibrary/steamapps/common-Jabroni Brawl Episode 3-map_dirs57][0m - AssertionError: 13 out of 141 .bsps failed
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[E:/Mod-DDayNormandy-map_dirs82][0m - AssertionError: 2 out of 719 .bsps failed
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[E:/Mod-QuakeII/rerelease-map_dirs93][0m - AssertionError: 1 out of 222 .bsps failed
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[E:/Mod-DarkMessiah/singleplayer-map_dirs115][0m - AssertionError: 33 out of 35 .bsps failed
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[E:/Mod-DarkMessiah/multiplayer-map_dirs116][0m - AssertionError: 11 out of 11 .bsps failed
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[E:/Mod-Vindictus-map_dirs126][0m - AssertionError: 301 out of 475 .bsps failed
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[E:/Mod/X360-Left4Dead-map_dirs165][0m - AssertionError: 43 out of 44 .bsps failed
[31mFAILED[0m tests/test_load_bsp.py::[1mtest_load_bsp[E:/Mod/X360-Portal2-map_dirs168][0m - AssertionError: 105 out of 105 .bsps failed
[31m===== [31m[1m8 failed[0m, [32m662 passed[0m, [33m17 xfailed[0m, [33m5 warnings[0m[31m in 4408.47s (1:13:28)[0m[31m ======[0m
