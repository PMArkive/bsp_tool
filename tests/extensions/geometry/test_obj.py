import itertools
import os

from bsp_tool.extensions.geometry import obj
from bsp_tool.utils import geometry
from bsp_tool.utils import vector


def test_dummy():
    # generate cube
    vertices = [vector.vec3(i >> 2, i >> 1 & 1, i & 1) for i in range(8)]
    quads = [
        ((0b000, 0b001, 0b011, 0b010), vector.vec3(x=-1)),
        ((0b000, 0b001, 0b101, 0b100), vector.vec3(y=-1)),
        ((0b000, 0b100, 0b110, 0b010), vector.vec3(z=-1)),
        ((0b100, 0b101, 0b111, 0b110), vector.vec3(x=1)),
        ((0b010, 0b011, 0b111, 0b110), vector.vec3(y=1)),
        ((0b001, 0b101, 0b111, 0b011), vector.vec3(z=1))]
    polygons = [geometry.Polygon([geometry.Vertex(vertices[i], n) for i in idxs]) for idxs, n in quads]
    model = geometry.Model([geometry.Mesh(polygons=polygons)])

    # save .obj file
    assert not os.path.exists("tests/dummy.obj")
    obj.Obj([model]).save_as("tests/dummy.obj")
    with open("tests/dummy.obj") as obj_file:
        lines = [line.rstrip() for line in obj_file.readlines()]
    os.remove("tests/dummy.obj")

    # test .obj file contents
    assert lines[0] == "# generated by bsp_tool.extensions.geometry"

    vs = lines[1:9]
    assert all(line.startswith("v ") for line in vs)
    ordered_vertices = [  # order of appearance in quads
        vertices[0b000], vertices[0b001], vertices[0b011], vertices[0b010],
        vertices[0b101], vertices[0b100], vertices[0b110], vertices[0b111]]
    for line, vertex in zip(lines[1:9], ordered_vertices):
        assert line == f"v {vertex.x} {vertex.y} {vertex.z}"

    vns = lines[9:15]
    assert all(line.startswith("vn ") for line in vns)
    for line, (_, normal) in zip(vns, quads):
        assert line == f"vn {normal.x} {normal.y} {normal.z}"

    assert lines[15] == "o model_000"
    assert lines[16] == "usemtl default"

    faces = lines[17:23]
    assert all(line.startswith("f ") for line in faces)
    for i, line, (indices, normal) in zip(itertools.count(), faces, quads):
        vs, vns = zip(*[[int(y) - 1 for y in x.split("//")] for x in line.split()[1:]])
        assert len(set(vns)) == 1
        assert vns[0] == i
        assert [ordered_vertices[v] for v in vs] == [vertices[i] for i in indices]

    assert len(lines) == 23
