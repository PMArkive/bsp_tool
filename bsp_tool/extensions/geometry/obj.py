import collections
from typing import List

from ...utils import geometry


class Obj:
    """Y+ forward; Z+ up"""
    models: List[geometry.Model]

    def __init__(self, models=list()):
        self.models = models

    # TODO: @classmethod from_file(cls, filename) -> Obj:

    def save_as(self, filename: str):
        # TODO: assert filename is a valid path
        vs = list()
        vns = list()
        vts = list()

        def get_index(array, value) -> int:
            if value in array:
                return array.index(value)
            else:
                array.append(value)
                return len(array) - 1

        def indices(vertex: geometry.Vertex) -> str:
            v = get_index(vs, vertex.position) + 1
            vn = get_index(vns, vertex.normal) + 1
            if len(vertex.uv) == 0:
                return f"{v}/{vn}"
            else:
                vt = get_index(vts, vertex.uv[0]) + 1
                return f"{v}/{vn}/{vt}"

        faces = list()
        for model_number, model in enumerate(self.models):
            faces.append(f"o model_{model_number:03d}")
            polygons = collections.defaultdict(list)
            # ^ {Material: [Polygon]}
            for mesh in model.meshes:
                polygons[mesh.material].extend(mesh.polygons)
            for material in polygons:
                faces.append(f"usemtl {material.name}")
                # TODO: generate .mtl files & include w/ "mtllib {material.name}.mtl"
                for polygon in polygons[material]:
                    vertices = map(model.apply_transforms, polygon.vertices)
                    faces.append(" ".join(["f", *map(indices, vertices)]))
        out = ["# generated by bsp_tool.extensions.geometry",
               *[f"v {v.x} {v.y} {v.z}" for v in vs],
               *[f"vn {vn.x} {vn.y} {vn.z}" for vn in vns],
               *[f"vt {vt.x} {vt.y}" for vt in vts],
               *faces]
        with open(filename, "w") as obj_file:
            obj_file.write("\n".join(out))
